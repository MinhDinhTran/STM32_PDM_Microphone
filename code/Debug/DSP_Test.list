
DSP_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fd4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800515c  0800515c  0001515c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080051e4  080051e4  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080051e8  080051e8  000151e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000474  20000000  080051ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020474  2**0
                  CONTENTS
  8 .bss          000005f4  20000474  20000474  00020474  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000a68  20000a68  00020474  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY
 11 .debug_info   00009094  00000000  00000000  000204a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001c87  00000000  00000000  00029538  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000038b3  00000000  00000000  0002b1bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  0002ea78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006a0  00000000  00000000  0002f158  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fa2f  00000000  00000000  0002f7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007b7c  00000000  00000000  0004f227  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bdaa1  00000000  00000000  00056da3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000fa  00000000  00000000  00114844  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001400  00000000  00000000  00114940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000474 	.word	0x20000474
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005144 	.word	0x08005144

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000478 	.word	0x20000478
 80001c4:	08005144 	.word	0x08005144

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_d2f>:
 8000540:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000544:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000548:	bf24      	itt	cs
 800054a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800054e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000552:	d90d      	bls.n	8000570 <__aeabi_d2f+0x30>
 8000554:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000558:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800055c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000560:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000564:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000568:	bf08      	it	eq
 800056a:	f020 0001 	biceq.w	r0, r0, #1
 800056e:	4770      	bx	lr
 8000570:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000574:	d121      	bne.n	80005ba <__aeabi_d2f+0x7a>
 8000576:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800057a:	bfbc      	itt	lt
 800057c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000580:	4770      	bxlt	lr
 8000582:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000586:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800058a:	f1c2 0218 	rsb	r2, r2, #24
 800058e:	f1c2 0c20 	rsb	ip, r2, #32
 8000592:	fa10 f30c 	lsls.w	r3, r0, ip
 8000596:	fa20 f002 	lsr.w	r0, r0, r2
 800059a:	bf18      	it	ne
 800059c:	f040 0001 	orrne.w	r0, r0, #1
 80005a0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005a4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005ac:	ea40 000c 	orr.w	r0, r0, ip
 80005b0:	fa23 f302 	lsr.w	r3, r3, r2
 80005b4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b8:	e7cc      	b.n	8000554 <__aeabi_d2f+0x14>
 80005ba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005be:	d107      	bne.n	80005d0 <__aeabi_d2f+0x90>
 80005c0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005c4:	bf1e      	ittt	ne
 80005c6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005ca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005ce:	4770      	bxne	lr
 80005d0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005d4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <__aeabi_uldivmod>:
 80005e0:	b953      	cbnz	r3, 80005f8 <__aeabi_uldivmod+0x18>
 80005e2:	b94a      	cbnz	r2, 80005f8 <__aeabi_uldivmod+0x18>
 80005e4:	2900      	cmp	r1, #0
 80005e6:	bf08      	it	eq
 80005e8:	2800      	cmpeq	r0, #0
 80005ea:	bf1c      	itt	ne
 80005ec:	f04f 31ff 	movne.w	r1, #4294967295
 80005f0:	f04f 30ff 	movne.w	r0, #4294967295
 80005f4:	f000 b972 	b.w	80008dc <__aeabi_idiv0>
 80005f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000600:	f000 f806 	bl	8000610 <__udivmoddi4>
 8000604:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000608:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800060c:	b004      	add	sp, #16
 800060e:	4770      	bx	lr

08000610 <__udivmoddi4>:
 8000610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000614:	9e08      	ldr	r6, [sp, #32]
 8000616:	4604      	mov	r4, r0
 8000618:	4688      	mov	r8, r1
 800061a:	2b00      	cmp	r3, #0
 800061c:	d14b      	bne.n	80006b6 <__udivmoddi4+0xa6>
 800061e:	428a      	cmp	r2, r1
 8000620:	4615      	mov	r5, r2
 8000622:	d967      	bls.n	80006f4 <__udivmoddi4+0xe4>
 8000624:	fab2 f282 	clz	r2, r2
 8000628:	b14a      	cbz	r2, 800063e <__udivmoddi4+0x2e>
 800062a:	f1c2 0720 	rsb	r7, r2, #32
 800062e:	fa01 f302 	lsl.w	r3, r1, r2
 8000632:	fa20 f707 	lsr.w	r7, r0, r7
 8000636:	4095      	lsls	r5, r2
 8000638:	ea47 0803 	orr.w	r8, r7, r3
 800063c:	4094      	lsls	r4, r2
 800063e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000642:	0c23      	lsrs	r3, r4, #16
 8000644:	fbb8 f7fe 	udiv	r7, r8, lr
 8000648:	fa1f fc85 	uxth.w	ip, r5
 800064c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000650:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000654:	fb07 f10c 	mul.w	r1, r7, ip
 8000658:	4299      	cmp	r1, r3
 800065a:	d909      	bls.n	8000670 <__udivmoddi4+0x60>
 800065c:	18eb      	adds	r3, r5, r3
 800065e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000662:	f080 811b 	bcs.w	800089c <__udivmoddi4+0x28c>
 8000666:	4299      	cmp	r1, r3
 8000668:	f240 8118 	bls.w	800089c <__udivmoddi4+0x28c>
 800066c:	3f02      	subs	r7, #2
 800066e:	442b      	add	r3, r5
 8000670:	1a5b      	subs	r3, r3, r1
 8000672:	b2a4      	uxth	r4, r4
 8000674:	fbb3 f0fe 	udiv	r0, r3, lr
 8000678:	fb0e 3310 	mls	r3, lr, r0, r3
 800067c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000680:	fb00 fc0c 	mul.w	ip, r0, ip
 8000684:	45a4      	cmp	ip, r4
 8000686:	d909      	bls.n	800069c <__udivmoddi4+0x8c>
 8000688:	192c      	adds	r4, r5, r4
 800068a:	f100 33ff 	add.w	r3, r0, #4294967295
 800068e:	f080 8107 	bcs.w	80008a0 <__udivmoddi4+0x290>
 8000692:	45a4      	cmp	ip, r4
 8000694:	f240 8104 	bls.w	80008a0 <__udivmoddi4+0x290>
 8000698:	3802      	subs	r0, #2
 800069a:	442c      	add	r4, r5
 800069c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80006a0:	eba4 040c 	sub.w	r4, r4, ip
 80006a4:	2700      	movs	r7, #0
 80006a6:	b11e      	cbz	r6, 80006b0 <__udivmoddi4+0xa0>
 80006a8:	40d4      	lsrs	r4, r2
 80006aa:	2300      	movs	r3, #0
 80006ac:	e9c6 4300 	strd	r4, r3, [r6]
 80006b0:	4639      	mov	r1, r7
 80006b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b6:	428b      	cmp	r3, r1
 80006b8:	d909      	bls.n	80006ce <__udivmoddi4+0xbe>
 80006ba:	2e00      	cmp	r6, #0
 80006bc:	f000 80eb 	beq.w	8000896 <__udivmoddi4+0x286>
 80006c0:	2700      	movs	r7, #0
 80006c2:	e9c6 0100 	strd	r0, r1, [r6]
 80006c6:	4638      	mov	r0, r7
 80006c8:	4639      	mov	r1, r7
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	fab3 f783 	clz	r7, r3
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d147      	bne.n	8000766 <__udivmoddi4+0x156>
 80006d6:	428b      	cmp	r3, r1
 80006d8:	d302      	bcc.n	80006e0 <__udivmoddi4+0xd0>
 80006da:	4282      	cmp	r2, r0
 80006dc:	f200 80fa 	bhi.w	80008d4 <__udivmoddi4+0x2c4>
 80006e0:	1a84      	subs	r4, r0, r2
 80006e2:	eb61 0303 	sbc.w	r3, r1, r3
 80006e6:	2001      	movs	r0, #1
 80006e8:	4698      	mov	r8, r3
 80006ea:	2e00      	cmp	r6, #0
 80006ec:	d0e0      	beq.n	80006b0 <__udivmoddi4+0xa0>
 80006ee:	e9c6 4800 	strd	r4, r8, [r6]
 80006f2:	e7dd      	b.n	80006b0 <__udivmoddi4+0xa0>
 80006f4:	b902      	cbnz	r2, 80006f8 <__udivmoddi4+0xe8>
 80006f6:	deff      	udf	#255	; 0xff
 80006f8:	fab2 f282 	clz	r2, r2
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	f040 808f 	bne.w	8000820 <__udivmoddi4+0x210>
 8000702:	1b49      	subs	r1, r1, r5
 8000704:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000708:	fa1f f885 	uxth.w	r8, r5
 800070c:	2701      	movs	r7, #1
 800070e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000712:	0c23      	lsrs	r3, r4, #16
 8000714:	fb0e 111c 	mls	r1, lr, ip, r1
 8000718:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800071c:	fb08 f10c 	mul.w	r1, r8, ip
 8000720:	4299      	cmp	r1, r3
 8000722:	d907      	bls.n	8000734 <__udivmoddi4+0x124>
 8000724:	18eb      	adds	r3, r5, r3
 8000726:	f10c 30ff 	add.w	r0, ip, #4294967295
 800072a:	d202      	bcs.n	8000732 <__udivmoddi4+0x122>
 800072c:	4299      	cmp	r1, r3
 800072e:	f200 80cd 	bhi.w	80008cc <__udivmoddi4+0x2bc>
 8000732:	4684      	mov	ip, r0
 8000734:	1a59      	subs	r1, r3, r1
 8000736:	b2a3      	uxth	r3, r4
 8000738:	fbb1 f0fe 	udiv	r0, r1, lr
 800073c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000740:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000744:	fb08 f800 	mul.w	r8, r8, r0
 8000748:	45a0      	cmp	r8, r4
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0x14c>
 800074c:	192c      	adds	r4, r5, r4
 800074e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0x14a>
 8000754:	45a0      	cmp	r8, r4
 8000756:	f200 80b6 	bhi.w	80008c6 <__udivmoddi4+0x2b6>
 800075a:	4618      	mov	r0, r3
 800075c:	eba4 0408 	sub.w	r4, r4, r8
 8000760:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000764:	e79f      	b.n	80006a6 <__udivmoddi4+0x96>
 8000766:	f1c7 0c20 	rsb	ip, r7, #32
 800076a:	40bb      	lsls	r3, r7
 800076c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000770:	ea4e 0e03 	orr.w	lr, lr, r3
 8000774:	fa01 f407 	lsl.w	r4, r1, r7
 8000778:	fa20 f50c 	lsr.w	r5, r0, ip
 800077c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000780:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000784:	4325      	orrs	r5, r4
 8000786:	fbb3 f9f8 	udiv	r9, r3, r8
 800078a:	0c2c      	lsrs	r4, r5, #16
 800078c:	fb08 3319 	mls	r3, r8, r9, r3
 8000790:	fa1f fa8e 	uxth.w	sl, lr
 8000794:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000798:	fb09 f40a 	mul.w	r4, r9, sl
 800079c:	429c      	cmp	r4, r3
 800079e:	fa02 f207 	lsl.w	r2, r2, r7
 80007a2:	fa00 f107 	lsl.w	r1, r0, r7
 80007a6:	d90b      	bls.n	80007c0 <__udivmoddi4+0x1b0>
 80007a8:	eb1e 0303 	adds.w	r3, lr, r3
 80007ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80007b0:	f080 8087 	bcs.w	80008c2 <__udivmoddi4+0x2b2>
 80007b4:	429c      	cmp	r4, r3
 80007b6:	f240 8084 	bls.w	80008c2 <__udivmoddi4+0x2b2>
 80007ba:	f1a9 0902 	sub.w	r9, r9, #2
 80007be:	4473      	add	r3, lr
 80007c0:	1b1b      	subs	r3, r3, r4
 80007c2:	b2ad      	uxth	r5, r5
 80007c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80007c8:	fb08 3310 	mls	r3, r8, r0, r3
 80007cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80007d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80007d4:	45a2      	cmp	sl, r4
 80007d6:	d908      	bls.n	80007ea <__udivmoddi4+0x1da>
 80007d8:	eb1e 0404 	adds.w	r4, lr, r4
 80007dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80007e0:	d26b      	bcs.n	80008ba <__udivmoddi4+0x2aa>
 80007e2:	45a2      	cmp	sl, r4
 80007e4:	d969      	bls.n	80008ba <__udivmoddi4+0x2aa>
 80007e6:	3802      	subs	r0, #2
 80007e8:	4474      	add	r4, lr
 80007ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007ee:	fba0 8902 	umull	r8, r9, r0, r2
 80007f2:	eba4 040a 	sub.w	r4, r4, sl
 80007f6:	454c      	cmp	r4, r9
 80007f8:	46c2      	mov	sl, r8
 80007fa:	464b      	mov	r3, r9
 80007fc:	d354      	bcc.n	80008a8 <__udivmoddi4+0x298>
 80007fe:	d051      	beq.n	80008a4 <__udivmoddi4+0x294>
 8000800:	2e00      	cmp	r6, #0
 8000802:	d069      	beq.n	80008d8 <__udivmoddi4+0x2c8>
 8000804:	ebb1 050a 	subs.w	r5, r1, sl
 8000808:	eb64 0403 	sbc.w	r4, r4, r3
 800080c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000810:	40fd      	lsrs	r5, r7
 8000812:	40fc      	lsrs	r4, r7
 8000814:	ea4c 0505 	orr.w	r5, ip, r5
 8000818:	e9c6 5400 	strd	r5, r4, [r6]
 800081c:	2700      	movs	r7, #0
 800081e:	e747      	b.n	80006b0 <__udivmoddi4+0xa0>
 8000820:	f1c2 0320 	rsb	r3, r2, #32
 8000824:	fa20 f703 	lsr.w	r7, r0, r3
 8000828:	4095      	lsls	r5, r2
 800082a:	fa01 f002 	lsl.w	r0, r1, r2
 800082e:	fa21 f303 	lsr.w	r3, r1, r3
 8000832:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000836:	4338      	orrs	r0, r7
 8000838:	0c01      	lsrs	r1, r0, #16
 800083a:	fbb3 f7fe 	udiv	r7, r3, lr
 800083e:	fa1f f885 	uxth.w	r8, r5
 8000842:	fb0e 3317 	mls	r3, lr, r7, r3
 8000846:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800084a:	fb07 f308 	mul.w	r3, r7, r8
 800084e:	428b      	cmp	r3, r1
 8000850:	fa04 f402 	lsl.w	r4, r4, r2
 8000854:	d907      	bls.n	8000866 <__udivmoddi4+0x256>
 8000856:	1869      	adds	r1, r5, r1
 8000858:	f107 3cff 	add.w	ip, r7, #4294967295
 800085c:	d22f      	bcs.n	80008be <__udivmoddi4+0x2ae>
 800085e:	428b      	cmp	r3, r1
 8000860:	d92d      	bls.n	80008be <__udivmoddi4+0x2ae>
 8000862:	3f02      	subs	r7, #2
 8000864:	4429      	add	r1, r5
 8000866:	1acb      	subs	r3, r1, r3
 8000868:	b281      	uxth	r1, r0
 800086a:	fbb3 f0fe 	udiv	r0, r3, lr
 800086e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000872:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000876:	fb00 f308 	mul.w	r3, r0, r8
 800087a:	428b      	cmp	r3, r1
 800087c:	d907      	bls.n	800088e <__udivmoddi4+0x27e>
 800087e:	1869      	adds	r1, r5, r1
 8000880:	f100 3cff 	add.w	ip, r0, #4294967295
 8000884:	d217      	bcs.n	80008b6 <__udivmoddi4+0x2a6>
 8000886:	428b      	cmp	r3, r1
 8000888:	d915      	bls.n	80008b6 <__udivmoddi4+0x2a6>
 800088a:	3802      	subs	r0, #2
 800088c:	4429      	add	r1, r5
 800088e:	1ac9      	subs	r1, r1, r3
 8000890:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000894:	e73b      	b.n	800070e <__udivmoddi4+0xfe>
 8000896:	4637      	mov	r7, r6
 8000898:	4630      	mov	r0, r6
 800089a:	e709      	b.n	80006b0 <__udivmoddi4+0xa0>
 800089c:	4607      	mov	r7, r0
 800089e:	e6e7      	b.n	8000670 <__udivmoddi4+0x60>
 80008a0:	4618      	mov	r0, r3
 80008a2:	e6fb      	b.n	800069c <__udivmoddi4+0x8c>
 80008a4:	4541      	cmp	r1, r8
 80008a6:	d2ab      	bcs.n	8000800 <__udivmoddi4+0x1f0>
 80008a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80008ac:	eb69 020e 	sbc.w	r2, r9, lr
 80008b0:	3801      	subs	r0, #1
 80008b2:	4613      	mov	r3, r2
 80008b4:	e7a4      	b.n	8000800 <__udivmoddi4+0x1f0>
 80008b6:	4660      	mov	r0, ip
 80008b8:	e7e9      	b.n	800088e <__udivmoddi4+0x27e>
 80008ba:	4618      	mov	r0, r3
 80008bc:	e795      	b.n	80007ea <__udivmoddi4+0x1da>
 80008be:	4667      	mov	r7, ip
 80008c0:	e7d1      	b.n	8000866 <__udivmoddi4+0x256>
 80008c2:	4681      	mov	r9, r0
 80008c4:	e77c      	b.n	80007c0 <__udivmoddi4+0x1b0>
 80008c6:	3802      	subs	r0, #2
 80008c8:	442c      	add	r4, r5
 80008ca:	e747      	b.n	800075c <__udivmoddi4+0x14c>
 80008cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80008d0:	442b      	add	r3, r5
 80008d2:	e72f      	b.n	8000734 <__udivmoddi4+0x124>
 80008d4:	4638      	mov	r0, r7
 80008d6:	e708      	b.n	80006ea <__udivmoddi4+0xda>
 80008d8:	4637      	mov	r7, r6
 80008da:	e6e9      	b.n	80006b0 <__udivmoddi4+0xa0>

080008dc <__aeabi_idiv0>:
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop

080008e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e0:	b510      	push	{r4, lr}
 80008e2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_InitTick+0x40>)
 80008e6:	7818      	ldrb	r0, [r3, #0]
 80008e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ec:	fbb3 f3f0 	udiv	r3, r3, r0
 80008f0:	4a0c      	ldr	r2, [pc, #48]	; (8000924 <HAL_InitTick+0x44>)
 80008f2:	6810      	ldr	r0, [r2, #0]
 80008f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80008f8:	f000 f896 	bl	8000a28 <HAL_SYSTICK_Config>
 80008fc:	b968      	cbnz	r0, 800091a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	2c0f      	cmp	r4, #15
 8000900:	d901      	bls.n	8000906 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000902:	2001      	movs	r0, #1
 8000904:	e00a      	b.n	800091c <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000906:	2200      	movs	r2, #0
 8000908:	4621      	mov	r1, r4
 800090a:	f04f 30ff 	mov.w	r0, #4294967295
 800090e:	f000 f849 	bl	80009a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000912:	4b03      	ldr	r3, [pc, #12]	; (8000920 <HAL_InitTick+0x40>)
 8000914:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8000916:	2000      	movs	r0, #0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x3c>
    return HAL_ERROR;
 800091a:	2001      	movs	r0, #1
}
 800091c:	bd10      	pop	{r4, pc}
 800091e:	bf00      	nop
 8000920:	20000000 	.word	0x20000000
 8000924:	20000008 	.word	0x20000008

08000928 <HAL_Init>:
{
 8000928:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_Init+0x30>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000932:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000934:	681a      	ldr	r2, [r3, #0]
 8000936:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800093a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000942:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f81b 	bl	8000980 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	2000      	movs	r0, #0
 800094c:	f7ff ffc8 	bl	80008e0 <HAL_InitTick>
  HAL_MspInit();
 8000950:	f001 fe1e 	bl	8002590 <HAL_MspInit>
}
 8000954:	2000      	movs	r0, #0
 8000956:	bd08      	pop	{r3, pc}
 8000958:	40023c00 	.word	0x40023c00

0800095c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800095c:	4a03      	ldr	r2, [pc, #12]	; (800096c <HAL_IncTick+0x10>)
 800095e:	6811      	ldr	r1, [r2, #0]
 8000960:	4b03      	ldr	r3, [pc, #12]	; (8000970 <HAL_IncTick+0x14>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	440b      	add	r3, r1
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	20000498 	.word	0x20000498
 8000970:	20000000 	.word	0x20000000

08000974 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000974:	4b01      	ldr	r3, [pc, #4]	; (800097c <HAL_GetTick+0x8>)
 8000976:	6818      	ldr	r0, [r3, #0]
}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	20000498 	.word	0x20000498

08000980 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000980:	4a07      	ldr	r2, [pc, #28]	; (80009a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000982:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000984:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000988:	041b      	lsls	r3, r3, #16
 800098a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800098c:	0200      	lsls	r0, r0, #8
 800098e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000992:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000994:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000998:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800099c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a4:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009a6:	4b17      	ldr	r3, [pc, #92]	; (8000a04 <HAL_NVIC_SetPriority+0x60>)
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009ae:	f1c3 0407 	rsb	r4, r3, #7
 80009b2:	2c04      	cmp	r4, #4
 80009b4:	bf28      	it	cs
 80009b6:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b8:	1d1d      	adds	r5, r3, #4
 80009ba:	2d06      	cmp	r5, #6
 80009bc:	d918      	bls.n	80009f0 <HAL_NVIC_SetPriority+0x4c>
 80009be:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 35ff 	mov.w	r5, #4294967295
 80009c4:	fa05 f404 	lsl.w	r4, r5, r4
 80009c8:	ea21 0104 	bic.w	r1, r1, r4
 80009cc:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009ce:	fa05 f303 	lsl.w	r3, r5, r3
 80009d2:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d6:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80009d8:	2800      	cmp	r0, #0
 80009da:	db0b      	blt.n	80009f4 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009dc:	0109      	lsls	r1, r1, #4
 80009de:	b2c9      	uxtb	r1, r1
 80009e0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80009e4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80009e8:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80009ec:	bc30      	pop	{r4, r5}
 80009ee:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009f0:	2300      	movs	r3, #0
 80009f2:	e7e5      	b.n	80009c0 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f4:	f000 000f 	and.w	r0, r0, #15
 80009f8:	0109      	lsls	r1, r1, #4
 80009fa:	b2c9      	uxtb	r1, r1
 80009fc:	4b02      	ldr	r3, [pc, #8]	; (8000a08 <HAL_NVIC_SetPriority+0x64>)
 80009fe:	5419      	strb	r1, [r3, r0]
 8000a00:	e7f4      	b.n	80009ec <HAL_NVIC_SetPriority+0x48>
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00
 8000a08:	e000ed14 	.word	0xe000ed14

08000a0c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	db07      	blt.n	8000a20 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a10:	f000 021f 	and.w	r2, r0, #31
 8000a14:	0940      	lsrs	r0, r0, #5
 8000a16:	2301      	movs	r3, #1
 8000a18:	4093      	lsls	r3, r2
 8000a1a:	4a02      	ldr	r2, [pc, #8]	; (8000a24 <HAL_NVIC_EnableIRQ+0x18>)
 8000a1c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000e100 	.word	0xe000e100

08000a28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a28:	3801      	subs	r0, #1
 8000a2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2e:	d20a      	bcs.n	8000a46 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_SYSTICK_Config+0x24>)
 8000a32:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <HAL_SYSTICK_Config+0x28>)
 8000a36:	21f0      	movs	r1, #240	; 0xf0
 8000a38:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a40:	2207      	movs	r2, #7
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a46:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e010 	.word	0xe000e010
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000a54:	b158      	cbz	r0, 8000a6e <HAL_CRC_Init+0x1a>
{
 8000a56:	b510      	push	{r4, lr}
 8000a58:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000a5a:	7943      	ldrb	r3, [r0, #5]
 8000a5c:	b11b      	cbz	r3, 8000a66 <HAL_CRC_Init+0x12>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8000a62:	2000      	movs	r0, #0
}
 8000a64:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8000a66:	7103      	strb	r3, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8000a68:	f001 fdae 	bl	80025c8 <HAL_CRC_MspInit>
 8000a6c:	e7f7      	b.n	8000a5e <HAL_CRC_Init+0xa>
    return HAL_ERROR;
 8000a6e:	2001      	movs	r0, #1
}
 8000a70:	4770      	bx	lr

08000a72 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a72:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000a74:	6805      	ldr	r5, [r0, #0]
 8000a76:	682c      	ldr	r4, [r5, #0]
 8000a78:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8000a7c:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8000a7e:	6804      	ldr	r4, [r0, #0]
 8000a80:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a82:	6883      	ldr	r3, [r0, #8]
 8000a84:	2b40      	cmp	r3, #64	; 0x40
 8000a86:	d005      	beq.n	8000a94 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8000a88:	6803      	ldr	r3, [r0, #0]
 8000a8a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8000a8c:	6803      	ldr	r3, [r0, #0]
 8000a8e:	60da      	str	r2, [r3, #12]
  }
}
 8000a90:	bc30      	pop	{r4, r5}
 8000a92:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8000a94:	6803      	ldr	r3, [r0, #0]
 8000a96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8000a98:	6803      	ldr	r3, [r0, #0]
 8000a9a:	60d9      	str	r1, [r3, #12]
 8000a9c:	e7f8      	b.n	8000a90 <DMA_SetConfig+0x1e>
	...

08000aa0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000aa0:	6802      	ldr	r2, [r0, #0]
 8000aa2:	b2d3      	uxtb	r3, r2
 8000aa4:	3b10      	subs	r3, #16
 8000aa6:	490b      	ldr	r1, [pc, #44]	; (8000ad4 <DMA_CalcBaseAndBitshift+0x34>)
 8000aa8:	fba1 1303 	umull	r1, r3, r1, r3
 8000aac:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000aae:	490a      	ldr	r1, [pc, #40]	; (8000ad8 <DMA_CalcBaseAndBitshift+0x38>)
 8000ab0:	5cc9      	ldrb	r1, [r1, r3]
 8000ab2:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d806      	bhi.n	8000ac6 <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8000ab8:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8000abc:	f022 0203 	bic.w	r2, r2, #3
 8000ac0:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8000ac2:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000ac4:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8000ac6:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8000aca:	f022 0203 	bic.w	r2, r2, #3
 8000ace:	3204      	adds	r2, #4
 8000ad0:	6582      	str	r2, [r0, #88]	; 0x58
 8000ad2:	e7f6      	b.n	8000ac2 <DMA_CalcBaseAndBitshift+0x22>
 8000ad4:	aaaaaaab 	.word	0xaaaaaaab
 8000ad8:	0800515c 	.word	0x0800515c

08000adc <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8000adc:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000ade:	6982      	ldr	r2, [r0, #24]
 8000ae0:	b992      	cbnz	r2, 8000b08 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d00a      	beq.n	8000afc <DMA_CheckFifoParam+0x20>
 8000ae6:	b11b      	cbz	r3, 8000af0 <DMA_CheckFifoParam+0x14>
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d001      	beq.n	8000af0 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8000aec:	2000      	movs	r0, #0
 8000aee:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000af0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000af2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000af6:	d12c      	bne.n	8000b52 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 8000af8:	2000      	movs	r0, #0
 8000afa:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000afc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000afe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000b02:	d028      	beq.n	8000b56 <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8000b04:	2000      	movs	r0, #0
 8000b06:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000b08:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000b0c:	d005      	beq.n	8000b1a <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000b0e:	2b02      	cmp	r3, #2
 8000b10:	d929      	bls.n	8000b66 <DMA_CheckFifoParam+0x8a>
 8000b12:	2b03      	cmp	r3, #3
 8000b14:	d015      	beq.n	8000b42 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8000b16:	2000      	movs	r0, #0
 8000b18:	4770      	bx	lr
    switch (tmp)
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d803      	bhi.n	8000b26 <DMA_CheckFifoParam+0x4a>
 8000b1e:	e8df f003 	tbb	[pc, r3]
 8000b22:	041c      	.short	0x041c
 8000b24:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 8000b26:	2000      	movs	r0, #0
 8000b28:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000b30:	d115      	bne.n	8000b5e <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 8000b32:	2000      	movs	r0, #0
 8000b34:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000b36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8000b3c:	d011      	beq.n	8000b62 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 8000b3e:	2000      	movs	r0, #0
 8000b40:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000b42:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000b44:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8000b48:	d001      	beq.n	8000b4e <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 8000b4a:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8000b4c:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8000b4e:	2000      	movs	r0, #0
 8000b50:	4770      	bx	lr
        status = HAL_ERROR;
 8000b52:	2001      	movs	r0, #1
 8000b54:	4770      	bx	lr
        status = HAL_ERROR;
 8000b56:	2001      	movs	r0, #1
 8000b58:	4770      	bx	lr
      status = HAL_ERROR;
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4770      	bx	lr
        status = HAL_ERROR;
 8000b5e:	2001      	movs	r0, #1
 8000b60:	4770      	bx	lr
        status = HAL_ERROR;
 8000b62:	2001      	movs	r0, #1
 8000b64:	4770      	bx	lr
      status = HAL_ERROR;
 8000b66:	2001      	movs	r0, #1
 8000b68:	4770      	bx	lr
	...

08000b6c <HAL_DMA_Init>:
{
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff ff00 	bl	8000974 <HAL_GetTick>
  if(hdma == NULL)
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d05b      	beq.n	8000c30 <HAL_DMA_Init+0xc4>
 8000b78:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b80:	2302      	movs	r3, #2
 8000b82:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000b86:	6822      	ldr	r2, [r4, #0]
 8000b88:	6813      	ldr	r3, [r2, #0]
 8000b8a:	f023 0301 	bic.w	r3, r3, #1
 8000b8e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000b90:	6823      	ldr	r3, [r4, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	f012 0f01 	tst.w	r2, #1
 8000b98:	d00a      	beq.n	8000bb0 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000b9a:	f7ff feeb 	bl	8000974 <HAL_GetTick>
 8000b9e:	1b40      	subs	r0, r0, r5
 8000ba0:	2805      	cmp	r0, #5
 8000ba2:	d9f5      	bls.n	8000b90 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ba4:	2320      	movs	r3, #32
 8000ba6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8000bae:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8000bb0:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000bb2:	4820      	ldr	r0, [pc, #128]	; (8000c34 <HAL_DMA_Init+0xc8>)
 8000bb4:	4010      	ands	r0, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000bb6:	6861      	ldr	r1, [r4, #4]
 8000bb8:	68a2      	ldr	r2, [r4, #8]
 8000bba:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bbc:	68e1      	ldr	r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000bbe:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc0:	6921      	ldr	r1, [r4, #16]
 8000bc2:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc4:	6961      	ldr	r1, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000bc6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bc8:	69a1      	ldr	r1, [r4, #24]
 8000bca:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bcc:	69e1      	ldr	r1, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000bce:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000bd0:	6a21      	ldr	r1, [r4, #32]
 8000bd2:	430a      	orrs	r2, r1
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000bd4:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000bd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000bd8:	2904      	cmp	r1, #4
 8000bda:	d01e      	beq.n	8000c1a <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 8000bdc:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8000bde:	6826      	ldr	r6, [r4, #0]
 8000be0:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000be2:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 8000be6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000be8:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d107      	bne.n	8000bfe <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 8000bee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000bf0:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000bf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000bf4:	b11b      	cbz	r3, 8000bfe <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f7ff ff70 	bl	8000adc <DMA_CheckFifoParam>
 8000bfc:	b990      	cbnz	r0, 8000c24 <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 8000bfe:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000c00:	4620      	mov	r0, r4
 8000c02:	f7ff ff4d 	bl	8000aa0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c06:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000c08:	233f      	movs	r3, #63	; 0x3f
 8000c0a:	4093      	lsls	r3, r2
 8000c0c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c0e:	2000      	movs	r0, #0
 8000c10:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000c12:	2301      	movs	r3, #1
 8000c14:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000c18:	e7c9      	b.n	8000bae <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000c1a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000c1c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000c1e:	4301      	orrs	r1, r0
 8000c20:	430a      	orrs	r2, r1
 8000c22:	e7db      	b.n	8000bdc <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000c24:	2340      	movs	r3, #64	; 0x40
 8000c26:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8000c2e:	e7be      	b.n	8000bae <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 8000c30:	2001      	movs	r0, #1
 8000c32:	e7bc      	b.n	8000bae <HAL_DMA_Init+0x42>
 8000c34:	f010803f 	.word	0xf010803f

08000c38 <HAL_DMA_Start_IT>:
{
 8000c38:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c3a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8000c3c:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8000c40:	2c01      	cmp	r4, #1
 8000c42:	d02c      	beq.n	8000c9e <HAL_DMA_Start_IT+0x66>
 8000c44:	2401      	movs	r4, #1
 8000c46:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c4a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8000c4e:	b2e4      	uxtb	r4, r4
 8000c50:	2c01      	cmp	r4, #1
 8000c52:	d004      	beq.n	8000c5e <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 8000c54:	2300      	movs	r3, #0
 8000c56:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8000c5a:	2002      	movs	r0, #2
}
 8000c5c:	bd38      	pop	{r3, r4, r5, pc}
 8000c5e:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c60:	2002      	movs	r0, #2
 8000c62:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c66:	2000      	movs	r0, #0
 8000c68:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f7ff ff01 	bl	8000a72 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000c70:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000c72:	233f      	movs	r3, #63	; 0x3f
 8000c74:	4093      	lsls	r3, r2
 8000c76:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000c78:	6822      	ldr	r2, [r4, #0]
 8000c7a:	6813      	ldr	r3, [r2, #0]
 8000c7c:	f043 0316 	orr.w	r3, r3, #22
 8000c80:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8000c82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000c84:	b123      	cbz	r3, 8000c90 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000c86:	6822      	ldr	r2, [r4, #0]
 8000c88:	6813      	ldr	r3, [r2, #0]
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8000c90:	6822      	ldr	r2, [r4, #0]
 8000c92:	6813      	ldr	r3, [r2, #0]
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c9a:	2000      	movs	r0, #0
 8000c9c:	e7de      	b.n	8000c5c <HAL_DMA_Start_IT+0x24>
  __HAL_LOCK(hdma);
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	e7dc      	b.n	8000c5c <HAL_DMA_Start_IT+0x24>
	...

08000ca4 <HAL_DMA_IRQHandler>:
{
 8000ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000cae:	4b72      	ldr	r3, [pc, #456]	; (8000e78 <HAL_DMA_IRQHandler+0x1d4>)
 8000cb0:	681d      	ldr	r5, [r3, #0]
 8000cb2:	4b72      	ldr	r3, [pc, #456]	; (8000e7c <HAL_DMA_IRQHandler+0x1d8>)
 8000cb4:	fba3 3505 	umull	r3, r5, r3, r5
 8000cb8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cba:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8000cbc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cbe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	4093      	lsls	r3, r2
 8000cc4:	4233      	tst	r3, r6
 8000cc6:	d010      	beq.n	8000cea <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000cc8:	6803      	ldr	r3, [r0, #0]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	f012 0f04 	tst.w	r2, #4
 8000cd0:	d00b      	beq.n	8000cea <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	f022 0204 	bic.w	r2, r2, #4
 8000cd8:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000cda:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8000cdc:	2308      	movs	r3, #8
 8000cde:	4093      	lsls	r3, r2
 8000ce0:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000ce2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000cea:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000cec:	2301      	movs	r3, #1
 8000cee:	4093      	lsls	r3, r2
 8000cf0:	4233      	tst	r3, r6
 8000cf2:	d009      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000cf4:	6822      	ldr	r2, [r4, #0]
 8000cf6:	6952      	ldr	r2, [r2, #20]
 8000cf8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000cfc:	d004      	beq.n	8000d08 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000cfe:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000d00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000d08:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000d0a:	2304      	movs	r3, #4
 8000d0c:	4093      	lsls	r3, r2
 8000d0e:	4233      	tst	r3, r6
 8000d10:	d009      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000d12:	6822      	ldr	r2, [r4, #0]
 8000d14:	6812      	ldr	r2, [r2, #0]
 8000d16:	f012 0f02 	tst.w	r2, #2
 8000d1a:	d004      	beq.n	8000d26 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000d1c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000d1e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000d20:	f043 0304 	orr.w	r3, r3, #4
 8000d24:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000d26:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000d28:	2310      	movs	r3, #16
 8000d2a:	4093      	lsls	r3, r2
 8000d2c:	4233      	tst	r3, r6
 8000d2e:	d024      	beq.n	8000d7a <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000d30:	6822      	ldr	r2, [r4, #0]
 8000d32:	6812      	ldr	r2, [r2, #0]
 8000d34:	f012 0f08 	tst.w	r2, #8
 8000d38:	d01f      	beq.n	8000d7a <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000d3a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000d44:	d00d      	beq.n	8000d62 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000d4c:	d104      	bne.n	8000d58 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 8000d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d50:	b19b      	cbz	r3, 8000d7a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8000d52:	4620      	mov	r0, r4
 8000d54:	4798      	blx	r3
 8000d56:	e010      	b.n	8000d7a <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8000d58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000d5a:	b173      	cbz	r3, 8000d7a <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	4798      	blx	r3
 8000d60:	e00b      	b.n	8000d7a <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000d68:	d103      	bne.n	8000d72 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	f022 0208 	bic.w	r2, r2, #8
 8000d70:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8000d72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d74:	b10b      	cbz	r3, 8000d7a <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 8000d76:	4620      	mov	r0, r4
 8000d78:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000d7a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000d7c:	2320      	movs	r3, #32
 8000d7e:	4093      	lsls	r3, r2
 8000d80:	4233      	tst	r3, r6
 8000d82:	d055      	beq.n	8000e30 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8000d84:	6822      	ldr	r2, [r4, #0]
 8000d86:	6812      	ldr	r2, [r2, #0]
 8000d88:	f012 0f10 	tst.w	r2, #16
 8000d8c:	d050      	beq.n	8000e30 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000d8e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000d90:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	d00e      	beq.n	8000db8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8000da2:	d033      	beq.n	8000e0c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 8000daa:	d12a      	bne.n	8000e02 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 8000dac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d03e      	beq.n	8000e30 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8000db2:	4620      	mov	r0, r4
 8000db4:	4798      	blx	r3
 8000db6:	e03b      	b.n	8000e30 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000db8:	6822      	ldr	r2, [r4, #0]
 8000dba:	6813      	ldr	r3, [r2, #0]
 8000dbc:	f023 0316 	bic.w	r3, r3, #22
 8000dc0:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000dc2:	6822      	ldr	r2, [r4, #0]
 8000dc4:	6953      	ldr	r3, [r2, #20]
 8000dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dca:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000dce:	b1a3      	cbz	r3, 8000dfa <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000dd0:	6822      	ldr	r2, [r4, #0]
 8000dd2:	6813      	ldr	r3, [r2, #0]
 8000dd4:	f023 0308 	bic.w	r3, r3, #8
 8000dd8:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000dda:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000ddc:	233f      	movs	r3, #63	; 0x3f
 8000dde:	4093      	lsls	r3, r2
 8000de0:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8000de2:	2300      	movs	r3, #0
 8000de4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000dee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d03f      	beq.n	8000e74 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8000df4:	4620      	mov	r0, r4
 8000df6:	4798      	blx	r3
 8000df8:	e03c      	b.n	8000e74 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000dfa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d1e7      	bne.n	8000dd0 <HAL_DMA_IRQHandler+0x12c>
 8000e00:	e7eb      	b.n	8000dda <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8000e02:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e04:	b1a3      	cbz	r3, 8000e30 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8000e06:	4620      	mov	r0, r4
 8000e08:	4798      	blx	r3
 8000e0a:	e011      	b.n	8000e30 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8000e12:	d109      	bne.n	8000e28 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	f022 0210 	bic.w	r2, r2, #16
 8000e1a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000e22:	2301      	movs	r3, #1
 8000e24:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8000e28:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000e2a:	b10b      	cbz	r3, 8000e30 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 8000e2c:	4620      	mov	r0, r4
 8000e2e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000e30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e32:	b1fb      	cbz	r3, 8000e74 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000e34:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e36:	f013 0f01 	tst.w	r3, #1
 8000e3a:	d017      	beq.n	8000e6c <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000e42:	6822      	ldr	r2, [r4, #0]
 8000e44:	6813      	ldr	r3, [r2, #0]
 8000e46:	f023 0301 	bic.w	r3, r3, #1
 8000e4a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8000e4c:	9b01      	ldr	r3, [sp, #4]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	42ab      	cmp	r3, r5
 8000e54:	d804      	bhi.n	8000e60 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000e56:	6823      	ldr	r3, [r4, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f013 0f01 	tst.w	r3, #1
 8000e5e:	d1f5      	bne.n	8000e4c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 8000e60:	2300      	movs	r3, #0
 8000e62:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8000e66:	2301      	movs	r3, #1
 8000e68:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8000e6c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000e6e:	b10b      	cbz	r3, 8000e74 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 8000e70:	4620      	mov	r0, r4
 8000e72:	4798      	blx	r3
}
 8000e74:	b003      	add	sp, #12
 8000e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e78:	20000008 	.word	0x20000008
 8000e7c:	1b4e81b5 	.word	0x1b4e81b5

08000e80 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	f200 80d7 	bhi.w	8001036 <HAL_GPIO_Init+0x1b6>
{
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	e039      	b.n	8000f02 <HAL_GPIO_Init+0x82>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e8e:	2207      	movs	r2, #7
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_Init+0x14>
 8000e92:	2200      	movs	r2, #0
 8000e94:	40aa      	lsls	r2, r5
 8000e96:	433a      	orrs	r2, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e98:	3402      	adds	r4, #2
 8000e9a:	4d67      	ldr	r5, [pc, #412]	; (8001038 <HAL_GPIO_Init+0x1b8>)
 8000e9c:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ea0:	4a66      	ldr	r2, [pc, #408]	; (800103c <HAL_GPIO_Init+0x1bc>)
 8000ea2:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	43f2      	mvns	r2, r6
 8000ea6:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eaa:	684f      	ldr	r7, [r1, #4]
 8000eac:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000eb0:	d001      	beq.n	8000eb6 <HAL_GPIO_Init+0x36>
        {
          temp |= iocurrent;
 8000eb2:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->IMR = temp;
 8000eb6:	4c61      	ldr	r4, [pc, #388]	; (800103c <HAL_GPIO_Init+0x1bc>)
 8000eb8:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8000eba:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000ebc:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ec0:	684f      	ldr	r7, [r1, #4]
 8000ec2:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000ec6:	d001      	beq.n	8000ecc <HAL_GPIO_Init+0x4c>
        {
          temp |= iocurrent;
 8000ec8:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->EMR = temp;
 8000ecc:	4c5b      	ldr	r4, [pc, #364]	; (800103c <HAL_GPIO_Init+0x1bc>)
 8000ece:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ed0:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8000ed2:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ed6:	684f      	ldr	r7, [r1, #4]
 8000ed8:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000edc:	d001      	beq.n	8000ee2 <HAL_GPIO_Init+0x62>
        {
          temp |= iocurrent;
 8000ede:	ea46 0504 	orr.w	r5, r6, r4
        }
        EXTI->RTSR = temp;
 8000ee2:	4c56      	ldr	r4, [pc, #344]	; (800103c <HAL_GPIO_Init+0x1bc>)
 8000ee4:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000ee6:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000ee8:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000eea:	684d      	ldr	r5, [r1, #4]
 8000eec:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8000ef0:	d001      	beq.n	8000ef6 <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000ef2:	ea46 0204 	orr.w	r2, r6, r4
        }
        EXTI->FTSR = temp;
 8000ef6:	4c51      	ldr	r4, [pc, #324]	; (800103c <HAL_GPIO_Init+0x1bc>)
 8000ef8:	60e2      	str	r2, [r4, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000efa:	3301      	adds	r3, #1
 8000efc:	2b0f      	cmp	r3, #15
 8000efe:	f200 8098 	bhi.w	8001032 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8000f02:	2201      	movs	r2, #1
 8000f04:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f06:	680c      	ldr	r4, [r1, #0]
 8000f08:	ea04 0602 	and.w	r6, r4, r2
    if(iocurrent == ioposition)
 8000f0c:	42b2      	cmp	r2, r6
 8000f0e:	d1f4      	bne.n	8000efa <HAL_GPIO_Init+0x7a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f10:	684c      	ldr	r4, [r1, #4]
 8000f12:	1e65      	subs	r5, r4, #1
 8000f14:	2d01      	cmp	r5, #1
 8000f16:	d903      	bls.n	8000f20 <HAL_GPIO_Init+0xa0>
 8000f18:	2c11      	cmp	r4, #17
 8000f1a:	d001      	beq.n	8000f20 <HAL_GPIO_Init+0xa0>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1c:	2c12      	cmp	r4, #18
 8000f1e:	d112      	bne.n	8000f46 <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR; 
 8000f20:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f22:	005f      	lsls	r7, r3, #1
 8000f24:	2403      	movs	r4, #3
 8000f26:	40bc      	lsls	r4, r7
 8000f28:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f2c:	68cc      	ldr	r4, [r1, #12]
 8000f2e:	40bc      	lsls	r4, r7
 8000f30:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8000f32:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8000f34:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f36:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f3a:	684c      	ldr	r4, [r1, #4]
 8000f3c:	f3c4 1200 	ubfx	r2, r4, #4, #1
 8000f40:	409a      	lsls	r2, r3
 8000f42:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000f44:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f46:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f48:	005f      	lsls	r7, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	40ba      	lsls	r2, r7
 8000f4e:	43d2      	mvns	r2, r2
 8000f50:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f52:	688d      	ldr	r5, [r1, #8]
 8000f54:	40bd      	lsls	r5, r7
 8000f56:	4325      	orrs	r5, r4
      GPIOx->PUPDR = temp;
 8000f58:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f5a:	684c      	ldr	r4, [r1, #4]
 8000f5c:	2c02      	cmp	r4, #2
 8000f5e:	d001      	beq.n	8000f64 <HAL_GPIO_Init+0xe4>
 8000f60:	2c12      	cmp	r4, #18
 8000f62:	d113      	bne.n	8000f8c <HAL_GPIO_Init+0x10c>
        temp = GPIOx->AFR[position >> 3U];
 8000f64:	08dd      	lsrs	r5, r3, #3
 8000f66:	3508      	adds	r5, #8
 8000f68:	f850 e025 	ldr.w	lr, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f6c:	f003 0407 	and.w	r4, r3, #7
 8000f70:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8000f74:	240f      	movs	r4, #15
 8000f76:	fa04 f40c 	lsl.w	r4, r4, ip
 8000f7a:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f7e:	690c      	ldr	r4, [r1, #16]
 8000f80:	fa04 f40c 	lsl.w	r4, r4, ip
 8000f84:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000f88:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8000f8c:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8e:	4022      	ands	r2, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f90:	684c      	ldr	r4, [r1, #4]
 8000f92:	f004 0403 	and.w	r4, r4, #3
 8000f96:	40bc      	lsls	r4, r7
 8000f98:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000f9a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f9c:	684a      	ldr	r2, [r1, #4]
 8000f9e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000fa2:	d0aa      	beq.n	8000efa <HAL_GPIO_Init+0x7a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	9201      	str	r2, [sp, #4]
 8000fa8:	4a25      	ldr	r2, [pc, #148]	; (8001040 <HAL_GPIO_Init+0x1c0>)
 8000faa:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000fac:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000fb0:	6454      	str	r4, [r2, #68]	; 0x44
 8000fb2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000fb4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000fb8:	9201      	str	r2, [sp, #4]
 8000fba:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000fbc:	089c      	lsrs	r4, r3, #2
 8000fbe:	1ca5      	adds	r5, r4, #2
 8000fc0:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <HAL_GPIO_Init+0x1b8>)
 8000fc2:	f852 7025 	ldr.w	r7, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc6:	f003 0203 	and.w	r2, r3, #3
 8000fca:	0095      	lsls	r5, r2, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	40aa      	lsls	r2, r5
 8000fd0:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	; (8001044 <HAL_GPIO_Init+0x1c4>)
 8000fd6:	4290      	cmp	r0, r2
 8000fd8:	f43f af5b 	beq.w	8000e92 <HAL_GPIO_Init+0x12>
 8000fdc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fe0:	4290      	cmp	r0, r2
 8000fe2:	d01a      	beq.n	800101a <HAL_GPIO_Init+0x19a>
 8000fe4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fe8:	4290      	cmp	r0, r2
 8000fea:	d018      	beq.n	800101e <HAL_GPIO_Init+0x19e>
 8000fec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ff0:	4290      	cmp	r0, r2
 8000ff2:	d016      	beq.n	8001022 <HAL_GPIO_Init+0x1a2>
 8000ff4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ff8:	4290      	cmp	r0, r2
 8000ffa:	d014      	beq.n	8001026 <HAL_GPIO_Init+0x1a6>
 8000ffc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001000:	4290      	cmp	r0, r2
 8001002:	d012      	beq.n	800102a <HAL_GPIO_Init+0x1aa>
 8001004:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001008:	4290      	cmp	r0, r2
 800100a:	d010      	beq.n	800102e <HAL_GPIO_Init+0x1ae>
 800100c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001010:	4290      	cmp	r0, r2
 8001012:	f43f af3c 	beq.w	8000e8e <HAL_GPIO_Init+0xe>
 8001016:	2208      	movs	r2, #8
 8001018:	e73c      	b.n	8000e94 <HAL_GPIO_Init+0x14>
 800101a:	2201      	movs	r2, #1
 800101c:	e73a      	b.n	8000e94 <HAL_GPIO_Init+0x14>
 800101e:	2202      	movs	r2, #2
 8001020:	e738      	b.n	8000e94 <HAL_GPIO_Init+0x14>
 8001022:	2203      	movs	r2, #3
 8001024:	e736      	b.n	8000e94 <HAL_GPIO_Init+0x14>
 8001026:	2204      	movs	r2, #4
 8001028:	e734      	b.n	8000e94 <HAL_GPIO_Init+0x14>
 800102a:	2205      	movs	r2, #5
 800102c:	e732      	b.n	8000e94 <HAL_GPIO_Init+0x14>
 800102e:	2206      	movs	r2, #6
 8001030:	e730      	b.n	8000e94 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 8001032:	b003      	add	sp, #12
 8001034:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001036:	4770      	bx	lr
 8001038:	40013800 	.word	0x40013800
 800103c:	40013c00 	.word	0x40013c00
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000

08001048 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	b912      	cbnz	r2, 8001050 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800104a:	0409      	lsls	r1, r1, #16
 800104c:	6181      	str	r1, [r0, #24]
  }
}
 800104e:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001050:	6181      	str	r1, [r0, #24]
 8001052:	4770      	bx	lr

08001054 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001054:	2800      	cmp	r0, #0
 8001056:	f000 80bf 	beq.w	80011d8 <HAL_I2S_Init+0x184>
{
 800105a:	b570      	push	{r4, r5, r6, lr}
 800105c:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800105e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001062:	2b00      	cmp	r3, #0
 8001064:	d051      	beq.n	800110a <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001066:	2202      	movs	r2, #2
 8001068:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800106c:	6821      	ldr	r1, [r4, #0]
 800106e:	69cb      	ldr	r3, [r1, #28]
 8001070:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001074:	f023 030f 	bic.w	r3, r3, #15
 8001078:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800107e:	6963      	ldr	r3, [r4, #20]
 8001080:	4293      	cmp	r3, r2
 8001082:	d063      	beq.n	800114c <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001084:	68e3      	ldr	r3, [r4, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d146      	bne.n	8001118 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800108a:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800108c:	68a3      	ldr	r3, [r4, #8]
 800108e:	2b20      	cmp	r3, #32
 8001090:	d800      	bhi.n	8001094 <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001092:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001094:	2001      	movs	r0, #1
 8001096:	f000 ffbd 	bl	8002014 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800109a:	6923      	ldr	r3, [r4, #16]
 800109c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010a0:	d03c      	beq.n	800111c <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80010a2:	fbb0 f0f5 	udiv	r0, r0, r5
 80010a6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80010aa:	0043      	lsls	r3, r0, #1
 80010ac:	6962      	ldr	r2, [r4, #20]
 80010ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80010b2:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80010b4:	4a49      	ldr	r2, [pc, #292]	; (80011dc <HAL_I2S_Init+0x188>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	08db      	lsrs	r3, r3, #3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80010bc:	f003 0201 	and.w	r2, r3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80010c0:	1a9b      	subs	r3, r3, r2
 80010c2:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80010c4:	0212      	lsls	r2, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80010c6:	1e99      	subs	r1, r3, #2
 80010c8:	29fd      	cmp	r1, #253	; 0xfd
 80010ca:	d841      	bhi.n	8001150 <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80010cc:	6921      	ldr	r1, [r4, #16]
 80010ce:	430a      	orrs	r2, r1
 80010d0:	6821      	ldr	r1, [r4, #0]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	620b      	str	r3, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80010d6:	6821      	ldr	r1, [r4, #0]
 80010d8:	69cb      	ldr	r3, [r1, #28]
 80010da:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80010de:	f023 030f 	bic.w	r3, r3, #15
 80010e2:	6862      	ldr	r2, [r4, #4]
 80010e4:	68a0      	ldr	r0, [r4, #8]
 80010e6:	4302      	orrs	r2, r0
 80010e8:	68e0      	ldr	r0, [r4, #12]
 80010ea:	4302      	orrs	r2, r0
 80010ec:	69a0      	ldr	r0, [r4, #24]
 80010ee:	4302      	orrs	r2, r0
 80010f0:	4313      	orrs	r3, r2
 80010f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010f6:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80010f8:	6a23      	ldr	r3, [r4, #32]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d02e      	beq.n	800115c <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80010fe:	2000      	movs	r0, #0
 8001100:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001102:	2301      	movs	r3, #1
 8001104:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8001108:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->Lock = HAL_UNLOCKED;
 800110a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800110e:	4b34      	ldr	r3, [pc, #208]	; (80011e0 <HAL_I2S_Init+0x18c>)
 8001110:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8001112:	f001 fa71 	bl	80025f8 <HAL_I2S_MspInit>
 8001116:	e7a6      	b.n	8001066 <HAL_I2S_Init+0x12>
      packetlength = 32U;
 8001118:	2520      	movs	r5, #32
 800111a:	e7b7      	b.n	800108c <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800111c:	68e3      	ldr	r3, [r4, #12]
 800111e:	b153      	cbz	r3, 8001136 <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001120:	00ad      	lsls	r5, r5, #2
 8001122:	fbb0 f0f5 	udiv	r0, r0, r5
 8001126:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800112a:	0043      	lsls	r3, r0, #1
 800112c:	6962      	ldr	r2, [r4, #20]
 800112e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001132:	3305      	adds	r3, #5
 8001134:	e7be      	b.n	80010b4 <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001136:	00ed      	lsls	r5, r5, #3
 8001138:	fbb0 f0f5 	udiv	r0, r0, r5
 800113c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001140:	0043      	lsls	r3, r0, #1
 8001142:	6962      	ldr	r2, [r4, #20]
 8001144:	fbb3 f3f2 	udiv	r3, r3, r2
 8001148:	3305      	adds	r3, #5
 800114a:	e7b3      	b.n	80010b4 <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 800114c:	2200      	movs	r2, #0
 800114e:	e7ba      	b.n	80010c6 <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001150:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001152:	f043 0310 	orr.w	r3, r3, #16
 8001156:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8001158:	2001      	movs	r0, #1
 800115a:	e7d5      	b.n	8001108 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <HAL_I2S_Init+0x190>)
 800115e:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <HAL_I2S_Init+0x194>)
 8001164:	429a      	cmp	r2, r3
 8001166:	d01f      	beq.n	80011a8 <HAL_I2S_Init+0x154>
 8001168:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800116c:	69d3      	ldr	r3, [r2, #28]
 800116e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001172:	f023 030f 	bic.w	r3, r3, #15
 8001176:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001178:	6822      	ldr	r2, [r4, #0]
 800117a:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_I2S_Init+0x194>)
 800117c:	429a      	cmp	r2, r3
 800117e:	d015      	beq.n	80011ac <HAL_I2S_Init+0x158>
 8001180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001184:	2202      	movs	r2, #2
 8001186:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001188:	6822      	ldr	r2, [r4, #0]
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <HAL_I2S_Init+0x194>)
 800118c:	429a      	cmp	r2, r3
 800118e:	d010      	beq.n	80011b2 <HAL_I2S_Init+0x15e>
 8001190:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 8001194:	69ca      	ldr	r2, [r1, #28]
 8001196:	b292      	uxth	r2, r2
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001198:	6863      	ldr	r3, [r4, #4]
 800119a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800119e:	d00a      	beq.n	80011b6 <HAL_I2S_Init+0x162>
 80011a0:	b9c3      	cbnz	r3, 80011d4 <HAL_I2S_Init+0x180>
      tmp = I2S_MODE_SLAVE_RX;
 80011a2:	f44f 7680 	mov.w	r6, #256	; 0x100
 80011a6:	e008      	b.n	80011ba <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80011a8:	4a10      	ldr	r2, [pc, #64]	; (80011ec <HAL_I2S_Init+0x198>)
 80011aa:	e7df      	b.n	800116c <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80011ac:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80011b0:	e7e8      	b.n	8001184 <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80011b2:	490e      	ldr	r1, [pc, #56]	; (80011ec <HAL_I2S_Init+0x198>)
 80011b4:	e7ee      	b.n	8001194 <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 80011b6:	f44f 7680 	mov.w	r6, #256	; 0x100
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80011ba:	68a0      	ldr	r0, [r4, #8]
 80011bc:	68e5      	ldr	r5, [r4, #12]
                                    (uint16_t)hi2s->Init.CPOL))));
 80011be:	8b23      	ldrh	r3, [r4, #24]
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80011c0:	432b      	orrs	r3, r5
 80011c2:	b29b      	uxth	r3, r3
 80011c4:	4303      	orrs	r3, r0
 80011c6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80011c8:	4333      	orrs	r3, r6
 80011ca:	4313      	orrs	r3, r2
 80011cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80011d0:	61cb      	str	r3, [r1, #28]
 80011d2:	e794      	b.n	80010fe <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 80011d4:	2600      	movs	r6, #0
 80011d6:	e7f0      	b.n	80011ba <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 80011d8:	2001      	movs	r0, #1
}
 80011da:	4770      	bx	lr
 80011dc:	cccccccd 	.word	0xcccccccd
 80011e0:	08001493 	.word	0x08001493
 80011e4:	080016c5 	.word	0x080016c5
 80011e8:	40003800 	.word	0x40003800
 80011ec:	40003400 	.word	0x40003400

080011f0 <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80011f0:	2900      	cmp	r1, #0
 80011f2:	d05d      	beq.n	80012b0 <HAL_I2S_Transmit_DMA+0xc0>
{
 80011f4:	b510      	push	{r4, lr}
  if ((pData == NULL) || (Size == 0U))
 80011f6:	2a00      	cmp	r2, #0
 80011f8:	d05d      	beq.n	80012b6 <HAL_I2S_Transmit_DMA+0xc6>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80011fa:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d05b      	beq.n	80012bc <HAL_I2S_Transmit_DMA+0xcc>
 8001204:	2301      	movs	r3, #1
 8001206:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 800120a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b01      	cmp	r3, #1
 8001212:	d110      	bne.n	8001236 <HAL_I2S_Transmit_DMA+0x46>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001214:	2303      	movs	r3, #3
 8001216:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800121a:	2300      	movs	r3, #0
 800121c:	6443      	str	r3, [r0, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 800121e:	6241      	str	r1, [r0, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001220:	6803      	ldr	r3, [r0, #0]
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001228:	2b03      	cmp	r3, #3
 800122a:	d009      	beq.n	8001240 <HAL_I2S_Transmit_DMA+0x50>
 800122c:	2b05      	cmp	r3, #5
 800122e:	d007      	beq.n	8001240 <HAL_I2S_Transmit_DMA+0x50>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001230:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8001232:	8542      	strh	r2, [r0, #42]	; 0x2a
 8001234:	e008      	b.n	8001248 <HAL_I2S_Transmit_DMA+0x58>
    __HAL_UNLOCK(hi2s);
 8001236:	2300      	movs	r3, #0
 8001238:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_BUSY;
 800123c:	2302      	movs	r3, #2
 800123e:	e03b      	b.n	80012b8 <HAL_I2S_Transmit_DMA+0xc8>
    hi2s->TxXferSize = (Size << 1U);
 8001240:	0052      	lsls	r2, r2, #1
 8001242:	b292      	uxth	r2, r2
 8001244:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001246:	8542      	strh	r2, [r0, #42]	; 0x2a
 8001248:	4604      	mov	r4, r0
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800124a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800124c:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <HAL_I2S_Transmit_DMA+0xd0>)
 800124e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8001250:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001252:	4a1c      	ldr	r2, [pc, #112]	; (80012c4 <HAL_I2S_Transmit_DMA+0xd4>)
 8001254:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8001256:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001258:	4a1b      	ldr	r2, [pc, #108]	; (80012c8 <HAL_I2S_Transmit_DMA+0xd8>)
 800125a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
 800125c:	6802      	ldr	r2, [r0, #0]
                                 hi2s->TxXferSize))
 800125e:	8d03      	ldrh	r3, [r0, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001260:	320c      	adds	r2, #12
 8001262:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001264:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001266:	f7ff fce7 	bl	8000c38 <HAL_DMA_Start_IT>
 800126a:	4603      	mov	r3, r0
 800126c:	b9a8      	cbnz	r0, 800129a <HAL_I2S_Transmit_DMA+0xaa>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800126e:	6822      	ldr	r2, [r4, #0]
 8001270:	69d1      	ldr	r1, [r2, #28]
 8001272:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8001276:	d103      	bne.n	8001280 <HAL_I2S_Transmit_DMA+0x90>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001278:	69d1      	ldr	r1, [r2, #28]
 800127a:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800127e:	61d1      	str	r1, [r2, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8001280:	6822      	ldr	r2, [r4, #0]
 8001282:	6851      	ldr	r1, [r2, #4]
 8001284:	f011 0f02 	tst.w	r1, #2
 8001288:	d103      	bne.n	8001292 <HAL_I2S_Transmit_DMA+0xa2>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800128a:	6851      	ldr	r1, [r2, #4]
 800128c:	f041 0102 	orr.w	r1, r1, #2
 8001290:	6051      	str	r1, [r2, #4]
  }

  __HAL_UNLOCK(hi2s);
 8001292:	2200      	movs	r2, #0
 8001294:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  return HAL_OK;
 8001298:	e00e      	b.n	80012b8 <HAL_I2S_Transmit_DMA+0xc8>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800129a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80012a2:	2301      	movs	r3, #1
 80012a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80012a8:	2200      	movs	r2, #0
 80012aa:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_ERROR;
 80012ae:	e003      	b.n	80012b8 <HAL_I2S_Transmit_DMA+0xc8>
    return  HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	4770      	bx	lr
    return  HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hi2s);
 80012bc:	2302      	movs	r3, #2
 80012be:	e7fb      	b.n	80012b8 <HAL_I2S_Transmit_DMA+0xc8>
 80012c0:	080013c9 	.word	0x080013c9
 80012c4:	08001409 	.word	0x08001409
 80012c8:	08001563 	.word	0x08001563

080012cc <HAL_I2S_Receive_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80012cc:	2900      	cmp	r1, #0
 80012ce:	d06c      	beq.n	80013aa <HAL_I2S_Receive_DMA+0xde>
{
 80012d0:	b510      	push	{r4, lr}
 80012d2:	b082      	sub	sp, #8
  if ((pData == NULL) || (Size == 0U))
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d06b      	beq.n	80013b0 <HAL_I2S_Receive_DMA+0xe4>
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80012d8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d06a      	beq.n	80013b8 <HAL_I2S_Receive_DMA+0xec>
 80012e2:	2301      	movs	r3, #1
 80012e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80012e8:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d110      	bne.n	8001314 <HAL_I2S_Receive_DMA+0x48>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80012f2:	2304      	movs	r3, #4
 80012f4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	6443      	str	r3, [r0, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80012fc:	62c1      	str	r1, [r0, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80012fe:	6803      	ldr	r3, [r0, #0]
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001306:	2b03      	cmp	r3, #3
 8001308:	d009      	beq.n	800131e <HAL_I2S_Receive_DMA+0x52>
 800130a:	2b05      	cmp	r3, #5
 800130c:	d007      	beq.n	800131e <HAL_I2S_Receive_DMA+0x52>
    hi2s->RxXferSize = (Size << 1U);
    hi2s->RxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->RxXferSize = Size;
 800130e:	8602      	strh	r2, [r0, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8001310:	8642      	strh	r2, [r0, #50]	; 0x32
 8001312:	e008      	b.n	8001326 <HAL_I2S_Receive_DMA+0x5a>
    __HAL_UNLOCK(hi2s);
 8001314:	2300      	movs	r3, #0
 8001316:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_BUSY;
 800131a:	2302      	movs	r3, #2
 800131c:	e049      	b.n	80013b2 <HAL_I2S_Receive_DMA+0xe6>
    hi2s->RxXferSize = (Size << 1U);
 800131e:	0052      	lsls	r2, r2, #1
 8001320:	b292      	uxth	r2, r2
 8001322:	8602      	strh	r2, [r0, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8001324:	8642      	strh	r2, [r0, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001326:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001328:	4a24      	ldr	r2, [pc, #144]	; (80013bc <HAL_I2S_Receive_DMA+0xf0>)
 800132a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800132c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <HAL_I2S_Receive_DMA+0xf4>)
 8001330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8001332:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001334:	4a23      	ldr	r2, [pc, #140]	; (80013c4 <HAL_I2S_Receive_DMA+0xf8>)
 8001336:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001338:	6801      	ldr	r1, [r0, #0]
 800133a:	69cb      	ldr	r3, [r1, #28]
 800133c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001344:	d01e      	beq.n	8001384 <HAL_I2S_Receive_DMA+0xb8>
 8001346:	4604      	mov	r4, r0
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
                                 hi2s->RxXferSize))
 8001348:	8e03      	ldrh	r3, [r0, #48]	; 0x30
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800134a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800134c:	310c      	adds	r1, #12
 800134e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8001350:	f7ff fc72 	bl	8000c38 <HAL_DMA_Start_IT>
 8001354:	4603      	mov	r3, r0
 8001356:	b9e8      	cbnz	r0, 8001394 <HAL_I2S_Receive_DMA+0xc8>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8001358:	6822      	ldr	r2, [r4, #0]
 800135a:	69d1      	ldr	r1, [r2, #28]
 800135c:	f411 6f80 	tst.w	r1, #1024	; 0x400
 8001360:	d103      	bne.n	800136a <HAL_I2S_Receive_DMA+0x9e>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8001362:	69d1      	ldr	r1, [r2, #28]
 8001364:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8001368:	61d1      	str	r1, [r2, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800136a:	6822      	ldr	r2, [r4, #0]
 800136c:	6851      	ldr	r1, [r2, #4]
 800136e:	f011 0f01 	tst.w	r1, #1
 8001372:	d103      	bne.n	800137c <HAL_I2S_Receive_DMA+0xb0>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001374:	6851      	ldr	r1, [r2, #4]
 8001376:	f041 0101 	orr.w	r1, r1, #1
 800137a:	6051      	str	r1, [r2, #4]
  }

  __HAL_UNLOCK(hi2s);
 800137c:	2200      	movs	r2, #0
 800137e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
  return HAL_OK;
 8001382:	e016      	b.n	80013b2 <HAL_I2S_Receive_DMA+0xe6>
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001384:	2300      	movs	r3, #0
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	68cb      	ldr	r3, [r1, #12]
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	688b      	ldr	r3, [r1, #8]
 800138e:	9301      	str	r3, [sp, #4]
 8001390:	9b01      	ldr	r3, [sp, #4]
 8001392:	e7d8      	b.n	8001346 <HAL_I2S_Receive_DMA+0x7a>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8001394:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800139c:	2301      	movs	r3, #1
 800139e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80013a2:	2200      	movs	r2, #0
 80013a4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    return HAL_ERROR;
 80013a8:	e003      	b.n	80013b2 <HAL_I2S_Receive_DMA+0xe6>
    return  HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	4770      	bx	lr
    return  HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	b002      	add	sp, #8
 80013b6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hi2s);
 80013b8:	2302      	movs	r3, #2
 80013ba:	e7fa      	b.n	80013b2 <HAL_I2S_Receive_DMA+0xe6>
 80013bc:	0800142d 	.word	0x0800142d
 80013c0:	0800146d 	.word	0x0800146d
 80013c4:	08001563 	.word	0x08001563

080013c8 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80013c8:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80013ca:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80013cc:	f000 ffba 	bl	8002344 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80013d0:	bd08      	pop	{r3, pc}

080013d2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80013d2:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80013d4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80013d6:	6803      	ldr	r3, [r0, #0]
 80013d8:	8812      	ldrh	r2, [r2, #0]
 80013da:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80013dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013de:	3302      	adds	r3, #2
 80013e0:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 80013e2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80013e4:	3b01      	subs	r3, #1
 80013e6:	b29b      	uxth	r3, r3
 80013e8:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80013ea:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	b103      	cbz	r3, 80013f2 <I2S_Transmit_IT+0x20>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80013f0:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80013f2:	6802      	ldr	r2, [r0, #0]
 80013f4:	6853      	ldr	r3, [r2, #4]
 80013f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80013fa:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 80013fc:	2301      	movs	r3, #1
 80013fe:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001402:	f000 ffa5 	bl	8002350 <HAL_I2S_TxCpltCallback>
}
 8001406:	e7f3      	b.n	80013f0 <I2S_Transmit_IT+0x1e>

08001408 <I2S_DMATxCplt>:
{
 8001408:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800140a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 800140c:	69c2      	ldr	r2, [r0, #28]
 800140e:	b94a      	cbnz	r2, 8001424 <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8001410:	6819      	ldr	r1, [r3, #0]
 8001412:	684a      	ldr	r2, [r1, #4]
 8001414:	f022 0202 	bic.w	r2, r2, #2
 8001418:	604a      	str	r2, [r1, #4]
    hi2s->TxXferCount = 0U;
 800141a:	2200      	movs	r2, #0
 800141c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800141e:	2201      	movs	r2, #1
 8001420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8001424:	4618      	mov	r0, r3
 8001426:	f000 ff93 	bl	8002350 <HAL_I2S_TxCpltCallback>
}
 800142a:	bd08      	pop	{r3, pc}

0800142c <I2S_DMARxHalfCplt>:
{
 800142c:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800142e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001430:	f000 ff94 	bl	800235c <HAL_I2S_RxHalfCpltCallback>
}
 8001434:	bd08      	pop	{r3, pc}

08001436 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001436:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001438:	6803      	ldr	r3, [r0, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800143e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001440:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001442:	3302      	adds	r3, #2
 8001444:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8001446:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001448:	3b01      	subs	r3, #1
 800144a:	b29b      	uxth	r3, r3
 800144c:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800144e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001450:	b29b      	uxth	r3, r3
 8001452:	b103      	cbz	r3, 8001456 <I2S_Receive_IT+0x20>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001454:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001456:	6802      	ldr	r2, [r0, #0]
 8001458:	6853      	ldr	r3, [r2, #4]
 800145a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800145e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001460:	2301      	movs	r3, #1
 8001462:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001466:	f000 ff7f 	bl	8002368 <HAL_I2S_RxCpltCallback>
}
 800146a:	e7f3      	b.n	8001454 <I2S_Receive_IT+0x1e>

0800146c <I2S_DMARxCplt>:
{
 800146c:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800146e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8001470:	69c2      	ldr	r2, [r0, #28]
 8001472:	b94a      	cbnz	r2, 8001488 <I2S_DMARxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	684a      	ldr	r2, [r1, #4]
 8001478:	f022 0201 	bic.w	r2, r2, #1
 800147c:	604a      	str	r2, [r1, #4]
    hi2s->RxXferCount = 0U;
 800147e:	2200      	movs	r2, #0
 8001480:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8001482:	2201      	movs	r2, #1
 8001484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 8001488:	4618      	mov	r0, r3
 800148a:	f000 ff6d 	bl	8002368 <HAL_I2S_RxCpltCallback>
}
 800148e:	bd08      	pop	{r3, pc}

08001490 <HAL_I2S_ErrorCallback>:
}
 8001490:	4770      	bx	lr

08001492 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001492:	b510      	push	{r4, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001498:	6802      	ldr	r2, [r0, #0]
 800149a:	6893      	ldr	r3, [r2, #8]
 800149c:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800149e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b04      	cmp	r3, #4
 80014a6:	d006      	beq.n	80014b6 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80014a8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	2b03      	cmp	r3, #3
 80014b0:	d02c      	beq.n	800150c <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80014b2:	b004      	add	sp, #16
 80014b4:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80014b6:	9b03      	ldr	r3, [sp, #12]
 80014b8:	f013 0f01 	tst.w	r3, #1
 80014bc:	d003      	beq.n	80014c6 <I2S_IRQHandler+0x34>
 80014be:	6853      	ldr	r3, [r2, #4]
 80014c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80014c4:	d11f      	bne.n	8001506 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80014c6:	9b03      	ldr	r3, [sp, #12]
 80014c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80014cc:	d0ec      	beq.n	80014a8 <I2S_IRQHandler+0x16>
 80014ce:	6823      	ldr	r3, [r4, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	f012 0f20 	tst.w	r2, #32
 80014d6:	d0e7      	beq.n	80014a8 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80014de:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80014e0:	2300      	movs	r3, #0
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	9201      	str	r2, [sp, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80014f0:	2301      	movs	r3, #1
 80014f2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80014f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff ffc6 	bl	8001490 <HAL_I2S_ErrorCallback>
 8001504:	e7d0      	b.n	80014a8 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 8001506:	f7ff ff96 	bl	8001436 <I2S_Receive_IT>
 800150a:	e7dc      	b.n	80014c6 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800150c:	9b03      	ldr	r3, [sp, #12]
 800150e:	f013 0f02 	tst.w	r3, #2
 8001512:	d004      	beq.n	800151e <I2S_IRQHandler+0x8c>
 8001514:	6823      	ldr	r3, [r4, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f013 0f80 	tst.w	r3, #128	; 0x80
 800151c:	d11d      	bne.n	800155a <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800151e:	9b03      	ldr	r3, [sp, #12]
 8001520:	f013 0f08 	tst.w	r3, #8
 8001524:	d0c5      	beq.n	80014b2 <I2S_IRQHandler+0x20>
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	f012 0f20 	tst.w	r2, #32
 800152e:	d0c0      	beq.n	80014b2 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001536:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001538:	2300      	movs	r3, #0
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001544:	2301      	movs	r3, #1
 8001546:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800154a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff ff9c 	bl	8001490 <HAL_I2S_ErrorCallback>
}
 8001558:	e7ab      	b.n	80014b2 <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 800155a:	4620      	mov	r0, r4
 800155c:	f7ff ff39 	bl	80013d2 <I2S_Transmit_IT>
 8001560:	e7dd      	b.n	800151e <I2S_IRQHandler+0x8c>

08001562 <I2S_DMAError>:
{
 8001562:	b508      	push	{r3, lr}
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8001564:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001566:	6802      	ldr	r2, [r0, #0]
 8001568:	6853      	ldr	r3, [r2, #4]
 800156a:	f023 0303 	bic.w	r3, r3, #3
 800156e:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8001570:	2300      	movs	r3, #0
 8001572:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001574:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8001576:	2301      	movs	r3, #1
 8001578:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800157c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8001584:	f7ff ff84 	bl	8001490 <HAL_I2S_ErrorCallback>
}
 8001588:	bd08      	pop	{r3, pc}

0800158a <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800158a:	4770      	bx	lr

0800158c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800158c:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800158e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001590:	1c9a      	adds	r2, r3, #2
 8001592:	6242      	str	r2, [r0, #36]	; 0x24
 8001594:	6802      	ldr	r2, [r0, #0]
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800159a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800159c:	3b01      	subs	r3, #1
 800159e:	b29b      	uxth	r3, r3
 80015a0:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80015a2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80015a4:	b29b      	uxth	r3, r3
 80015a6:	b93b      	cbnz	r3, 80015b8 <I2SEx_TxISR_I2S+0x2c>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80015a8:	6802      	ldr	r2, [r0, #0]
 80015aa:	6853      	ldr	r3, [r2, #4]
 80015ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80015b0:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 80015b2:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	b103      	cbz	r3, 80015ba <I2SEx_TxISR_I2S+0x2e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80015b8:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 80015ba:	2301      	movs	r3, #1
 80015bc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80015c0:	f7ff ffe3 	bl	800158a <HAL_I2SEx_TxRxCpltCallback>
}
 80015c4:	e7f8      	b.n	80015b8 <I2SEx_TxISR_I2S+0x2c>
	...

080015c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80015c8:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80015ca:	6802      	ldr	r2, [r0, #0]
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <I2SEx_RxISR_I2SExt+0x58>)
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d01b      	beq.n	800160a <I2SEx_RxISR_I2SExt+0x42>
 80015d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80015da:	1c99      	adds	r1, r3, #2
 80015dc:	62c1      	str	r1, [r0, #44]	; 0x2c
 80015de:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80015e0:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80015e2:	3b01      	subs	r3, #1
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80015e8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	b963      	cbnz	r3, 8001608 <I2SEx_RxISR_I2SExt+0x40>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80015ee:	6802      	ldr	r2, [r0, #0]
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <I2SEx_RxISR_I2SExt+0x58>)
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d00c      	beq.n	8001610 <I2SEx_RxISR_I2SExt+0x48>
 80015f6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80015fa:	6853      	ldr	r3, [r2, #4]
 80015fc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001600:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8001602:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001604:	b29b      	uxth	r3, r3
 8001606:	b12b      	cbz	r3, 8001614 <I2SEx_RxISR_I2SExt+0x4c>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001608:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800160a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800160e:	e7e2      	b.n	80015d6 <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001610:	4a04      	ldr	r2, [pc, #16]	; (8001624 <I2SEx_RxISR_I2SExt+0x5c>)
 8001612:	e7f2      	b.n	80015fa <I2SEx_RxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 8001614:	2301      	movs	r3, #1
 8001616:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800161a:	f7ff ffb6 	bl	800158a <HAL_I2SEx_TxRxCpltCallback>
}
 800161e:	e7f3      	b.n	8001608 <I2SEx_RxISR_I2SExt+0x40>
 8001620:	40003800 	.word	0x40003800
 8001624:	40003400 	.word	0x40003400

08001628 <I2SEx_TxISR_I2SExt>:
{
 8001628:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800162a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800162c:	1c9a      	adds	r2, r3, #2
 800162e:	6242      	str	r2, [r0, #36]	; 0x24
 8001630:	881a      	ldrh	r2, [r3, #0]
 8001632:	6801      	ldr	r1, [r0, #0]
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <I2SEx_TxISR_I2SExt+0x58>)
 8001636:	4299      	cmp	r1, r3
 8001638:	d017      	beq.n	800166a <I2SEx_TxISR_I2SExt+0x42>
 800163a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800163e:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001640:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001642:	3b01      	subs	r3, #1
 8001644:	b29b      	uxth	r3, r3
 8001646:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8001648:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800164a:	b29b      	uxth	r3, r3
 800164c:	b963      	cbnz	r3, 8001668 <I2SEx_TxISR_I2SExt+0x40>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800164e:	6802      	ldr	r2, [r0, #0]
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <I2SEx_TxISR_I2SExt+0x58>)
 8001652:	429a      	cmp	r2, r3
 8001654:	d00c      	beq.n	8001670 <I2SEx_TxISR_I2SExt+0x48>
 8001656:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800165a:	6853      	ldr	r3, [r2, #4]
 800165c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001660:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8001662:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001664:	b29b      	uxth	r3, r3
 8001666:	b12b      	cbz	r3, 8001674 <I2SEx_TxISR_I2SExt+0x4c>
}
 8001668:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800166a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800166e:	e7e6      	b.n	800163e <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <I2SEx_TxISR_I2SExt+0x5c>)
 8001672:	e7f2      	b.n	800165a <I2SEx_TxISR_I2SExt+0x32>
      hi2s->State = HAL_I2S_STATE_READY;
 8001674:	2301      	movs	r3, #1
 8001676:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800167a:	f7ff ff86 	bl	800158a <HAL_I2SEx_TxRxCpltCallback>
}
 800167e:	e7f3      	b.n	8001668 <I2SEx_TxISR_I2SExt+0x40>
 8001680:	40003800 	.word	0x40003800
 8001684:	40003400 	.word	0x40003400

08001688 <I2SEx_RxISR_I2S>:
{
 8001688:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800168a:	6803      	ldr	r3, [r0, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001690:	1c99      	adds	r1, r3, #2
 8001692:	62c1      	str	r1, [r0, #44]	; 0x2c
 8001694:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8001696:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001698:	3b01      	subs	r3, #1
 800169a:	b29b      	uxth	r3, r3
 800169c:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800169e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	b93b      	cbnz	r3, 80016b4 <I2SEx_RxISR_I2S+0x2c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80016a4:	6802      	ldr	r2, [r0, #0]
 80016a6:	6853      	ldr	r3, [r2, #4]
 80016a8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80016ac:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 80016ae:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	b103      	cbz	r3, 80016b6 <I2SEx_RxISR_I2S+0x2e>
}
 80016b4:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 80016b6:	2301      	movs	r3, #1
 80016b8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80016bc:	f7ff ff65 	bl	800158a <HAL_I2SEx_TxRxCpltCallback>
}
 80016c0:	e7f8      	b.n	80016b4 <I2SEx_RxISR_I2S+0x2c>
	...

080016c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 80016c4:	b510      	push	{r4, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80016ca:	6803      	ldr	r3, [r0, #0]
 80016cc:	689a      	ldr	r2, [r3, #8]
 80016ce:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80016d0:	4a70      	ldr	r2, [pc, #448]	; (8001894 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d06f      	beq.n	80017b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 80016d6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80016da:	6891      	ldr	r1, [r2, #8]
 80016dc:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80016e2:	6853      	ldr	r3, [r2, #4]
 80016e4:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80016e6:	6863      	ldr	r3, [r4, #4]
 80016e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ec:	d001      	beq.n	80016f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d170      	bne.n	80017d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80016f2:	9b05      	ldr	r3, [sp, #20]
 80016f4:	f013 0f02 	tst.w	r3, #2
 80016f8:	d003      	beq.n	8001702 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 80016fa:	9b03      	ldr	r3, [sp, #12]
 80016fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001700:	d15c      	bne.n	80017bc <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001702:	9b04      	ldr	r3, [sp, #16]
 8001704:	f013 0f01 	tst.w	r3, #1
 8001708:	d003      	beq.n	8001712 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 800170a:	9b02      	ldr	r3, [sp, #8]
 800170c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001710:	d158      	bne.n	80017c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001712:	9b04      	ldr	r3, [sp, #16]
 8001714:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001718:	d024      	beq.n	8001764 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 800171a:	9b02      	ldr	r3, [sp, #8]
 800171c:	f013 0f20 	tst.w	r3, #32
 8001720:	d020      	beq.n	8001764 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001722:	6822      	ldr	r2, [r4, #0]
 8001724:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001726:	429a      	cmp	r2, r3
 8001728:	d050      	beq.n	80017cc <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 800172a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800172e:	6853      	ldr	r3, [r2, #4]
 8001730:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001734:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001736:	6822      	ldr	r2, [r4, #0]
 8001738:	6853      	ldr	r3, [r2, #4]
 800173a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800173e:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001740:	2300      	movs	r3, #0
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	9200      	str	r2, [sp, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8001750:	2301      	movs	r3, #1
 8001752:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001756:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff fe96 	bl	8001490 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001764:	9b05      	ldr	r3, [sp, #20]
 8001766:	f013 0f08 	tst.w	r3, #8
 800176a:	d022      	beq.n	80017b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 800176c:	9b03      	ldr	r3, [sp, #12]
 800176e:	f013 0f20 	tst.w	r3, #32
 8001772:	d01e      	beq.n	80017b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001774:	6822      	ldr	r2, [r4, #0]
 8001776:	6853      	ldr	r3, [r2, #4]
 8001778:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800177c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800177e:	6822      	ldr	r2, [r4, #0]
 8001780:	4b44      	ldr	r3, [pc, #272]	; (8001894 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001782:	429a      	cmp	r2, r3
 8001784:	d024      	beq.n	80017d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001786:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800178a:	6853      	ldr	r3, [r2, #4]
 800178c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001790:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001792:	2300      	movs	r3, #0
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800179e:	2301      	movs	r3, #1
 80017a0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80017a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80017ac:	4620      	mov	r0, r4
 80017ae:	f7ff fe6f 	bl	8001490 <HAL_I2S_ErrorCallback>
}
 80017b2:	b006      	add	sp, #24
 80017b4:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80017b6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80017ba:	e78e      	b.n	80016da <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 80017bc:	4620      	mov	r0, r4
 80017be:	f7ff fee5 	bl	800158c <I2SEx_TxISR_I2S>
 80017c2:	e79e      	b.n	8001702 <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 80017c4:	4620      	mov	r0, r4
 80017c6:	f7ff feff 	bl	80015c8 <I2SEx_RxISR_I2SExt>
 80017ca:	e7a2      	b.n	8001712 <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017cc:	4a32      	ldr	r2, [pc, #200]	; (8001898 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80017ce:	e7ae      	b.n	800172e <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80017d0:	4a31      	ldr	r2, [pc, #196]	; (8001898 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 80017d2:	e7da      	b.n	800178a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80017d4:	9b04      	ldr	r3, [sp, #16]
 80017d6:	f013 0f02 	tst.w	r3, #2
 80017da:	d003      	beq.n	80017e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 80017dc:	9b02      	ldr	r3, [sp, #8]
 80017de:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017e2:	d14a      	bne.n	800187a <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80017e4:	9b05      	ldr	r3, [sp, #20]
 80017e6:	f013 0f01 	tst.w	r3, #1
 80017ea:	d003      	beq.n	80017f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 80017ec:	9b03      	ldr	r3, [sp, #12]
 80017ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017f2:	d146      	bne.n	8001882 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80017f4:	9b05      	ldr	r3, [sp, #20]
 80017f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80017fa:	d01c      	beq.n	8001836 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 80017fc:	9b03      	ldr	r3, [sp, #12]
 80017fe:	f013 0f20 	tst.w	r3, #32
 8001802:	d018      	beq.n	8001836 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001804:	6822      	ldr	r2, [r4, #0]
 8001806:	6853      	ldr	r3, [r2, #4]
 8001808:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800180c:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800180e:	6822      	ldr	r2, [r4, #0]
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8001812:	429a      	cmp	r2, r3
 8001814:	d039      	beq.n	800188a <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 8001816:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800181a:	6853      	ldr	r3, [r2, #4]
 800181c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001820:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001822:	2301      	movs	r3, #1
 8001824:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001828:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001830:	4620      	mov	r0, r4
 8001832:	f7ff fe2d 	bl	8001490 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001836:	9b04      	ldr	r3, [sp, #16]
 8001838:	f013 0f08 	tst.w	r3, #8
 800183c:	d0b9      	beq.n	80017b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 800183e:	9b02      	ldr	r3, [sp, #8]
 8001840:	f013 0f20 	tst.w	r3, #32
 8001844:	d0b5      	beq.n	80017b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001846:	6822      	ldr	r2, [r4, #0]
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800184a:	429a      	cmp	r2, r3
 800184c:	d01f      	beq.n	800188e <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 800184e:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001852:	6853      	ldr	r3, [r2, #4]
 8001854:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001858:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800185a:	6822      	ldr	r2, [r4, #0]
 800185c:	6853      	ldr	r3, [r2, #4]
 800185e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001862:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001864:	2301      	movs	r3, #1
 8001866:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800186a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001872:	4620      	mov	r0, r4
 8001874:	f7ff fe0c 	bl	8001490 <HAL_I2S_ErrorCallback>
}
 8001878:	e79b      	b.n	80017b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff fed4 	bl	8001628 <I2SEx_TxISR_I2SExt>
 8001880:	e7b0      	b.n	80017e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 8001882:	4620      	mov	r0, r4
 8001884:	f7ff ff00 	bl	8001688 <I2SEx_RxISR_I2S>
 8001888:	e7b4      	b.n	80017f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800188a:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 800188c:	e7c5      	b.n	800181a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800188e:	4a02      	ldr	r2, [pc, #8]	; (8001898 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8001890:	e7df      	b.n	8001852 <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 8001892:	bf00      	nop
 8001894:	40003800 	.word	0x40003800
 8001898:	40003400 	.word	0x40003400

0800189c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800189c:	2800      	cmp	r0, #0
 800189e:	f000 81e4 	beq.w	8001c6a <HAL_RCC_OscConfig+0x3ce>
{
 80018a2:	b570      	push	{r4, r5, r6, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a8:	6803      	ldr	r3, [r0, #0]
 80018aa:	f013 0f01 	tst.w	r3, #1
 80018ae:	d03b      	beq.n	8001928 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018b0:	4ba7      	ldr	r3, [pc, #668]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d02c      	beq.n	8001916 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018bc:	4ba4      	ldr	r3, [pc, #656]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d021      	beq.n	800190c <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c8:	6863      	ldr	r3, [r4, #4]
 80018ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ce:	d04f      	beq.n	8001970 <HAL_RCC_OscConfig+0xd4>
 80018d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018d4:	d052      	beq.n	800197c <HAL_RCC_OscConfig+0xe0>
 80018d6:	4b9e      	ldr	r3, [pc, #632]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018e8:	6863      	ldr	r3, [r4, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d050      	beq.n	8001990 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ee:	f7ff f841 	bl	8000974 <HAL_GetTick>
 80018f2:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018f4:	4b96      	ldr	r3, [pc, #600]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80018fc:	d114      	bne.n	8001928 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018fe:	f7ff f839 	bl	8000974 <HAL_GetTick>
 8001902:	1b40      	subs	r0, r0, r5
 8001904:	2864      	cmp	r0, #100	; 0x64
 8001906:	d9f5      	bls.n	80018f4 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001908:	2003      	movs	r0, #3
 800190a:	e1b3      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190c:	4b90      	ldr	r3, [pc, #576]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001914:	d0d8      	beq.n	80018c8 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001916:	4b8e      	ldr	r3, [pc, #568]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800191e:	d003      	beq.n	8001928 <HAL_RCC_OscConfig+0x8c>
 8001920:	6863      	ldr	r3, [r4, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 81a3 	beq.w	8001c6e <HAL_RCC_OscConfig+0x3d2>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001928:	6823      	ldr	r3, [r4, #0]
 800192a:	f013 0f02 	tst.w	r3, #2
 800192e:	d055      	beq.n	80019dc <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001930:	4b87      	ldr	r3, [pc, #540]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f013 0f0c 	tst.w	r3, #12
 8001938:	d03e      	beq.n	80019b8 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193a:	4b85      	ldr	r3, [pc, #532]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001942:	2b08      	cmp	r3, #8
 8001944:	d033      	beq.n	80019ae <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001946:	68e3      	ldr	r3, [r4, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d068      	beq.n	8001a1e <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800194c:	4b81      	ldr	r3, [pc, #516]	; (8001b54 <HAL_RCC_OscConfig+0x2b8>)
 800194e:	2201      	movs	r2, #1
 8001950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff f80f 	bl	8000974 <HAL_GetTick>
 8001956:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001958:	4b7d      	ldr	r3, [pc, #500]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f013 0f02 	tst.w	r3, #2
 8001960:	d154      	bne.n	8001a0c <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001962:	f7ff f807 	bl	8000974 <HAL_GetTick>
 8001966:	1b40      	subs	r0, r0, r5
 8001968:	2802      	cmp	r0, #2
 800196a:	d9f5      	bls.n	8001958 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800196c:	2003      	movs	r0, #3
 800196e:	e181      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001970:	4a77      	ldr	r2, [pc, #476]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001972:	6813      	ldr	r3, [r2, #0]
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e7b5      	b.n	80018e8 <HAL_RCC_OscConfig+0x4c>
 800197c:	4b74      	ldr	r3, [pc, #464]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	e7ab      	b.n	80018e8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8001990:	f7fe fff0 	bl	8000974 <HAL_GetTick>
 8001994:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001996:	4b6e      	ldr	r3, [pc, #440]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800199e:	d0c3      	beq.n	8001928 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a0:	f7fe ffe8 	bl	8000974 <HAL_GetTick>
 80019a4:	1b40      	subs	r0, r0, r5
 80019a6:	2864      	cmp	r0, #100	; 0x64
 80019a8:	d9f5      	bls.n	8001996 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 80019aa:	2003      	movs	r0, #3
 80019ac:	e162      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ae:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80019b6:	d1c6      	bne.n	8001946 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b8:	4b65      	ldr	r3, [pc, #404]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f013 0f02 	tst.w	r3, #2
 80019c0:	d004      	beq.n	80019cc <HAL_RCC_OscConfig+0x130>
 80019c2:	68e3      	ldr	r3, [r4, #12]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d001      	beq.n	80019cc <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 80019c8:	2001      	movs	r0, #1
 80019ca:	e153      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019cc:	4a60      	ldr	r2, [pc, #384]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 80019ce:	6813      	ldr	r3, [r2, #0]
 80019d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019d4:	6921      	ldr	r1, [r4, #16]
 80019d6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80019da:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	f013 0f08 	tst.w	r3, #8
 80019e2:	d040      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019e4:	6963      	ldr	r3, [r4, #20]
 80019e6:	b363      	cbz	r3, 8001a42 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e8:	4b5b      	ldr	r3, [pc, #364]	; (8001b58 <HAL_RCC_OscConfig+0x2bc>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7fe ffc1 	bl	8000974 <HAL_GetTick>
 80019f2:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f4:	4b56      	ldr	r3, [pc, #344]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 80019f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019f8:	f013 0f02 	tst.w	r3, #2
 80019fc:	d133      	bne.n	8001a66 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fe:	f7fe ffb9 	bl	8000974 <HAL_GetTick>
 8001a02:	1b40      	subs	r0, r0, r5
 8001a04:	2802      	cmp	r0, #2
 8001a06:	d9f5      	bls.n	80019f4 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001a08:	2003      	movs	r0, #3
 8001a0a:	e133      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4a50      	ldr	r2, [pc, #320]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001a0e:	6813      	ldr	r3, [r2, #0]
 8001a10:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a14:	6921      	ldr	r1, [r4, #16]
 8001a16:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e7de      	b.n	80019dc <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001a1e:	4b4d      	ldr	r3, [pc, #308]	; (8001b54 <HAL_RCC_OscConfig+0x2b8>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a24:	f7fe ffa6 	bl	8000974 <HAL_GetTick>
 8001a28:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f013 0f02 	tst.w	r3, #2
 8001a32:	d0d3      	beq.n	80019dc <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a34:	f7fe ff9e 	bl	8000974 <HAL_GetTick>
 8001a38:	1b40      	subs	r0, r0, r5
 8001a3a:	2802      	cmp	r0, #2
 8001a3c:	d9f5      	bls.n	8001a2a <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 8001a3e:	2003      	movs	r0, #3
 8001a40:	e118      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a42:	4b45      	ldr	r3, [pc, #276]	; (8001b58 <HAL_RCC_OscConfig+0x2bc>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a48:	f7fe ff94 	bl	8000974 <HAL_GetTick>
 8001a4c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4e:	4b40      	ldr	r3, [pc, #256]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001a50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a52:	f013 0f02 	tst.w	r3, #2
 8001a56:	d006      	beq.n	8001a66 <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a58:	f7fe ff8c 	bl	8000974 <HAL_GetTick>
 8001a5c:	1b40      	subs	r0, r0, r5
 8001a5e:	2802      	cmp	r0, #2
 8001a60:	d9f5      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 8001a62:	2003      	movs	r0, #3
 8001a64:	e106      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	f013 0f04 	tst.w	r3, #4
 8001a6c:	d079      	beq.n	8001b62 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a6e:	4b38      	ldr	r3, [pc, #224]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001a76:	d133      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	4b34      	ldr	r3, [pc, #208]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001a7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a80:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	9301      	str	r3, [sp, #4]
 8001a8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001a90:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a92:	4b32      	ldr	r3, [pc, #200]	; (8001b5c <HAL_RCC_OscConfig+0x2c0>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001a9a:	d023      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a9c:	68a3      	ldr	r3, [r4, #8]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d034      	beq.n	8001b0c <HAL_RCC_OscConfig+0x270>
 8001aa2:	2b05      	cmp	r3, #5
 8001aa4:	d038      	beq.n	8001b18 <HAL_RCC_OscConfig+0x27c>
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001aa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	671a      	str	r2, [r3, #112]	; 0x70
 8001ab0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ab2:	f022 0204 	bic.w	r2, r2, #4
 8001ab6:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ab8:	68a3      	ldr	r3, [r4, #8]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d036      	beq.n	8001b2c <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abe:	f7fe ff59 	bl	8000974 <HAL_GetTick>
 8001ac2:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	4b22      	ldr	r3, [pc, #136]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	f013 0f02 	tst.w	r3, #2
 8001acc:	d148      	bne.n	8001b60 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7fe ff51 	bl	8000974 <HAL_GetTick>
 8001ad2:	1b80      	subs	r0, r0, r6
 8001ad4:	f241 3388 	movw	r3, #5000	; 0x1388
 8001ad8:	4298      	cmp	r0, r3
 8001ada:	d9f3      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8001adc:	2003      	movs	r0, #3
 8001ade:	e0c9      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
    FlagStatus       pwrclkchanged = RESET;
 8001ae0:	2500      	movs	r5, #0
 8001ae2:	e7d6      	b.n	8001a92 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae4:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <HAL_RCC_OscConfig+0x2c0>)
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aec:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001aee:	f7fe ff41 	bl	8000974 <HAL_GetTick>
 8001af2:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <HAL_RCC_OscConfig+0x2c0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001afc:	d1ce      	bne.n	8001a9c <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afe:	f7fe ff39 	bl	8000974 <HAL_GetTick>
 8001b02:	1b80      	subs	r0, r0, r6
 8001b04:	2802      	cmp	r0, #2
 8001b06:	d9f5      	bls.n	8001af4 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 8001b08:	2003      	movs	r0, #3
 8001b0a:	e0b3      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b0c:	4a10      	ldr	r2, [pc, #64]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001b0e:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6713      	str	r3, [r2, #112]	; 0x70
 8001b16:	e7cf      	b.n	8001ab8 <HAL_RCC_OscConfig+0x21c>
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001b1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b1c:	f042 0204 	orr.w	r2, r2, #4
 8001b20:	671a      	str	r2, [r3, #112]	; 0x70
 8001b22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	671a      	str	r2, [r3, #112]	; 0x70
 8001b2a:	e7c5      	b.n	8001ab8 <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7fe ff22 	bl	8000974 <HAL_GetTick>
 8001b30:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <HAL_RCC_OscConfig+0x2b4>)
 8001b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b36:	f013 0f02 	tst.w	r3, #2
 8001b3a:	d011      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7fe ff1a 	bl	8000974 <HAL_GetTick>
 8001b40:	1b80      	subs	r0, r0, r6
 8001b42:	f241 3388 	movw	r3, #5000	; 0x1388
 8001b46:	4298      	cmp	r0, r3
 8001b48:	d9f3      	bls.n	8001b32 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	e092      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	42470000 	.word	0x42470000
 8001b58:	42470e80 	.word	0x42470e80
 8001b5c:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b60:	b9ed      	cbnz	r5, 8001b9e <HAL_RCC_OscConfig+0x302>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b62:	69a3      	ldr	r3, [r4, #24]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	f000 8084 	beq.w	8001c72 <HAL_RCC_OscConfig+0x3d6>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b6a:	4a45      	ldr	r2, [pc, #276]	; (8001c80 <HAL_RCC_OscConfig+0x3e4>)
 8001b6c:	6892      	ldr	r2, [r2, #8]
 8001b6e:	f002 020c 	and.w	r2, r2, #12
 8001b72:	2a08      	cmp	r2, #8
 8001b74:	d051      	beq.n	8001c1a <HAL_RCC_OscConfig+0x37e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d017      	beq.n	8001baa <HAL_RCC_OscConfig+0x30e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b7a:	4b42      	ldr	r3, [pc, #264]	; (8001c84 <HAL_RCC_OscConfig+0x3e8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7fe fef8 	bl	8000974 <HAL_GetTick>
 8001b84:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b86:	4b3e      	ldr	r3, [pc, #248]	; (8001c80 <HAL_RCC_OscConfig+0x3e4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b8e:	d042      	beq.n	8001c16 <HAL_RCC_OscConfig+0x37a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b90:	f7fe fef0 	bl	8000974 <HAL_GetTick>
 8001b94:	1b00      	subs	r0, r0, r4
 8001b96:	2802      	cmp	r0, #2
 8001b98:	d9f5      	bls.n	8001b86 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001b9a:	2003      	movs	r0, #3
 8001b9c:	e06a      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b9e:	4a38      	ldr	r2, [pc, #224]	; (8001c80 <HAL_RCC_OscConfig+0x3e4>)
 8001ba0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ba2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba8:	e7db      	b.n	8001b62 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 8001baa:	4b36      	ldr	r3, [pc, #216]	; (8001c84 <HAL_RCC_OscConfig+0x3e8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bb0:	f7fe fee0 	bl	8000974 <HAL_GetTick>
 8001bb4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb6:	4b32      	ldr	r3, [pc, #200]	; (8001c80 <HAL_RCC_OscConfig+0x3e4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001bbe:	d006      	beq.n	8001bce <HAL_RCC_OscConfig+0x332>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc0:	f7fe fed8 	bl	8000974 <HAL_GetTick>
 8001bc4:	1b40      	subs	r0, r0, r5
 8001bc6:	2802      	cmp	r0, #2
 8001bc8:	d9f5      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x31a>
            return HAL_TIMEOUT;
 8001bca:	2003      	movs	r0, #3
 8001bcc:	e052      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bce:	69e3      	ldr	r3, [r4, #28]
 8001bd0:	6a22      	ldr	r2, [r4, #32]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001bd6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001bda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bdc:	0852      	lsrs	r2, r2, #1
 8001bde:	3a01      	subs	r2, #1
 8001be0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001be4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001be6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bea:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <HAL_RCC_OscConfig+0x3e4>)
 8001bec:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bee:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <HAL_RCC_OscConfig+0x3e8>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bf4:	f7fe febe 	bl	8000974 <HAL_GetTick>
 8001bf8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bfa:	4b21      	ldr	r3, [pc, #132]	; (8001c80 <HAL_RCC_OscConfig+0x3e4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c04:	f7fe feb6 	bl	8000974 <HAL_GetTick>
 8001c08:	1b00      	subs	r0, r0, r4
 8001c0a:	2802      	cmp	r0, #2
 8001c0c:	d9f5      	bls.n	8001bfa <HAL_RCC_OscConfig+0x35e>
            return HAL_TIMEOUT;
 8001c0e:	2003      	movs	r0, #3
 8001c10:	e030      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001c12:	2000      	movs	r0, #0
 8001c14:	e02e      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
 8001c16:	2000      	movs	r0, #0
 8001c18:	e02c      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d02c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x3dc>
        pll_config = RCC->CFGR;
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_RCC_OscConfig+0x3e4>)
 8001c20:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c22:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001c26:	69e2      	ldr	r2, [r4, #28]
 8001c28:	4291      	cmp	r1, r2
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_OscConfig+0x394>
          return HAL_ERROR;
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	e021      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c34:	6a21      	ldr	r1, [r4, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	428a      	cmp	r2, r1
 8001c38:	d001      	beq.n	8001c3e <HAL_RCC_OscConfig+0x3a2>
          return HAL_ERROR;
 8001c3a:	2001      	movs	r0, #1
 8001c3c:	e01a      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c40:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001c44:	401a      	ands	r2, r3
 8001c46:	428a      	cmp	r2, r1
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x3b2>
          return HAL_ERROR;
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	e012      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001c52:	6aa1      	ldr	r1, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001c54:	428a      	cmp	r2, r1
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_OscConfig+0x3c0>
          return HAL_ERROR;
 8001c58:	2001      	movs	r0, #1
 8001c5a:	e00b      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001c5c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001c60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d00a      	beq.n	8001c7c <HAL_RCC_OscConfig+0x3e0>
          return HAL_ERROR;
 8001c66:	2001      	movs	r0, #1
 8001c68:	e004      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
    return HAL_ERROR;
 8001c6a:	2001      	movs	r0, #1
}
 8001c6c:	4770      	bx	lr
        return HAL_ERROR;
 8001c6e:	2001      	movs	r0, #1
 8001c70:	e000      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8001c72:	2000      	movs	r0, #0
}
 8001c74:	b002      	add	sp, #8
 8001c76:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001c78:	2001      	movs	r0, #1
 8001c7a:	e7fb      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
  return HAL_OK;
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	e7f9      	b.n	8001c74 <HAL_RCC_OscConfig+0x3d8>
 8001c80:	40023800 	.word	0x40023800
 8001c84:	42470060 	.word	0x42470060

08001c88 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c88:	4b32      	ldr	r3, [pc, #200]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 030c 	and.w	r3, r3, #12
 8001c90:	2b04      	cmp	r3, #4
 8001c92:	d05c      	beq.n	8001d4e <HAL_RCC_GetSysClockFreq+0xc6>
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x14>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c98:	482f      	ldr	r0, [pc, #188]	; (8001d58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001c9a:	4770      	bx	lr
{
 8001c9c:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ca0:	4b2c      	ldr	r3, [pc, #176]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001cae:	d02b      	beq.n	8001d08 <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cb0:	4b28      	ldr	r3, [pc, #160]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001cb8:	461e      	mov	r6, r3
 8001cba:	2700      	movs	r7, #0
 8001cbc:	015c      	lsls	r4, r3, #5
 8001cbe:	2500      	movs	r5, #0
 8001cc0:	1ae4      	subs	r4, r4, r3
 8001cc2:	eb65 0507 	sbc.w	r5, r5, r7
 8001cc6:	01a9      	lsls	r1, r5, #6
 8001cc8:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001ccc:	01a0      	lsls	r0, r4, #6
 8001cce:	1b00      	subs	r0, r0, r4
 8001cd0:	eb61 0105 	sbc.w	r1, r1, r5
 8001cd4:	00cb      	lsls	r3, r1, #3
 8001cd6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cda:	00c4      	lsls	r4, r0, #3
 8001cdc:	19a0      	adds	r0, r4, r6
 8001cde:	eb43 0107 	adc.w	r1, r3, r7
 8001ce2:	024b      	lsls	r3, r1, #9
 8001ce4:	ea43 53d0 	orr.w	r3, r3, r0, lsr #23
 8001ce8:	0244      	lsls	r4, r0, #9
 8001cea:	4620      	mov	r0, r4
 8001cec:	4619      	mov	r1, r3
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f7fe fc76 	bl	80005e0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001d00:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001d04:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d08:	4b12      	ldr	r3, [pc, #72]	; (8001d54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001d10:	461e      	mov	r6, r3
 8001d12:	2700      	movs	r7, #0
 8001d14:	015c      	lsls	r4, r3, #5
 8001d16:	2500      	movs	r5, #0
 8001d18:	1ae4      	subs	r4, r4, r3
 8001d1a:	eb65 0507 	sbc.w	r5, r5, r7
 8001d1e:	01a9      	lsls	r1, r5, #6
 8001d20:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8001d24:	01a0      	lsls	r0, r4, #6
 8001d26:	1b00      	subs	r0, r0, r4
 8001d28:	eb61 0105 	sbc.w	r1, r1, r5
 8001d2c:	00cb      	lsls	r3, r1, #3
 8001d2e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d32:	00c4      	lsls	r4, r0, #3
 8001d34:	19a0      	adds	r0, r4, r6
 8001d36:	eb43 0107 	adc.w	r1, r3, r7
 8001d3a:	028b      	lsls	r3, r1, #10
 8001d3c:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 8001d40:	0284      	lsls	r4, r0, #10
 8001d42:	4620      	mov	r0, r4
 8001d44:	4619      	mov	r1, r3
 8001d46:	2300      	movs	r3, #0
 8001d48:	f7fe fc4a 	bl	80005e0 <__aeabi_uldivmod>
 8001d4c:	e7d2      	b.n	8001cf4 <HAL_RCC_GetSysClockFreq+0x6c>
      sysclockfreq = HSE_VALUE;
 8001d4e:	4803      	ldr	r0, [pc, #12]	; (8001d5c <HAL_RCC_GetSysClockFreq+0xd4>)
}
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800
 8001d58:	00f42400 	.word	0x00f42400
 8001d5c:	007a1200 	.word	0x007a1200

08001d60 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001d60:	2800      	cmp	r0, #0
 8001d62:	f000 809e 	beq.w	8001ea2 <HAL_RCC_ClockConfig+0x142>
{
 8001d66:	b570      	push	{r4, r5, r6, lr}
 8001d68:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d6a:	4b50      	ldr	r3, [pc, #320]	; (8001eac <HAL_RCC_ClockConfig+0x14c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	428b      	cmp	r3, r1
 8001d74:	d209      	bcs.n	8001d8a <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	b2cb      	uxtb	r3, r1
 8001d78:	4a4c      	ldr	r2, [pc, #304]	; (8001eac <HAL_RCC_ClockConfig+0x14c>)
 8001d7a:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7c:	6813      	ldr	r3, [r2, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	428b      	cmp	r3, r1
 8001d84:	d001      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8001d86:	2001      	movs	r0, #1
}
 8001d88:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d8a:	6823      	ldr	r3, [r4, #0]
 8001d8c:	f013 0f02 	tst.w	r3, #2
 8001d90:	d017      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d92:	f013 0f04 	tst.w	r3, #4
 8001d96:	d004      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d98:	4a45      	ldr	r2, [pc, #276]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001d9a:	6893      	ldr	r3, [r2, #8]
 8001d9c:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001da0:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	f013 0f08 	tst.w	r3, #8
 8001da8:	d004      	beq.n	8001db4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001daa:	4a41      	ldr	r2, [pc, #260]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001dac:	6893      	ldr	r3, [r2, #8]
 8001dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001db2:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db4:	4a3e      	ldr	r2, [pc, #248]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001db6:	6893      	ldr	r3, [r2, #8]
 8001db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dbc:	68a0      	ldr	r0, [r4, #8]
 8001dbe:	4303      	orrs	r3, r0
 8001dc0:	6093      	str	r3, [r2, #8]
 8001dc2:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	f013 0f01 	tst.w	r3, #1
 8001dca:	d032      	beq.n	8001e32 <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dcc:	6863      	ldr	r3, [r4, #4]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d021      	beq.n	8001e16 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dd2:	1e9a      	subs	r2, r3, #2
 8001dd4:	2a01      	cmp	r2, #1
 8001dd6:	d925      	bls.n	8001e24 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	4a35      	ldr	r2, [pc, #212]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	f012 0f02 	tst.w	r2, #2
 8001de0:	d061      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0x146>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de2:	4933      	ldr	r1, [pc, #204]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001de4:	688a      	ldr	r2, [r1, #8]
 8001de6:	f022 0203 	bic.w	r2, r2, #3
 8001dea:	4313      	orrs	r3, r2
 8001dec:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8001dee:	f7fe fdc1 	bl	8000974 <HAL_GetTick>
 8001df2:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df4:	4b2e      	ldr	r3, [pc, #184]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 030c 	and.w	r3, r3, #12
 8001dfc:	6862      	ldr	r2, [r4, #4]
 8001dfe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001e02:	d016      	beq.n	8001e32 <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e04:	f7fe fdb6 	bl	8000974 <HAL_GetTick>
 8001e08:	1b80      	subs	r0, r0, r6
 8001e0a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001e0e:	4298      	cmp	r0, r3
 8001e10:	d9f0      	bls.n	8001df4 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 8001e12:	2003      	movs	r0, #3
 8001e14:	e7b8      	b.n	8001d88 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	4a26      	ldr	r2, [pc, #152]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001e18:	6812      	ldr	r2, [r2, #0]
 8001e1a:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001e1e:	d1e0      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001e20:	2001      	movs	r0, #1
 8001e22:	e7b1      	b.n	8001d88 <HAL_RCC_ClockConfig+0x28>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e24:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001e2c:	d1d9      	bne.n	8001de2 <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 8001e2e:	2001      	movs	r0, #1
 8001e30:	e7aa      	b.n	8001d88 <HAL_RCC_ClockConfig+0x28>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e32:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_RCC_ClockConfig+0x14c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	42ab      	cmp	r3, r5
 8001e3c:	d909      	bls.n	8001e52 <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	b2ea      	uxtb	r2, r5
 8001e40:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_RCC_ClockConfig+0x14c>)
 8001e42:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	42ab      	cmp	r3, r5
 8001e4c:	d001      	beq.n	8001e52 <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 8001e4e:	2001      	movs	r0, #1
 8001e50:	e79a      	b.n	8001d88 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	f013 0f04 	tst.w	r3, #4
 8001e58:	d006      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001e5c:	6893      	ldr	r3, [r2, #8]
 8001e5e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001e62:	68e1      	ldr	r1, [r4, #12]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	f013 0f08 	tst.w	r3, #8
 8001e6e:	d007      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e70:	4a0f      	ldr	r2, [pc, #60]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001e72:	6893      	ldr	r3, [r2, #8]
 8001e74:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001e78:	6921      	ldr	r1, [r4, #16]
 8001e7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001e7e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e80:	f7ff ff02 	bl	8001c88 <HAL_RCC_GetSysClockFreq>
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_RCC_ClockConfig+0x150>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <HAL_RCC_ClockConfig+0x154>)
 8001e8e:	5cd3      	ldrb	r3, [r2, r3]
 8001e90:	40d8      	lsrs	r0, r3
 8001e92:	4b09      	ldr	r3, [pc, #36]	; (8001eb8 <HAL_RCC_ClockConfig+0x158>)
 8001e94:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001e96:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <HAL_RCC_ClockConfig+0x15c>)
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	f7fe fd21 	bl	80008e0 <HAL_InitTick>
  return HAL_OK;
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	e772      	b.n	8001d88 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8001ea2:	2001      	movs	r0, #1
}
 8001ea4:	4770      	bx	lr
        return HAL_ERROR;
 8001ea6:	2001      	movs	r0, #1
 8001ea8:	e76e      	b.n	8001d88 <HAL_RCC_ClockConfig+0x28>
 8001eaa:	bf00      	nop
 8001eac:	40023c00 	.word	0x40023c00
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	08005164 	.word	0x08005164
 8001eb8:	20000008 	.word	0x20000008
 8001ebc:	20000004 	.word	0x20000004

08001ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec0:	b530      	push	{r4, r5, lr}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001ec6:	6803      	ldr	r3, [r0, #0]
 8001ec8:	f013 0f05 	tst.w	r3, #5
 8001ecc:	d106      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ece:	6823      	ldr	r3, [r4, #0]
 8001ed0:	f013 0f02 	tst.w	r3, #2
 8001ed4:	d12e      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001ed6:	2000      	movs	r0, #0
}
 8001ed8:	b003      	add	sp, #12
 8001eda:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8001edc:	4b49      	ldr	r3, [pc, #292]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001ee2:	f7fe fd47 	bl	8000974 <HAL_GetTick>
 8001ee6:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ee8:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001ef0:	d006      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001ef2:	f7fe fd3f 	bl	8000974 <HAL_GetTick>
 8001ef6:	1b40      	subs	r0, r0, r5
 8001ef8:	2802      	cmp	r0, #2
 8001efa:	d9f5      	bls.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 8001efc:	2003      	movs	r0, #3
 8001efe:	e7eb      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8001f00:	6862      	ldr	r2, [r4, #4]
 8001f02:	68a3      	ldr	r3, [r4, #8]
 8001f04:	071b      	lsls	r3, r3, #28
 8001f06:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001f0a:	4a3f      	ldr	r2, [pc, #252]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001f0c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001f10:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8001f16:	f7fe fd2d 	bl	8000974 <HAL_GetTick>
 8001f1a:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001f1c:	4b3a      	ldr	r3, [pc, #232]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001f24:	d1d3      	bne.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001f26:	f7fe fd25 	bl	8000974 <HAL_GetTick>
 8001f2a:	1b40      	subs	r0, r0, r5
 8001f2c:	2802      	cmp	r0, #2
 8001f2e:	d9f5      	bls.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8001f30:	2003      	movs	r0, #3
 8001f32:	e7d1      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f34:	2300      	movs	r3, #0
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	4b33      	ldr	r3, [pc, #204]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001f3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001f4c:	4a2f      	ldr	r2, [pc, #188]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f4e:	6813      	ldr	r3, [r2, #0]
 8001f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f54:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f56:	f7fe fd0d 	bl	8000974 <HAL_GetTick>
 8001f5a:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001f5c:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f64:	d106      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f66:	f7fe fd05 	bl	8000974 <HAL_GetTick>
 8001f6a:	1b40      	subs	r0, r0, r5
 8001f6c:	2802      	cmp	r0, #2
 8001f6e:	d9f5      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8001f70:	2003      	movs	r0, #3
 8001f72:	e7b1      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f74:	4b24      	ldr	r3, [pc, #144]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f78:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001f7c:	d012      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8001f7e:	68e2      	ldr	r2, [r4, #12]
 8001f80:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d00d      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f88:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001f8a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f8c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f90:	491f      	ldr	r1, [pc, #124]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001f92:	2001      	movs	r0, #1
 8001f94:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f96:	2000      	movs	r0, #0
 8001f98:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 8001f9a:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	f013 0f01 	tst.w	r3, #1
 8001fa2:	d113      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa4:	68e3      	ldr	r3, [r4, #12]
 8001fa6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001faa:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001fae:	d01e      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x12e>
 8001fb0:	4a15      	ldr	r2, [pc, #84]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001fb2:	6893      	ldr	r3, [r2, #8]
 8001fb4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001fb8:	6093      	str	r3, [r2, #8]
 8001fba:	4913      	ldr	r1, [pc, #76]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001fbc:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001fbe:	68e2      	ldr	r2, [r4, #12]
 8001fc0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 8001fc8:	2000      	movs	r0, #0
 8001fca:	e785      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8001fcc:	f7fe fcd2 	bl	8000974 <HAL_GetTick>
 8001fd0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd6:	f013 0f02 	tst.w	r3, #2
 8001fda:	d1e3      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fdc:	f7fe fcca 	bl	8000974 <HAL_GetTick>
 8001fe0:	1b40      	subs	r0, r0, r5
 8001fe2:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fe6:	4298      	cmp	r0, r3
 8001fe8:	d9f3      	bls.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
            return HAL_TIMEOUT;
 8001fea:	2003      	movs	r0, #3
 8001fec:	e774      	b.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fee:	4906      	ldr	r1, [pc, #24]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8001ff0:	688a      	ldr	r2, [r1, #8]
 8001ff2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8001ff6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
 8002002:	e7da      	b.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002004:	42470068 	.word	0x42470068
 8002008:	40023800 	.word	0x40023800
 800200c:	40007000 	.word	0x40007000
 8002010:	42470e40 	.word	0x42470e40

08002014 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002014:	2801      	cmp	r0, #1
 8002016:	d12a      	bne.n	800206e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800201a:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 800201c:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8002020:	d003      	beq.n	800202a <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 8002022:	2b01      	cmp	r3, #1
 8002024:	d125      	bne.n	8002072 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002026:	4815      	ldr	r0, [pc, #84]	; (800207c <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8002028:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800202a:	4b13      	ldr	r3, [pc, #76]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002032:	d014      	beq.n	800205e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002034:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800203c:	4810      	ldr	r0, [pc, #64]	; (8002080 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 800203e:	fbb0 f0f3 	udiv	r0, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002042:	4a0d      	ldr	r2, [pc, #52]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002044:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002048:	f3c3 1388 	ubfx	r3, r3, #6, #9
 800204c:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002050:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002054:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002058:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800205c:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002066:	4807      	ldr	r0, [pc, #28]	; (8002084 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8002068:	fbb0 f0f3 	udiv	r0, r0, r3
 800206c:	e7e9      	b.n	8002042 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
  uint32_t frequency = 0U;
 800206e:	2000      	movs	r0, #0
 8002070:	4770      	bx	lr
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002072:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800
 800207c:	00bb8000 	.word	0x00bb8000
 8002080:	007a1200 	.word	0x007a1200
 8002084:	00f42400 	.word	0x00f42400

08002088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800208c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208e:	2400      	movs	r4, #0
 8002090:	9407      	str	r4, [sp, #28]
 8002092:	9408      	str	r4, [sp, #32]
 8002094:	9409      	str	r4, [sp, #36]	; 0x24
 8002096:	940a      	str	r4, [sp, #40]	; 0x28
 8002098:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800209a:	9401      	str	r4, [sp, #4]
 800209c:	4b63      	ldr	r3, [pc, #396]	; (800222c <MX_GPIO_Init+0x1a4>)
 800209e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a0:	f042 0210 	orr.w	r2, r2, #16
 80020a4:	631a      	str	r2, [r3, #48]	; 0x30
 80020a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020a8:	f002 0210 	and.w	r2, r2, #16
 80020ac:	9201      	str	r2, [sp, #4]
 80020ae:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b0:	9402      	str	r4, [sp, #8]
 80020b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020b4:	f042 0204 	orr.w	r2, r2, #4
 80020b8:	631a      	str	r2, [r3, #48]	; 0x30
 80020ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020bc:	f002 0204 	and.w	r2, r2, #4
 80020c0:	9202      	str	r2, [sp, #8]
 80020c2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020c4:	9403      	str	r4, [sp, #12]
 80020c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
 80020ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80020d4:	9203      	str	r2, [sp, #12]
 80020d6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d8:	9404      	str	r4, [sp, #16]
 80020da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020dc:	f042 0201 	orr.w	r2, r2, #1
 80020e0:	631a      	str	r2, [r3, #48]	; 0x30
 80020e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020e4:	f002 0201 	and.w	r2, r2, #1
 80020e8:	9204      	str	r2, [sp, #16]
 80020ea:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	9405      	str	r4, [sp, #20]
 80020ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f0:	f042 0202 	orr.w	r2, r2, #2
 80020f4:	631a      	str	r2, [r3, #48]	; 0x30
 80020f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f8:	f002 0202 	and.w	r2, r2, #2
 80020fc:	9205      	str	r2, [sp, #20]
 80020fe:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002100:	9406      	str	r4, [sp, #24]
 8002102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002104:	f042 0208 	orr.w	r2, r2, #8
 8002108:	631a      	str	r2, [r3, #48]	; 0x30
 800210a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	9306      	str	r3, [sp, #24]
 8002112:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8002114:	4622      	mov	r2, r4
 8002116:	2108      	movs	r1, #8
 8002118:	4845      	ldr	r0, [pc, #276]	; (8002230 <MX_GPIO_Init+0x1a8>)
 800211a:	f7fe ff95 	bl	8001048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800211e:	4e45      	ldr	r6, [pc, #276]	; (8002234 <MX_GPIO_Init+0x1ac>)
 8002120:	4622      	mov	r2, r4
 8002122:	2101      	movs	r1, #1
 8002124:	4630      	mov	r0, r6
 8002126:	f7fe ff8f 	bl	8001048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 800212a:	f8df 9110 	ldr.w	r9, [pc, #272]	; 800223c <MX_GPIO_Init+0x1b4>
 800212e:	4622      	mov	r2, r4
 8002130:	f24f 0110 	movw	r1, #61456	; 0xf010
 8002134:	4648      	mov	r0, r9
 8002136:	f7fe ff87 	bl	8001048 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800213a:	2308      	movs	r3, #8
 800213c:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2501      	movs	r5, #1
 8002140:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002144:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002146:	a907      	add	r1, sp, #28
 8002148:	4839      	ldr	r0, [pc, #228]	; (8002230 <MX_GPIO_Init+0x1a8>)
 800214a:	f7fe fe99 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800214e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002150:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002152:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002156:	a907      	add	r1, sp, #28
 8002158:	4630      	mov	r0, r6
 800215a:	f7fe fe91 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800215e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002160:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8002240 <MX_GPIO_Init+0x1b8>
 8002164:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216a:	f5a6 6600 	sub.w	r6, r6, #2048	; 0x800
 800216e:	a907      	add	r1, sp, #28
 8002170:	4630      	mov	r0, r6
 8002172:	f7fe fe85 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002176:	23e0      	movs	r3, #224	; 0xe0
 8002178:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217a:	2702      	movs	r7, #2
 800217c:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002180:	f04f 0803 	mov.w	r8, #3
 8002184:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002188:	2305      	movs	r3, #5
 800218a:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	a907      	add	r1, sp, #28
 800218e:	4630      	mov	r0, r6
 8002190:	f7fe fe76 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002194:	f04f 0b04 	mov.w	fp, #4
 8002198:	f8cd b01c 	str.w	fp, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a0:	a907      	add	r1, sp, #28
 80021a2:	4825      	ldr	r0, [pc, #148]	; (8002238 <MX_GPIO_Init+0x1b0>)
 80021a4:	f7fe fe6c 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15 
 80021a8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80021ac:	9307      	str	r3, [sp, #28]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ae:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b4:	a907      	add	r1, sp, #28
 80021b6:	4648      	mov	r0, r9
 80021b8:	f7fe fe62 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	a907      	add	r1, sp, #28
 80021c8:	4630      	mov	r0, r6
 80021ca:	f7fe fe59 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80021ce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021d2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d4:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021dc:	230a      	movs	r3, #10
 80021de:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e0:	a907      	add	r1, sp, #28
 80021e2:	4630      	mov	r0, r6
 80021e4:	f7fe fe4c 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021e8:	2320      	movs	r3, #32
 80021ea:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021ec:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f0:	a907      	add	r1, sp, #28
 80021f2:	4648      	mov	r0, r9
 80021f4:	f7fe fe44 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80021f8:	f44f 7310 	mov.w	r3, #576	; 0x240
 80021fc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fe:	2312      	movs	r3, #18
 8002200:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002202:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002204:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002208:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220c:	a907      	add	r1, sp, #28
 800220e:	480a      	ldr	r0, [pc, #40]	; (8002238 <MX_GPIO_Init+0x1b0>)
 8002210:	f7fe fe36 	bl	8000e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002214:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002216:	f8cd a020 	str.w	sl, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800221c:	a907      	add	r1, sp, #28
 800221e:	4804      	ldr	r0, [pc, #16]	; (8002230 <MX_GPIO_Init+0x1a8>)
 8002220:	f7fe fe2e 	bl	8000e80 <HAL_GPIO_Init>

}
 8002224:	b00d      	add	sp, #52	; 0x34
 8002226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800222a:	bf00      	nop
 800222c:	40023800 	.word	0x40023800
 8002230:	40021000 	.word	0x40021000
 8002234:	40020800 	.word	0x40020800
 8002238:	40020400 	.word	0x40020400
 800223c:	40020c00 	.word	0x40020c00
 8002240:	10110000 	.word	0x10110000

08002244 <MX_DMA_Init>:
{
 8002244:	b510      	push	{r4, lr}
 8002246:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002248:	2400      	movs	r4, #0
 800224a:	9401      	str	r4, [sp, #4]
 800224c:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <MX_DMA_Init+0x40>)
 800224e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002250:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002254:	631a      	str	r2, [r3, #48]	; 0x30
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225c:	9301      	str	r3, [sp, #4]
 800225e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002260:	4622      	mov	r2, r4
 8002262:	4621      	mov	r1, r4
 8002264:	200e      	movs	r0, #14
 8002266:	f7fe fb9d 	bl	80009a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800226a:	200e      	movs	r0, #14
 800226c:	f7fe fbce 	bl	8000a0c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002270:	4622      	mov	r2, r4
 8002272:	4621      	mov	r1, r4
 8002274:	2010      	movs	r0, #16
 8002276:	f7fe fb95 	bl	80009a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800227a:	2010      	movs	r0, #16
 800227c:	f7fe fbc6 	bl	8000a0c <HAL_NVIC_EnableIRQ>
}
 8002280:	b002      	add	sp, #8
 8002282:	bd10      	pop	{r4, pc}
 8002284:	40023800 	.word	0x40023800

08002288 <MX_I2S2_Init>:
{
 8002288:	b508      	push	{r3, lr}
  hi2s2.Instance = SPI2;
 800228a:	480a      	ldr	r0, [pc, #40]	; (80022b4 <MX_I2S2_Init+0x2c>)
 800228c:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <MX_I2S2_Init+0x30>)
 800228e:	6003      	str	r3, [r0, #0]
  hi2s2.Init.Mode = I2S_MODE_SLAVE_RX;
 8002290:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002294:	6043      	str	r3, [r0, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8002296:	2310      	movs	r3, #16
 8002298:	6083      	str	r3, [r0, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 800229a:	2303      	movs	r3, #3
 800229c:	60c3      	str	r3, [r0, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800229e:	2300      	movs	r3, #0
 80022a0:	6103      	str	r3, [r0, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80022a2:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80022a6:	6142      	str	r2, [r0, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80022a8:	6183      	str	r3, [r0, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80022aa:	61c3      	str	r3, [r0, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80022ac:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80022ae:	f7fe fed1 	bl	8001054 <HAL_I2S_Init>
}
 80022b2:	bd08      	pop	{r3, pc}
 80022b4:	20000784 	.word	0x20000784
 80022b8:	40003800 	.word	0x40003800

080022bc <MX_I2S3_Init>:
{
 80022bc:	b508      	push	{r3, lr}
  hi2s3.Instance = SPI3;
 80022be:	480a      	ldr	r0, [pc, #40]	; (80022e8 <MX_I2S3_Init+0x2c>)
 80022c0:	4b0a      	ldr	r3, [pc, #40]	; (80022ec <MX_I2S3_Init+0x30>)
 80022c2:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80022c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022c8:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80022ca:	2300      	movs	r3, #0
 80022cc:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_24B;
 80022ce:	2103      	movs	r1, #3
 80022d0:	60c1      	str	r1, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80022d2:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80022d4:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80022d8:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80022da:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80022dc:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80022de:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80022e0:	f7fe feb8 	bl	8001054 <HAL_I2S_Init>
}
 80022e4:	bd08      	pop	{r3, pc}
 80022e6:	bf00      	nop
 80022e8:	200007cc 	.word	0x200007cc
 80022ec:	40003c00 	.word	0x40003c00

080022f0 <MX_CRC_Init>:
{
 80022f0:	b510      	push	{r4, lr}
  hcrc.Instance = CRC;
 80022f2:	4c06      	ldr	r4, [pc, #24]	; (800230c <MX_CRC_Init+0x1c>)
 80022f4:	4b06      	ldr	r3, [pc, #24]	; (8002310 <MX_CRC_Init+0x20>)
 80022f6:	6023      	str	r3, [r4, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7fe fbab 	bl	8000a54 <HAL_CRC_Init>
  __HAL_CRC_DR_RESET(&hcrc);
 80022fe:	6822      	ldr	r2, [r4, #0]
 8002300:	6893      	ldr	r3, [r2, #8]
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6093      	str	r3, [r2, #8]
}
 8002308:	bd10      	pop	{r4, pc}
 800230a:	bf00      	nop
 800230c:	2000049c 	.word	0x2000049c
 8002310:	40023000 	.word	0x40023000

08002314 <FifoWrite>:
	fifobuf[fifo_w_ptr] = data;
 8002314:	4a03      	ldr	r2, [pc, #12]	; (8002324 <FifoWrite+0x10>)
 8002316:	7813      	ldrb	r3, [r2, #0]
 8002318:	4903      	ldr	r1, [pc, #12]	; (8002328 <FifoWrite+0x14>)
 800231a:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
	fifo_w_ptr++;
 800231e:	3301      	adds	r3, #1
 8002320:	7013      	strb	r3, [r2, #0]
}
 8002322:	4770      	bx	lr
 8002324:	20000490 	.word	0x20000490
 8002328:	20000814 	.word	0x20000814

0800232c <FifoRead>:
	uint16_t val = fifobuf[fifo_r_ptr];
 800232c:	4a03      	ldr	r2, [pc, #12]	; (800233c <FifoRead+0x10>)
 800232e:	7853      	ldrb	r3, [r2, #1]
 8002330:	4903      	ldr	r1, [pc, #12]	; (8002340 <FifoRead+0x14>)
 8002332:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
	fifo_r_ptr++;
 8002336:	3301      	adds	r3, #1
 8002338:	7053      	strb	r3, [r2, #1]
}
 800233a:	4770      	bx	lr
 800233c:	20000490 	.word	0x20000490
 8002340:	20000814 	.word	0x20000814

08002344 <HAL_I2S_TxHalfCpltCallback>:
	txstate = 1;
 8002344:	4b01      	ldr	r3, [pc, #4]	; (800234c <HAL_I2S_TxHalfCpltCallback+0x8>)
 8002346:	2201      	movs	r2, #1
 8002348:	709a      	strb	r2, [r3, #2]
}
 800234a:	4770      	bx	lr
 800234c:	20000490 	.word	0x20000490

08002350 <HAL_I2S_TxCpltCallback>:
	txstate = 2;
 8002350:	4b01      	ldr	r3, [pc, #4]	; (8002358 <HAL_I2S_TxCpltCallback+0x8>)
 8002352:	2202      	movs	r2, #2
 8002354:	709a      	strb	r2, [r3, #2]
}
 8002356:	4770      	bx	lr
 8002358:	20000490 	.word	0x20000490

0800235c <HAL_I2S_RxHalfCpltCallback>:
	rxstate = 1;
 800235c:	4b01      	ldr	r3, [pc, #4]	; (8002364 <HAL_I2S_RxHalfCpltCallback+0x8>)
 800235e:	2201      	movs	r2, #1
 8002360:	70da      	strb	r2, [r3, #3]
}
 8002362:	4770      	bx	lr
 8002364:	20000490 	.word	0x20000490

08002368 <HAL_I2S_RxCpltCallback>:
	rxstate = 2;
 8002368:	4b01      	ldr	r3, [pc, #4]	; (8002370 <HAL_I2S_RxCpltCallback+0x8>)
 800236a:	2202      	movs	r2, #2
 800236c:	70da      	strb	r2, [r3, #3]
}
 800236e:	4770      	bx	lr
 8002370:	20000490 	.word	0x20000490

08002374 <SystemClock_Config>:
{
 8002374:	b570      	push	{r4, r5, r6, lr}
 8002376:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002378:	2230      	movs	r2, #48	; 0x30
 800237a:	2100      	movs	r1, #0
 800237c:	eb0d 0002 	add.w	r0, sp, r2
 8002380:	f002 f9ac 	bl	80046dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002384:	2400      	movs	r4, #0
 8002386:	9407      	str	r4, [sp, #28]
 8002388:	9408      	str	r4, [sp, #32]
 800238a:	9409      	str	r4, [sp, #36]	; 0x24
 800238c:	940a      	str	r4, [sp, #40]	; 0x28
 800238e:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002390:	9403      	str	r4, [sp, #12]
 8002392:	9404      	str	r4, [sp, #16]
 8002394:	9405      	str	r4, [sp, #20]
 8002396:	9406      	str	r4, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	9401      	str	r4, [sp, #4]
 800239a:	4b20      	ldr	r3, [pc, #128]	; (800241c <SystemClock_Config+0xa8>)
 800239c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800239e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
 80023a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023ae:	9402      	str	r4, [sp, #8]
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <SystemClock_Config+0xac>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c0:	9302      	str	r3, [sp, #8]
 80023c2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023c4:	2601      	movs	r6, #1
 80023c6:	960c      	str	r6, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023cc:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ce:	2502      	movs	r5, #2
 80023d0:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023d6:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80023d8:	2308      	movs	r3, #8
 80023da:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80023dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80023e0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023e2:	9516      	str	r5, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80023e4:	2307      	movs	r3, #7
 80023e6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e8:	a80c      	add	r0, sp, #48	; 0x30
 80023ea:	f7ff fa57 	bl	800189c <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ee:	230f      	movs	r3, #15
 80023f0:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023f2:	9508      	str	r5, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f4:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80023fa:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002400:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002402:	2105      	movs	r1, #5
 8002404:	a807      	add	r0, sp, #28
 8002406:	f7ff fcab 	bl	8001d60 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800240a:	9603      	str	r6, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800240c:	23c0      	movs	r3, #192	; 0xc0
 800240e:	9304      	str	r3, [sp, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002410:	9505      	str	r5, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002412:	a803      	add	r0, sp, #12
 8002414:	f7ff fd54 	bl	8001ec0 <HAL_RCCEx_PeriphCLKConfig>
}
 8002418:	b018      	add	sp, #96	; 0x60
 800241a:	bd70      	pop	{r4, r5, r6, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	40007000 	.word	0x40007000

08002424 <main>:
{
 8002424:	b510      	push	{r4, lr}
  HAL_Init();
 8002426:	f7fe fa7f 	bl	8000928 <HAL_Init>
  SystemClock_Config();
 800242a:	f7ff ffa3 	bl	8002374 <SystemClock_Config>
  MX_GPIO_Init();
 800242e:	f7ff fe2b 	bl	8002088 <MX_GPIO_Init>
  MX_DMA_Init();
 8002432:	f7ff ff07 	bl	8002244 <MX_DMA_Init>
  MX_I2S2_Init();
 8002436:	f7ff ff27 	bl	8002288 <MX_I2S2_Init>
  MX_I2S3_Init();
 800243a:	f7ff ff3f 	bl	80022bc <MX_I2S3_Init>
  MX_CRC_Init();
 800243e:	f7ff ff57 	bl	80022f0 <MX_CRC_Init>
  MX_PDM2PCM_Init();
 8002442:	f000 f887 	bl	8002554 <MX_PDM2PCM_Init>
  HAL_I2S_Transmit_DMA(&hi2s3, &txBuf[0], 64);
 8002446:	2240      	movs	r2, #64	; 0x40
 8002448:	4939      	ldr	r1, [pc, #228]	; (8002530 <main+0x10c>)
 800244a:	483a      	ldr	r0, [pc, #232]	; (8002534 <main+0x110>)
 800244c:	f7fe fed0 	bl	80011f0 <HAL_I2S_Transmit_DMA>
  HAL_I2S_Receive_DMA(&hi2s2, &pdmRxBuf[0],64);
 8002450:	2240      	movs	r2, #64	; 0x40
 8002452:	4939      	ldr	r1, [pc, #228]	; (8002538 <main+0x114>)
 8002454:	4839      	ldr	r0, [pc, #228]	; (800253c <main+0x118>)
 8002456:	f7fe ff39 	bl	80012cc <HAL_I2S_Receive_DMA>
 800245a:	e040      	b.n	80024de <main+0xba>
    	PDM_Filter(&pdmRxBuf[0],&MidBuffer[0], &PDM1_filter_handler);
 800245c:	4a38      	ldr	r2, [pc, #224]	; (8002540 <main+0x11c>)
 800245e:	4939      	ldr	r1, [pc, #228]	; (8002544 <main+0x120>)
 8002460:	4835      	ldr	r0, [pc, #212]	; (8002538 <main+0x114>)
 8002462:	f002 f8b7 	bl	80045d4 <PDM_Filter>
    	for (int i=0; i<16;i++) { FifoWrite(MidBuffer[i]); }
 8002466:	2400      	movs	r4, #0
 8002468:	e005      	b.n	8002476 <main+0x52>
 800246a:	4b36      	ldr	r3, [pc, #216]	; (8002544 <main+0x120>)
 800246c:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 8002470:	f7ff ff50 	bl	8002314 <FifoWrite>
 8002474:	3401      	adds	r4, #1
 8002476:	2c0f      	cmp	r4, #15
 8002478:	ddf7      	ble.n	800246a <main+0x46>
    	if (fifo_w_ptr-fifo_r_ptr > 128) fifo_read_enabled=1;
 800247a:	4a33      	ldr	r2, [pc, #204]	; (8002548 <main+0x124>)
 800247c:	7813      	ldrb	r3, [r2, #0]
 800247e:	7852      	ldrb	r2, [r2, #1]
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	2b80      	cmp	r3, #128	; 0x80
 8002484:	dd02      	ble.n	800248c <main+0x68>
 8002486:	4b30      	ldr	r3, [pc, #192]	; (8002548 <main+0x124>)
 8002488:	2201      	movs	r2, #1
 800248a:	711a      	strb	r2, [r3, #4]
    	rxstate=0;
 800248c:	4b2e      	ldr	r3, [pc, #184]	; (8002548 <main+0x124>)
 800248e:	2200      	movs	r2, #0
 8002490:	70da      	strb	r2, [r3, #3]
 8002492:	e028      	b.n	80024e6 <main+0xc2>
    	PDM_Filter(&pdmRxBuf[64],&MidBuffer[0], &PDM1_filter_handler);
 8002494:	4a2a      	ldr	r2, [pc, #168]	; (8002540 <main+0x11c>)
 8002496:	492b      	ldr	r1, [pc, #172]	; (8002544 <main+0x120>)
 8002498:	482c      	ldr	r0, [pc, #176]	; (800254c <main+0x128>)
 800249a:	f002 f89b 	bl	80045d4 <PDM_Filter>
    	for (int i=0; i<16;i++) { FifoWrite(MidBuffer[i]); }
 800249e:	2400      	movs	r4, #0
 80024a0:	e005      	b.n	80024ae <main+0x8a>
 80024a2:	4b28      	ldr	r3, [pc, #160]	; (8002544 <main+0x120>)
 80024a4:	f833 0014 	ldrh.w	r0, [r3, r4, lsl #1]
 80024a8:	f7ff ff34 	bl	8002314 <FifoWrite>
 80024ac:	3401      	adds	r4, #1
 80024ae:	2c0f      	cmp	r4, #15
 80024b0:	ddf7      	ble.n	80024a2 <main+0x7e>
    	rxstate=0;
 80024b2:	4b25      	ldr	r3, [pc, #148]	; (8002548 <main+0x124>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	70da      	strb	r2, [r3, #3]
 80024b8:	e019      	b.n	80024ee <main+0xca>
				uint16_t data = FifoRead();
 80024ba:	f7ff ff37 	bl	800232c <FifoRead>
				txBuf[i] = data;
 80024be:	4b1c      	ldr	r3, [pc, #112]	; (8002530 <main+0x10c>)
 80024c0:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
				txBuf[i+2] = data;
 80024c4:	1ca2      	adds	r2, r4, #2
 80024c6:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
			for (int i=0; i<64;i=i+4) {
 80024ca:	3404      	adds	r4, #4
 80024cc:	2c3f      	cmp	r4, #63	; 0x3f
 80024ce:	ddf4      	ble.n	80024ba <main+0x96>
    	txstate=0;
 80024d0:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <main+0x124>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	709a      	strb	r2, [r3, #2]
    if (txstate==2) {
 80024d6:	4b1c      	ldr	r3, [pc, #112]	; (8002548 <main+0x124>)
 80024d8:	789b      	ldrb	r3, [r3, #2]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d011      	beq.n	8002502 <main+0xde>
    if (rxstate==1) {
 80024de:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <main+0x124>)
 80024e0:	78db      	ldrb	r3, [r3, #3]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d0ba      	beq.n	800245c <main+0x38>
    if (rxstate==2) {
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <main+0x124>)
 80024e8:	78db      	ldrb	r3, [r3, #3]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d0d2      	beq.n	8002494 <main+0x70>
    if (txstate==1) {
 80024ee:	4b16      	ldr	r3, [pc, #88]	; (8002548 <main+0x124>)
 80024f0:	789b      	ldrb	r3, [r3, #2]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d1ef      	bne.n	80024d6 <main+0xb2>
    	if (fifo_read_enabled==1) {
 80024f6:	4b14      	ldr	r3, [pc, #80]	; (8002548 <main+0x124>)
 80024f8:	791b      	ldrb	r3, [r3, #4]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d1e8      	bne.n	80024d0 <main+0xac>
			for (int i=0; i<64;i=i+4) {
 80024fe:	2400      	movs	r4, #0
 8002500:	e7e4      	b.n	80024cc <main+0xa8>
    	if (fifo_read_enabled==1) {
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <main+0x124>)
 8002504:	791b      	ldrb	r3, [r3, #4]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d00f      	beq.n	800252a <main+0x106>
    	txstate=0;
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <main+0x124>)
 800250c:	2200      	movs	r2, #0
 800250e:	709a      	strb	r2, [r3, #2]
 8002510:	e7e5      	b.n	80024de <main+0xba>
				uint16_t data = FifoRead();
 8002512:	f7ff ff0b 	bl	800232c <FifoRead>
				txBuf[i] = data;
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <main+0x10c>)
 8002518:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
				txBuf[i+2] = data;
 800251c:	1ca2      	adds	r2, r4, #2
 800251e:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
			for (int i=64; i<128;i=i+4) {
 8002522:	3404      	adds	r4, #4
 8002524:	2c7f      	cmp	r4, #127	; 0x7f
 8002526:	ddf4      	ble.n	8002512 <main+0xee>
 8002528:	e7ef      	b.n	800250a <main+0xe6>
 800252a:	2440      	movs	r4, #64	; 0x40
 800252c:	e7fa      	b.n	8002524 <main+0x100>
 800252e:	bf00      	nop
 8002530:	20000504 	.word	0x20000504
 8002534:	200007cc 	.word	0x200007cc
 8002538:	20000684 	.word	0x20000684
 800253c:	20000784 	.word	0x20000784
 8002540:	20000a1c 	.word	0x20000a1c
 8002544:	20000664 	.word	0x20000664
 8002548:	20000490 	.word	0x20000490
 800254c:	20000704 	.word	0x20000704

08002550 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002550:	4770      	bx	lr
	...

08002554 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8002554:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /** 
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8002556:	4c0b      	ldr	r4, [pc, #44]	; (8002584 <MX_PDM2PCM_Init+0x30>)
 8002558:	2300      	movs	r3, #0
 800255a:	8023      	strh	r3, [r4, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800255c:	2301      	movs	r3, #1
 800255e:	8063      	strh	r3, [r4, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 8002560:	4a09      	ldr	r2, [pc, #36]	; (8002588 <MX_PDM2PCM_Init+0x34>)
 8002562:	6062      	str	r2, [r4, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8002564:	8123      	strh	r3, [r4, #8]
  PDM1_filter_handler.out_ptr_channels = 1; 
 8002566:	8163      	strh	r3, [r4, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8002568:	4620      	mov	r0, r4
 800256a:	f001 feb7 	bl	80042dc <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800256e:	4907      	ldr	r1, [pc, #28]	; (800258c <MX_PDM2PCM_Init+0x38>)
 8002570:	2302      	movs	r3, #2
 8002572:	800b      	strh	r3, [r1, #0]
  PDM1_filter_config.output_samples_number = 16;
 8002574:	2310      	movs	r3, #16
 8002576:	804b      	strh	r3, [r1, #2]
  PDM1_filter_config.mic_gain = 24;
 8002578:	2318      	movs	r3, #24
 800257a:	808b      	strh	r3, [r1, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800257c:	4620      	mov	r0, r4
 800257e:	f001 ff37 	bl	80043f0 <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8002582:	bd10      	pop	{r4, pc}
 8002584:	20000a1c 	.word	0x20000a1c
 8002588:	7d70a3d6 	.word	0x7d70a3d6
 800258c:	20000a14 	.word	0x20000a14

08002590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002590:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002592:	2100      	movs	r1, #0
 8002594:	9100      	str	r1, [sp, #0]
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <HAL_MspInit+0x34>)
 8002598:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800259a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800259e:	645a      	str	r2, [r3, #68]	; 0x44
 80025a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025a2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80025a6:	9200      	str	r2, [sp, #0]
 80025a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	9101      	str	r1, [sp, #4]
 80025ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	9301      	str	r3, [sp, #4]
 80025bc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025be:	b002      	add	sp, #8
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 80025c8:	6802      	ldr	r2, [r0, #0]
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_CRC_MspInit+0x28>)
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d000      	beq.n	80025d2 <HAL_CRC_MspInit+0xa>
 80025d0:	4770      	bx	lr
{
 80025d2:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80025d4:	2300      	movs	r3, #0
 80025d6:	9301      	str	r3, [sp, #4]
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_CRC_MspInit+0x2c>)
 80025da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80025e0:	631a      	str	r2, [r3, #48]	; 0x30
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e8:	9301      	str	r3, [sp, #4]
 80025ea:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80025ec:	b002      	add	sp, #8
 80025ee:	4770      	bx	lr
 80025f0:	40023000 	.word	0x40023000
 80025f4:	40023800 	.word	0x40023800

080025f8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fa:	b08d      	sub	sp, #52	; 0x34
 80025fc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fe:	2300      	movs	r3, #0
 8002600:	9307      	str	r3, [sp, #28]
 8002602:	9308      	str	r3, [sp, #32]
 8002604:	9309      	str	r3, [sp, #36]	; 0x24
 8002606:	930a      	str	r3, [sp, #40]	; 0x28
 8002608:	930b      	str	r3, [sp, #44]	; 0x2c
  if(hi2s->Instance==SPI2)
 800260a:	6803      	ldr	r3, [r0, #0]
 800260c:	4a57      	ldr	r2, [pc, #348]	; (800276c <HAL_I2S_MspInit+0x174>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d004      	beq.n	800261c <HAL_I2S_MspInit+0x24>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hi2s->Instance==SPI3)
 8002612:	4a57      	ldr	r2, [pc, #348]	; (8002770 <HAL_I2S_MspInit+0x178>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d054      	beq.n	80026c2 <HAL_I2S_MspInit+0xca>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002618:	b00d      	add	sp, #52	; 0x34
 800261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800261c:	2500      	movs	r5, #0
 800261e:	9501      	str	r5, [sp, #4]
 8002620:	4b54      	ldr	r3, [pc, #336]	; (8002774 <HAL_I2S_MspInit+0x17c>)
 8002622:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002624:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002628:	641a      	str	r2, [r3, #64]	; 0x40
 800262a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800262c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002630:	9201      	str	r2, [sp, #4]
 8002632:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002634:	9502      	str	r5, [sp, #8]
 8002636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002638:	f042 0204 	orr.w	r2, r2, #4
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
 800263e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002640:	f002 0204 	and.w	r2, r2, #4
 8002644:	9202      	str	r2, [sp, #8]
 8002646:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002648:	9503      	str	r5, [sp, #12]
 800264a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800264c:	f042 0202 	orr.w	r2, r2, #2
 8002650:	631a      	str	r2, [r3, #48]	; 0x30
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	9303      	str	r3, [sp, #12]
 800265a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800265c:	2308      	movs	r3, #8
 800265e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2702      	movs	r7, #2
 8002662:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002664:	2605      	movs	r6, #5
 8002666:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002668:	a907      	add	r1, sp, #28
 800266a:	4843      	ldr	r0, [pc, #268]	; (8002778 <HAL_I2S_MspInit+0x180>)
 800266c:	f7fe fc08 	bl	8000e80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002670:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002674:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267a:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800267c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800267e:	a907      	add	r1, sp, #28
 8002680:	483e      	ldr	r0, [pc, #248]	; (800277c <HAL_I2S_MspInit+0x184>)
 8002682:	f7fe fbfd 	bl	8000e80 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002686:	483e      	ldr	r0, [pc, #248]	; (8002780 <HAL_I2S_MspInit+0x188>)
 8002688:	4b3e      	ldr	r3, [pc, #248]	; (8002784 <HAL_I2S_MspInit+0x18c>)
 800268a:	6003      	str	r3, [r0, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800268c:	6045      	str	r5, [r0, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800268e:	6085      	str	r5, [r0, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002690:	60c5      	str	r5, [r0, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002696:	6103      	str	r3, [r0, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800269c:	6143      	str	r3, [r0, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800269e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a2:	6183      	str	r3, [r0, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80026a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026a8:	61c3      	str	r3, [r0, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026aa:	6205      	str	r5, [r0, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ac:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80026ae:	f7fe fa5d 	bl	8000b6c <HAL_DMA_Init>
 80026b2:	b918      	cbnz	r0, 80026bc <HAL_I2S_MspInit+0xc4>
    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80026b4:	4b32      	ldr	r3, [pc, #200]	; (8002780 <HAL_I2S_MspInit+0x188>)
 80026b6:	63e3      	str	r3, [r4, #60]	; 0x3c
 80026b8:	639c      	str	r4, [r3, #56]	; 0x38
 80026ba:	e7ad      	b.n	8002618 <HAL_I2S_MspInit+0x20>
      Error_Handler();
 80026bc:	f7ff ff48 	bl	8002550 <Error_Handler>
 80026c0:	e7f8      	b.n	80026b4 <HAL_I2S_MspInit+0xbc>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026c2:	2500      	movs	r5, #0
 80026c4:	9504      	str	r5, [sp, #16]
 80026c6:	4b2b      	ldr	r3, [pc, #172]	; (8002774 <HAL_I2S_MspInit+0x17c>)
 80026c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
 80026d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026d2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 80026d6:	9204      	str	r2, [sp, #16]
 80026d8:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	9505      	str	r5, [sp, #20]
 80026dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	631a      	str	r2, [r3, #48]	; 0x30
 80026e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026e6:	f002 0201 	and.w	r2, r2, #1
 80026ea:	9205      	str	r2, [sp, #20]
 80026ec:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ee:	9506      	str	r5, [sp, #24]
 80026f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f2:	f042 0204 	orr.w	r2, r2, #4
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	9306      	str	r3, [sp, #24]
 8002700:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002702:	2310      	movs	r3, #16
 8002704:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2702      	movs	r7, #2
 8002708:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800270a:	2606      	movs	r6, #6
 800270c:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	a907      	add	r1, sp, #28
 8002710:	481d      	ldr	r0, [pc, #116]	; (8002788 <HAL_I2S_MspInit+0x190>)
 8002712:	f7fe fbb5 	bl	8000e80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 8002716:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800271a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	9509      	str	r5, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	950a      	str	r5, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002722:	960b      	str	r6, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002724:	a907      	add	r1, sp, #28
 8002726:	4814      	ldr	r0, [pc, #80]	; (8002778 <HAL_I2S_MspInit+0x180>)
 8002728:	f7fe fbaa 	bl	8000e80 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800272c:	4817      	ldr	r0, [pc, #92]	; (800278c <HAL_I2S_MspInit+0x194>)
 800272e:	4b18      	ldr	r3, [pc, #96]	; (8002790 <HAL_I2S_MspInit+0x198>)
 8002730:	6003      	str	r3, [r0, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002732:	6045      	str	r5, [r0, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002734:	2340      	movs	r3, #64	; 0x40
 8002736:	6083      	str	r3, [r0, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002738:	60c5      	str	r5, [r0, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800273a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800273e:	6103      	str	r3, [r0, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002740:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002744:	6143      	str	r3, [r0, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002746:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800274a:	6183      	str	r3, [r0, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 800274c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002750:	61c3      	str	r3, [r0, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002752:	6205      	str	r5, [r0, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002754:	6245      	str	r5, [r0, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002756:	f7fe fa09 	bl	8000b6c <HAL_DMA_Init>
 800275a:	b918      	cbnz	r0, 8002764 <HAL_I2S_MspInit+0x16c>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <HAL_I2S_MspInit+0x194>)
 800275e:	63a3      	str	r3, [r4, #56]	; 0x38
 8002760:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002762:	e759      	b.n	8002618 <HAL_I2S_MspInit+0x20>
      Error_Handler();
 8002764:	f7ff fef4 	bl	8002550 <Error_Handler>
 8002768:	e7f8      	b.n	800275c <HAL_I2S_MspInit+0x164>
 800276a:	bf00      	nop
 800276c:	40003800 	.word	0x40003800
 8002770:	40003c00 	.word	0x40003c00
 8002774:	40023800 	.word	0x40023800
 8002778:	40020800 	.word	0x40020800
 800277c:	40020400 	.word	0x40020400
 8002780:	200004a4 	.word	0x200004a4
 8002784:	40026058 	.word	0x40026058
 8002788:	40020000 	.word	0x40020000
 800278c:	20000604 	.word	0x20000604
 8002790:	40026088 	.word	0x40026088

08002794 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002794:	4770      	bx	lr

08002796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002796:	e7fe      	b.n	8002796 <HardFault_Handler>

08002798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002798:	e7fe      	b.n	8002798 <MemManage_Handler>

0800279a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279a:	e7fe      	b.n	800279a <BusFault_Handler>

0800279c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800279c:	e7fe      	b.n	800279c <UsageFault_Handler>

0800279e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800279e:	4770      	bx	lr

080027a0 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a0:	4770      	bx	lr

080027a2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027a2:	4770      	bx	lr

080027a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027a4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027a6:	f7fe f8d9 	bl	800095c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027aa:	bd08      	pop	{r3, pc}

080027ac <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80027ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80027ae:	4802      	ldr	r0, [pc, #8]	; (80027b8 <DMA1_Stream3_IRQHandler+0xc>)
 80027b0:	f7fe fa78 	bl	8000ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80027b4:	bd08      	pop	{r3, pc}
 80027b6:	bf00      	nop
 80027b8:	200004a4 	.word	0x200004a4

080027bc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80027bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80027be:	4802      	ldr	r0, [pc, #8]	; (80027c8 <DMA1_Stream5_IRQHandler+0xc>)
 80027c0:	f7fe fa70 	bl	8000ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80027c4:	bd08      	pop	{r3, pc}
 80027c6:	bf00      	nop
 80027c8:	20000604 	.word	0x20000604

080027cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <SystemInit+0x18>)
 80027ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027d2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80027d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027de:	609a      	str	r2, [r3, #8]
#endif
}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002820 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027ee:	e003      	b.n	80027f8 <LoopCopyDataInit>

080027f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027f6:	3104      	adds	r1, #4

080027f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027f8:	480b      	ldr	r0, [pc, #44]	; (8002828 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002800:	d3f6      	bcc.n	80027f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002804:	e002      	b.n	800280c <LoopFillZerobss>

08002806 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002806:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002808:	f842 3b04 	str.w	r3, [r2], #4

0800280c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800280e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002810:	d3f9      	bcc.n	8002806 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002812:	f7ff ffdb 	bl	80027cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002816:	f001 ff3d 	bl	8004694 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281a:	f7ff fe03 	bl	8002424 <main>
  bx  lr    
 800281e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002820:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002824:	080051ec 	.word	0x080051ec
  ldr  r0, =_sdata
 8002828:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800282c:	20000474 	.word	0x20000474
  ldr  r2, =_sbss
 8002830:	20000474 	.word	0x20000474
  ldr  r3, = _ebss
 8002834:	20000a68 	.word	0x20000a68

08002838 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002838:	e7fe      	b.n	8002838 <ADC_IRQHandler>
	...

0800283c <D16_GENERIC>:
 800283c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002840:	b089      	sub	sp, #36	; 0x24
 8002842:	68d4      	ldr	r4, [r2, #12]
 8002844:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8002846:	6993      	ldr	r3, [r2, #24]
 8002848:	9407      	str	r4, [sp, #28]
 800284a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800284c:	9306      	str	r3, [sp, #24]
 800284e:	9402      	str	r4, [sp, #8]
 8002850:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8002854:	f8d2 b014 	ldr.w	fp, [r2, #20]
 8002858:	69d3      	ldr	r3, [r2, #28]
 800285a:	6896      	ldr	r6, [r2, #8]
 800285c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800285e:	9103      	str	r1, [sp, #12]
 8002860:	2d00      	cmp	r5, #0
 8002862:	d066      	beq.n	8002932 <D16_GENERIC+0xf6>
 8002864:	f004 0510 	and.w	r5, r4, #16
 8002868:	f004 0420 	and.w	r4, r4, #32
 800286c:	9504      	str	r5, [sp, #16]
 800286e:	4938      	ldr	r1, [pc, #224]	; (8002950 <D16_GENERIC+0x114>)
 8002870:	9405      	str	r4, [sp, #20]
 8002872:	f04f 0e00 	mov.w	lr, #0
 8002876:	4635      	mov	r5, r6
 8002878:	e04f      	b.n	800291a <D16_GENERIC+0xde>
 800287a:	5d87      	ldrb	r7, [r0, r6]
 800287c:	7804      	ldrb	r4, [r0, #0]
 800287e:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8002882:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8002886:	b2e6      	uxtb	r6, r4
 8002888:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800288c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8002890:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8002894:	4433      	add	r3, r6
 8002896:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800289a:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800289e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028a2:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80028a6:	0aa3      	lsrs	r3, r4, #10
 80028a8:	4c2a      	ldr	r4, [pc, #168]	; (8002954 <D16_GENERIC+0x118>)
 80028aa:	fb26 5404 	smlad	r4, r6, r4, r5
 80028ae:	4d2a      	ldr	r5, [pc, #168]	; (8002958 <D16_GENERIC+0x11c>)
 80028b0:	fb26 f505 	smuad	r5, r6, r5
 80028b4:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 80028b8:	eb04 080a 	add.w	r8, r4, sl
 80028bc:	eba8 080b 	sub.w	r8, r8, fp
 80028c0:	4646      	mov	r6, r8
 80028c2:	17f7      	asrs	r7, r6, #31
 80028c4:	e9cd 6700 	strd	r6, r7, [sp]
 80028c8:	9e04      	ldr	r6, [sp, #16]
 80028ca:	f10e 0c01 	add.w	ip, lr, #1
 80028ce:	b16e      	cbz	r6, 80028ec <D16_GENERIC+0xb0>
 80028d0:	6a16      	ldr	r6, [r2, #32]
 80028d2:	9f01      	ldr	r7, [sp, #4]
 80028d4:	fba8 8906 	umull	r8, r9, r8, r6
 80028d8:	fb06 9907 	mla	r9, r6, r7, r9
 80028dc:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80028e0:	f149 0900 	adc.w	r9, r9, #0
 80028e4:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80028e8:	46a3      	mov	fp, r4
 80028ea:	4654      	mov	r4, sl
 80028ec:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80028ee:	9f02      	ldr	r7, [sp, #8]
 80028f0:	0424      	lsls	r4, r4, #16
 80028f2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80028f6:	f04f 0900 	mov.w	r9, #0
 80028fa:	fb0e fe06 	mul.w	lr, lr, r6
 80028fe:	fbc7 8904 	smlal	r8, r9, r7, r4
 8002902:	9e03      	ldr	r6, [sp, #12]
 8002904:	464f      	mov	r7, r9
 8002906:	10bc      	asrs	r4, r7, #2
 8002908:	f304 040f 	ssat	r4, #16, r4
 800290c:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8002910:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8002912:	fa1f fe8c 	uxth.w	lr, ip
 8002916:	4574      	cmp	r4, lr
 8002918:	d90a      	bls.n	8002930 <D16_GENERIC+0xf4>
 800291a:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800291c:	2c01      	cmp	r4, #1
 800291e:	b2e6      	uxtb	r6, r4
 8002920:	d1ab      	bne.n	800287a <D16_GENERIC+0x3e>
 8002922:	9e05      	ldr	r6, [sp, #20]
 8002924:	f850 4b02 	ldr.w	r4, [r0], #2
 8002928:	2e00      	cmp	r6, #0
 800292a:	d0ac      	beq.n	8002886 <D16_GENERIC+0x4a>
 800292c:	ba64      	rev16	r4, r4
 800292e:	e7aa      	b.n	8002886 <D16_GENERIC+0x4a>
 8002930:	462e      	mov	r6, r5
 8002932:	9907      	ldr	r1, [sp, #28]
 8002934:	61d3      	str	r3, [r2, #28]
 8002936:	9b06      	ldr	r3, [sp, #24]
 8002938:	6096      	str	r6, [r2, #8]
 800293a:	2000      	movs	r0, #0
 800293c:	60d1      	str	r1, [r2, #12]
 800293e:	f8c2 a010 	str.w	sl, [r2, #16]
 8002942:	f8c2 b014 	str.w	fp, [r2, #20]
 8002946:	6193      	str	r3, [r2, #24]
 8002948:	b009      	add	sp, #36	; 0x24
 800294a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800294e:	bf00      	nop
 8002950:	2000000c 	.word	0x2000000c
 8002954:	00030001 	.word	0x00030001
 8002958:	00010003 	.word	0x00010003

0800295c <D24_GENERIC>:
 800295c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002960:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 8002962:	6993      	ldr	r3, [r2, #24]
 8002964:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8002966:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800296a:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800296e:	6894      	ldr	r4, [r2, #8]
 8002970:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8002974:	b089      	sub	sp, #36	; 0x24
 8002976:	9307      	str	r3, [sp, #28]
 8002978:	9503      	str	r5, [sp, #12]
 800297a:	69d3      	ldr	r3, [r2, #28]
 800297c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800297e:	9104      	str	r1, [sp, #16]
 8002980:	2e00      	cmp	r6, #0
 8002982:	f000 8096 	beq.w	8002ab2 <D24_GENERIC+0x156>
 8002986:	f005 0610 	and.w	r6, r5, #16
 800298a:	f005 0520 	and.w	r5, r5, #32
 800298e:	4954      	ldr	r1, [pc, #336]	; (8002ae0 <D24_GENERIC+0x184>)
 8002990:	9605      	str	r6, [sp, #20]
 8002992:	9506      	str	r5, [sp, #24]
 8002994:	f04f 0e00 	mov.w	lr, #0
 8002998:	f8cd 9008 	str.w	r9, [sp, #8]
 800299c:	e06a      	b.n	8002a74 <D24_GENERIC+0x118>
 800299e:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80029a2:	f810 8007 	ldrb.w	r8, [r0, r7]
 80029a6:	f890 c000 	ldrb.w	ip, [r0]
 80029aa:	042d      	lsls	r5, r5, #16
 80029ac:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80029b0:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80029b4:	44ac      	add	ip, r5
 80029b6:	4438      	add	r0, r7
 80029b8:	fa5f f68c 	uxtb.w	r6, ip
 80029bc:	f3cc 2507 	ubfx	r5, ip, #8, #8
 80029c0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80029c4:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 80029c8:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80029cc:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80029d0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80029d4:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 80029d8:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80029dc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80029e0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80029e4:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80029e8:	4d3e      	ldr	r5, [pc, #248]	; (8002ae4 <D24_GENERIC+0x188>)
 80029ea:	fb26 b705 	smlad	r7, r6, r5, fp
 80029ee:	4d3e      	ldr	r5, [pc, #248]	; (8002ae8 <D24_GENERIC+0x18c>)
 80029f0:	fb26 4b05 	smlad	fp, r6, r5, r4
 80029f4:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80029f8:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80029fc:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8002a00:	2401      	movs	r4, #1
 8002a02:	fb26 f604 	smuad	r6, r6, r4
 8002a06:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8002a0a:	9f02      	ldr	r7, [sp, #8]
 8002a0c:	eb0e 0c04 	add.w	ip, lr, r4
 8002a10:	eb08 0406 	add.w	r4, r8, r6
 8002a14:	eb05 060a 	add.w	r6, r5, sl
 8002a18:	1bf6      	subs	r6, r6, r7
 8002a1a:	4637      	mov	r7, r6
 8002a1c:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8002a20:	e9cd 7800 	strd	r7, r8, [sp]
 8002a24:	9f05      	ldr	r7, [sp, #20]
 8002a26:	b177      	cbz	r7, 8002a46 <D24_GENERIC+0xea>
 8002a28:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8002a2c:	9502      	str	r5, [sp, #8]
 8002a2e:	fba6 9a08 	umull	r9, sl, r6, r8
 8002a32:	9e01      	ldr	r6, [sp, #4]
 8002a34:	fb08 aa06 	mla	sl, r8, r6, sl
 8002a38:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8002a3c:	f14a 0700 	adc.w	r7, sl, #0
 8002a40:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8002a44:	4655      	mov	r5, sl
 8002a46:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8002a48:	9f03      	ldr	r7, [sp, #12]
 8002a4a:	03ad      	lsls	r5, r5, #14
 8002a4c:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002a50:	f04f 0900 	mov.w	r9, #0
 8002a54:	fb0e fe06 	mul.w	lr, lr, r6
 8002a58:	fbc7 8905 	smlal	r8, r9, r7, r5
 8002a5c:	9e04      	ldr	r6, [sp, #16]
 8002a5e:	464f      	mov	r7, r9
 8002a60:	10bd      	asrs	r5, r7, #2
 8002a62:	f305 050f 	ssat	r5, #16, r5
 8002a66:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 8002a6a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8002a6c:	fa1f fe8c 	uxth.w	lr, ip
 8002a70:	4575      	cmp	r5, lr
 8002a72:	d91c      	bls.n	8002aae <D24_GENERIC+0x152>
 8002a74:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8002a76:	b2ef      	uxtb	r7, r5
 8002a78:	2d01      	cmp	r5, #1
 8002a7a:	b23e      	sxth	r6, r7
 8002a7c:	d18f      	bne.n	800299e <D24_GENERIC+0x42>
 8002a7e:	9d06      	ldr	r5, [sp, #24]
 8002a80:	b15d      	cbz	r5, 8002a9a <D24_GENERIC+0x13e>
 8002a82:	f01e 0f01 	tst.w	lr, #1
 8002a86:	d122      	bne.n	8002ace <D24_GENERIC+0x172>
 8002a88:	7805      	ldrb	r5, [r0, #0]
 8002a8a:	78c7      	ldrb	r7, [r0, #3]
 8002a8c:	7846      	ldrb	r6, [r0, #1]
 8002a8e:	022d      	lsls	r5, r5, #8
 8002a90:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8002a94:	44b4      	add	ip, r6
 8002a96:	3002      	adds	r0, #2
 8002a98:	e78e      	b.n	80029b8 <D24_GENERIC+0x5c>
 8002a9a:	7846      	ldrb	r6, [r0, #1]
 8002a9c:	f890 c002 	ldrb.w	ip, [r0, #2]
 8002aa0:	f810 5b03 	ldrb.w	r5, [r0], #3
 8002aa4:	0236      	lsls	r6, r6, #8
 8002aa6:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8002aaa:	44ac      	add	ip, r5
 8002aac:	e784      	b.n	80029b8 <D24_GENERIC+0x5c>
 8002aae:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002ab2:	61d3      	str	r3, [r2, #28]
 8002ab4:	9b07      	ldr	r3, [sp, #28]
 8002ab6:	6094      	str	r4, [r2, #8]
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f8c2 b00c 	str.w	fp, [r2, #12]
 8002abe:	f8c2 a010 	str.w	sl, [r2, #16]
 8002ac2:	f8c2 9014 	str.w	r9, [r2, #20]
 8002ac6:	6193      	str	r3, [r2, #24]
 8002ac8:	b009      	add	sp, #36	; 0x24
 8002aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ace:	78c5      	ldrb	r5, [r0, #3]
 8002ad0:	7887      	ldrb	r7, [r0, #2]
 8002ad2:	f810 6b04 	ldrb.w	r6, [r0], #4
 8002ad6:	022d      	lsls	r5, r5, #8
 8002ad8:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 8002adc:	44b4      	add	ip, r6
 8002ade:	e76b      	b.n	80029b8 <D24_GENERIC+0x5c>
 8002ae0:	2000000c 	.word	0x2000000c
 8002ae4:	00030001 	.word	0x00030001
 8002ae8:	00060007 	.word	0x00060007

08002aec <D32_GENERIC>:
 8002aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002af0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8002af2:	6993      	ldr	r3, [r2, #24]
 8002af4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8002af6:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8002afa:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8002afe:	69d6      	ldr	r6, [r2, #28]
 8002b00:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8002b04:	b089      	sub	sp, #36	; 0x24
 8002b06:	9307      	str	r3, [sp, #28]
 8002b08:	9403      	str	r4, [sp, #12]
 8002b0a:	6893      	ldr	r3, [r2, #8]
 8002b0c:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8002b0e:	9104      	str	r1, [sp, #16]
 8002b10:	2d00      	cmp	r5, #0
 8002b12:	f000 809f 	beq.w	8002c54 <D32_GENERIC+0x168>
 8002b16:	f004 0510 	and.w	r5, r4, #16
 8002b1a:	f004 0420 	and.w	r4, r4, #32
 8002b1e:	9505      	str	r5, [sp, #20]
 8002b20:	4953      	ldr	r1, [pc, #332]	; (8002c70 <D32_GENERIC+0x184>)
 8002b22:	9406      	str	r4, [sp, #24]
 8002b24:	f04f 0c00 	mov.w	ip, #0
 8002b28:	f8cd 9008 	str.w	r9, [sp, #8]
 8002b2c:	461d      	mov	r5, r3
 8002b2e:	4617      	mov	r7, r2
 8002b30:	e077      	b.n	8002c22 <D32_GENERIC+0x136>
 8002b32:	f818 3003 	ldrb.w	r3, [r8, r3]
 8002b36:	f810 800e 	ldrb.w	r8, [r0, lr]
 8002b3a:	f810 e002 	ldrb.w	lr, [r0, r2]
 8002b3e:	7800      	ldrb	r0, [r0, #0]
 8002b40:	041b      	lsls	r3, r3, #16
 8002b42:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8002b46:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8002b4a:	4403      	add	r3, r0
 8002b4c:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8002b50:	b2dc      	uxtb	r4, r3
 8002b52:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002b56:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8002b5a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8002b5e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002b62:	0e1b      	lsrs	r3, r3, #24
 8002b64:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8002b68:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8002b6c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002b70:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8002b74:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 8002b78:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 8002b7c:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8002b80:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8002b84:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8002b88:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8002b8c:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8002b90:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8002b94:	4b37      	ldr	r3, [pc, #220]	; (8002c74 <D32_GENERIC+0x188>)
 8002b96:	fb22 b403 	smlad	r4, r2, r3, fp
 8002b9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b9e:	fb2e 4803 	smlad	r8, lr, r3, r4
 8002ba2:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <D32_GENERIC+0x18c>)
 8002ba4:	fb22 5503 	smlad	r5, r2, r3, r5
 8002ba8:	4b34      	ldr	r3, [pc, #208]	; (8002c7c <D32_GENERIC+0x190>)
 8002baa:	fb2e 5b03 	smlad	fp, lr, r3, r5
 8002bae:	2301      	movs	r3, #1
 8002bb0:	fb22 f203 	smuad	r2, r2, r3
 8002bb4:	4b32      	ldr	r3, [pc, #200]	; (8002c80 <D32_GENERIC+0x194>)
 8002bb6:	fb2e 2503 	smlad	r5, lr, r3, r2
 8002bba:	9b02      	ldr	r3, [sp, #8]
 8002bbc:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 8002bc0:	eb04 080a 	add.w	r8, r4, sl
 8002bc4:	eba8 0803 	sub.w	r8, r8, r3
 8002bc8:	4642      	mov	r2, r8
 8002bca:	17d3      	asrs	r3, r2, #31
 8002bcc:	e9cd 2300 	strd	r2, r3, [sp]
 8002bd0:	9b05      	ldr	r3, [sp, #20]
 8002bd2:	f10c 0e01 	add.w	lr, ip, #1
 8002bd6:	b16b      	cbz	r3, 8002bf4 <D32_GENERIC+0x108>
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	9b01      	ldr	r3, [sp, #4]
 8002bdc:	9402      	str	r4, [sp, #8]
 8002bde:	fba8 8902 	umull	r8, r9, r8, r2
 8002be2:	fb02 9903 	mla	r9, r2, r3, r9
 8002be6:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8002bea:	f149 0900 	adc.w	r9, r9, #0
 8002bee:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8002bf2:	4654      	mov	r4, sl
 8002bf4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bf6:	9a04      	ldr	r2, [sp, #16]
 8002bf8:	fb0c fc03 	mul.w	ip, ip, r3
 8002bfc:	9b03      	ldr	r3, [sp, #12]
 8002bfe:	0364      	lsls	r4, r4, #13
 8002c00:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002c04:	f04f 0900 	mov.w	r9, #0
 8002c08:	fbc3 8904 	smlal	r8, r9, r3, r4
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	109b      	asrs	r3, r3, #2
 8002c10:	f303 030f 	ssat	r3, #16, r3
 8002c14:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 8002c18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002c1a:	fa1f fc8e 	uxth.w	ip, lr
 8002c1e:	4563      	cmp	r3, ip
 8002c20:	d914      	bls.n	8002c4c <D32_GENERIC+0x160>
 8002c22:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 8002c24:	b2e2      	uxtb	r2, r4
 8002c26:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 8002c2a:	eb00 080e 	add.w	r8, r0, lr
 8002c2e:	4253      	negs	r3, r2
 8002c30:	2c01      	cmp	r4, #1
 8002c32:	eb08 0403 	add.w	r4, r8, r3
 8002c36:	f47f af7c 	bne.w	8002b32 <D32_GENERIC+0x46>
 8002c3a:	1d02      	adds	r2, r0, #4
 8002c3c:	6803      	ldr	r3, [r0, #0]
 8002c3e:	9806      	ldr	r0, [sp, #24]
 8002c40:	b110      	cbz	r0, 8002c48 <D32_GENERIC+0x15c>
 8002c42:	ba5b      	rev16	r3, r3
 8002c44:	4610      	mov	r0, r2
 8002c46:	e783      	b.n	8002b50 <D32_GENERIC+0x64>
 8002c48:	4610      	mov	r0, r2
 8002c4a:	e781      	b.n	8002b50 <D32_GENERIC+0x64>
 8002c4c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8002c50:	462b      	mov	r3, r5
 8002c52:	463a      	mov	r2, r7
 8002c54:	6093      	str	r3, [r2, #8]
 8002c56:	9b07      	ldr	r3, [sp, #28]
 8002c58:	f8c2 b00c 	str.w	fp, [r2, #12]
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	61d6      	str	r6, [r2, #28]
 8002c60:	f8c2 a010 	str.w	sl, [r2, #16]
 8002c64:	f8c2 9014 	str.w	r9, [r2, #20]
 8002c68:	6193      	str	r3, [r2, #24]
 8002c6a:	b009      	add	sp, #36	; 0x24
 8002c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c70:	2000000c 	.word	0x2000000c
 8002c74:	00060003 	.word	0x00060003
 8002c78:	000a000c 	.word	0x000a000c
 8002c7c:	000c000a 	.word	0x000c000a
 8002c80:	00030006 	.word	0x00030006

08002c84 <D48_GENERIC>:
 8002c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c88:	b089      	sub	sp, #36	; 0x24
 8002c8a:	6953      	ldr	r3, [r2, #20]
 8002c8c:	68d4      	ldr	r4, [r2, #12]
 8002c8e:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8002c90:	9302      	str	r3, [sp, #8]
 8002c92:	9400      	str	r4, [sp, #0]
 8002c94:	6993      	ldr	r3, [r2, #24]
 8002c96:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8002c98:	9307      	str	r3, [sp, #28]
 8002c9a:	9403      	str	r4, [sp, #12]
 8002c9c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8002ca0:	69d6      	ldr	r6, [r2, #28]
 8002ca2:	6893      	ldr	r3, [r2, #8]
 8002ca4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8002ca6:	9104      	str	r1, [sp, #16]
 8002ca8:	2d00      	cmp	r5, #0
 8002caa:	f000 80c5 	beq.w	8002e38 <D48_GENERIC+0x1b4>
 8002cae:	f004 0510 	and.w	r5, r4, #16
 8002cb2:	f004 0420 	and.w	r4, r4, #32
 8002cb6:	4967      	ldr	r1, [pc, #412]	; (8002e54 <D48_GENERIC+0x1d0>)
 8002cb8:	9505      	str	r5, [sp, #20]
 8002cba:	9406      	str	r4, [sp, #24]
 8002cbc:	f04f 0c00 	mov.w	ip, #0
 8002cc0:	4657      	mov	r7, sl
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	e09c      	b.n	8002e00 <D48_GENERIC+0x17c>
 8002cc6:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8002cca:	f810 b009 	ldrb.w	fp, [r0, r9]
 8002cce:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8002cd2:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8002cd6:	7800      	ldrb	r0, [r0, #0]
 8002cd8:	0424      	lsls	r4, r4, #16
 8002cda:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8002cde:	f818 4005 	ldrb.w	r4, [r8, r5]
 8002ce2:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8002ce6:	44a8      	add	r8, r5
 8002ce8:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8002cec:	eb0b 0500 	add.w	r5, fp, r0
 8002cf0:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8002cf4:	fa5f f885 	uxtb.w	r8, r5
 8002cf8:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8002cfc:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8002d00:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8002d04:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8002d08:	0e2d      	lsrs	r5, r5, #24
 8002d0a:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8002d0e:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8002d12:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8002d16:	b2e6      	uxtb	r6, r4
 8002d18:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8002d1c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8002d20:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8002d24:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8002d28:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8002d2c:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8002d30:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8002d34:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8002d38:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8002d3c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8002d40:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8002d44:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8002d48:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8002d4c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8002d50:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8002d54:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8002d58:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8002d5c:	4c3e      	ldr	r4, [pc, #248]	; (8002e58 <D48_GENERIC+0x1d4>)
 8002d5e:	9d00      	ldr	r5, [sp, #0]
 8002d60:	fb2a 5404 	smlad	r4, sl, r4, r5
 8002d64:	4d3d      	ldr	r5, [pc, #244]	; (8002e5c <D48_GENERIC+0x1d8>)
 8002d66:	fb28 4405 	smlad	r4, r8, r5, r4
 8002d6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d6e:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8002d72:	4c3b      	ldr	r4, [pc, #236]	; (8002e60 <D48_GENERIC+0x1dc>)
 8002d74:	9b01      	ldr	r3, [sp, #4]
 8002d76:	fb2a 3304 	smlad	r3, sl, r4, r3
 8002d7a:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8002d7e:	fb28 3304 	smlad	r3, r8, r4, r3
 8002d82:	4c38      	ldr	r4, [pc, #224]	; (8002e64 <D48_GENERIC+0x1e0>)
 8002d84:	fb2e 3304 	smlad	r3, lr, r4, r3
 8002d88:	2501      	movs	r5, #1
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	fb2a fa05 	smuad	sl, sl, r5
 8002d90:	4b35      	ldr	r3, [pc, #212]	; (8002e68 <D48_GENERIC+0x1e4>)
 8002d92:	fb28 a803 	smlad	r8, r8, r3, sl
 8002d96:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <D48_GENERIC+0x1e8>)
 8002d98:	fb2e 8303 	smlad	r3, lr, r3, r8
 8002d9c:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8002da0:	9301      	str	r3, [sp, #4]
 8002da2:	9b02      	ldr	r3, [sp, #8]
 8002da4:	eb04 0807 	add.w	r8, r4, r7
 8002da8:	eba8 0803 	sub.w	r8, r8, r3
 8002dac:	9b05      	ldr	r3, [sp, #20]
 8002dae:	4465      	add	r5, ip
 8002db0:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8002db4:	b163      	cbz	r3, 8002dd0 <D48_GENERIC+0x14c>
 8002db6:	6a17      	ldr	r7, [r2, #32]
 8002db8:	9402      	str	r4, [sp, #8]
 8002dba:	fba8 8907 	umull	r8, r9, r8, r7
 8002dbe:	fb07 990b 	mla	r9, r7, fp, r9
 8002dc2:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8002dc6:	f149 0900 	adc.w	r9, r9, #0
 8002dca:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8002dce:	463c      	mov	r4, r7
 8002dd0:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8002dd4:	9b03      	ldr	r3, [sp, #12]
 8002dd6:	02e4      	lsls	r4, r4, #11
 8002dd8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8002ddc:	f04f 0900 	mov.w	r9, #0
 8002de0:	fb0c fc0e 	mul.w	ip, ip, lr
 8002de4:	fbc3 8904 	smlal	r8, r9, r3, r4
 8002de8:	9b04      	ldr	r3, [sp, #16]
 8002dea:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8002dee:	f304 040f 	ssat	r4, #16, r4
 8002df2:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8002df6:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8002df8:	fa1f fc85 	uxth.w	ip, r5
 8002dfc:	4564      	cmp	r4, ip
 8002dfe:	d919      	bls.n	8002e34 <D48_GENERIC+0x1b0>
 8002e00:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8002e02:	fa5f fe84 	uxtb.w	lr, r4
 8002e06:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8002e0a:	f1ce 0500 	rsb	r5, lr, #0
 8002e0e:	eb00 0b09 	add.w	fp, r0, r9
 8002e12:	eb0b 0a05 	add.w	sl, fp, r5
 8002e16:	2c01      	cmp	r4, #1
 8002e18:	eb0a 0809 	add.w	r8, sl, r9
 8002e1c:	f47f af53 	bne.w	8002cc6 <D48_GENERIC+0x42>
 8002e20:	9b06      	ldr	r3, [sp, #24]
 8002e22:	6805      	ldr	r5, [r0, #0]
 8002e24:	6844      	ldr	r4, [r0, #4]
 8002e26:	3006      	adds	r0, #6
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f43f af63 	beq.w	8002cf4 <D48_GENERIC+0x70>
 8002e2e:	ba6d      	rev16	r5, r5
 8002e30:	ba64      	rev16	r4, r4
 8002e32:	e75f      	b.n	8002cf4 <D48_GENERIC+0x70>
 8002e34:	9b01      	ldr	r3, [sp, #4]
 8002e36:	46ba      	mov	sl, r7
 8002e38:	6093      	str	r3, [r2, #8]
 8002e3a:	9b00      	ldr	r3, [sp, #0]
 8002e3c:	60d3      	str	r3, [r2, #12]
 8002e3e:	9b02      	ldr	r3, [sp, #8]
 8002e40:	6153      	str	r3, [r2, #20]
 8002e42:	9b07      	ldr	r3, [sp, #28]
 8002e44:	61d6      	str	r6, [r2, #28]
 8002e46:	2000      	movs	r0, #0
 8002e48:	f8c2 a010 	str.w	sl, [r2, #16]
 8002e4c:	6193      	str	r3, [r2, #24]
 8002e4e:	b009      	add	sp, #36	; 0x24
 8002e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e54:	2000000c 	.word	0x2000000c
 8002e58:	000f000a 	.word	0x000f000a
 8002e5c:	00060003 	.word	0x00060003
 8002e60:	00150019 	.word	0x00150019
 8002e64:	00190015 	.word	0x00190015
 8002e68:	00030006 	.word	0x00030006
 8002e6c:	000a000f 	.word	0x000a000f

08002e70 <D64_GENERIC>:
 8002e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e74:	b089      	sub	sp, #36	; 0x24
 8002e76:	6913      	ldr	r3, [r2, #16]
 8002e78:	6895      	ldr	r5, [r2, #8]
 8002e7a:	9303      	str	r3, [sp, #12]
 8002e7c:	9501      	str	r5, [sp, #4]
 8002e7e:	6953      	ldr	r3, [r2, #20]
 8002e80:	68d5      	ldr	r5, [r2, #12]
 8002e82:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8002e84:	9304      	str	r3, [sp, #16]
 8002e86:	9500      	str	r5, [sp, #0]
 8002e88:	6993      	ldr	r3, [r2, #24]
 8002e8a:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8002e8c:	9307      	str	r3, [sp, #28]
 8002e8e:	9505      	str	r5, [sp, #20]
 8002e90:	69d3      	ldr	r3, [r2, #28]
 8002e92:	9106      	str	r1, [sp, #24]
 8002e94:	2c00      	cmp	r4, #0
 8002e96:	f000 80d9 	beq.w	800304c <D64_GENERIC+0x1dc>
 8002e9a:	6a11      	ldr	r1, [r2, #32]
 8002e9c:	9102      	str	r1, [sp, #8]
 8002e9e:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800308c <D64_GENERIC+0x21c>
 8002ea2:	f04f 0c00 	mov.w	ip, #0
 8002ea6:	4681      	mov	r9, r0
 8002ea8:	e0c1      	b.n	800302e <D64_GENERIC+0x1be>
 8002eaa:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8002eae:	4274      	negs	r4, r6
 8002eb0:	eb09 0708 	add.w	r7, r9, r8
 8002eb4:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8002eb8:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 8002ebc:	5d38      	ldrb	r0, [r7, r4]
 8002ebe:	5d29      	ldrb	r1, [r5, r4]
 8002ec0:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8002ec4:	f819 a008 	ldrb.w	sl, [r9, r8]
 8002ec8:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8002ecc:	f899 7000 	ldrb.w	r7, [r9]
 8002ed0:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 8002ed4:	4425      	add	r5, r4
 8002ed6:	0409      	lsls	r1, r1, #16
 8002ed8:	0400      	lsls	r0, r0, #16
 8002eda:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8002ede:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8002ee2:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 8002ee6:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8002eea:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 8002eee:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8002ef2:	4459      	add	r1, fp
 8002ef4:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 8002ef8:	4438      	add	r0, r7
 8002efa:	b2c5      	uxtb	r5, r0
 8002efc:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8002f00:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 8002f04:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 8002f08:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8002f0c:	0e00      	lsrs	r0, r0, #24
 8002f0e:	eb03 0806 	add.w	r8, r3, r6
 8002f12:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8002f16:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 8002f1a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8002f1e:	b2c8      	uxtb	r0, r1
 8002f20:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8002f24:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8002f28:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8002f2c:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8002f30:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8002f34:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8002f38:	0e09      	lsrs	r1, r1, #24
 8002f3a:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8002f3e:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8002f42:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8002f46:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8002f4a:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8002f4e:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8002f52:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8002f56:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8002f5a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8002f5e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002f62:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8002f66:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8002f6a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8002f6e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8002f72:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8002f76:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8002f7a:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8002f7e:	0a8b      	lsrs	r3, r1, #10
 8002f80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8002f84:	4939      	ldr	r1, [pc, #228]	; (800306c <D64_GENERIC+0x1fc>)
 8002f86:	9c00      	ldr	r4, [sp, #0]
 8002f88:	fb28 4101 	smlad	r1, r8, r1, r4
 8002f8c:	4c38      	ldr	r4, [pc, #224]	; (8003070 <D64_GENERIC+0x200>)
 8002f8e:	fb27 1104 	smlad	r1, r7, r4, r1
 8002f92:	4c38      	ldr	r4, [pc, #224]	; (8003074 <D64_GENERIC+0x204>)
 8002f94:	fb20 1104 	smlad	r1, r0, r4, r1
 8002f98:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8002f9c:	fb2a 1106 	smlad	r1, sl, r6, r1
 8002fa0:	4c35      	ldr	r4, [pc, #212]	; (8003078 <D64_GENERIC+0x208>)
 8002fa2:	9d01      	ldr	r5, [sp, #4]
 8002fa4:	fb28 5404 	smlad	r4, r8, r4, r5
 8002fa8:	4d33      	ldr	r5, [pc, #204]	; (8003078 <D64_GENERIC+0x208>)
 8002faa:	fb2a 4415 	smladx	r4, sl, r5, r4
 8002fae:	4d33      	ldr	r5, [pc, #204]	; (800307c <D64_GENERIC+0x20c>)
 8002fb0:	fb27 4405 	smlad	r4, r7, r5, r4
 8002fb4:	fb20 4415 	smladx	r4, r0, r5, r4
 8002fb8:	2501      	movs	r5, #1
 8002fba:	9400      	str	r4, [sp, #0]
 8002fbc:	fb28 f805 	smuad	r8, r8, r5
 8002fc0:	4c2f      	ldr	r4, [pc, #188]	; (8003080 <D64_GENERIC+0x210>)
 8002fc2:	fb27 8704 	smlad	r7, r7, r4, r8
 8002fc6:	4c2f      	ldr	r4, [pc, #188]	; (8003084 <D64_GENERIC+0x214>)
 8002fc8:	fb20 7004 	smlad	r0, r0, r4, r7
 8002fcc:	4c2e      	ldr	r4, [pc, #184]	; (8003088 <D64_GENERIC+0x218>)
 8002fce:	fb2a 0004 	smlad	r0, sl, r4, r0
 8002fd2:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8002fd6:	9902      	ldr	r1, [sp, #8]
 8002fd8:	9001      	str	r0, [sp, #4]
 8002fda:	b189      	cbz	r1, 8003000 <D64_GENERIC+0x190>
 8002fdc:	9803      	ldr	r0, [sp, #12]
 8002fde:	9c04      	ldr	r4, [sp, #16]
 8002fe0:	9604      	str	r6, [sp, #16]
 8002fe2:	4430      	add	r0, r6
 8002fe4:	1b00      	subs	r0, r0, r4
 8002fe6:	17c5      	asrs	r5, r0, #31
 8002fe8:	460f      	mov	r7, r1
 8002fea:	fba0 0101 	umull	r0, r1, r0, r1
 8002fee:	fb07 1105 	mla	r1, r7, r5, r1
 8002ff2:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8002ff6:	f141 0100 	adc.w	r1, r1, #0
 8002ffa:	0049      	lsls	r1, r1, #1
 8002ffc:	9103      	str	r1, [sp, #12]
 8002ffe:	460e      	mov	r6, r1
 8003000:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8003002:	9905      	ldr	r1, [sp, #20]
 8003004:	9806      	ldr	r0, [sp, #24]
 8003006:	02b6      	lsls	r6, r6, #10
 8003008:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800300c:	f04f 0800 	mov.w	r8, #0
 8003010:	fb0c f404 	mul.w	r4, ip, r4
 8003014:	fbc1 7806 	smlal	r7, r8, r1, r6
 8003018:	4641      	mov	r1, r8
 800301a:	1089      	asrs	r1, r1, #2
 800301c:	f301 010f 	ssat	r1, #16, r1
 8003020:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8003024:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8003026:	f10c 0c01 	add.w	ip, ip, #1
 800302a:	4561      	cmp	r1, ip
 800302c:	dd0e      	ble.n	800304c <D64_GENERIC+0x1dc>
 800302e:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 8003030:	2e01      	cmp	r6, #1
 8003032:	f47f af3a 	bne.w	8002eaa <D64_GENERIC+0x3a>
 8003036:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8003038:	06b4      	lsls	r4, r6, #26
 800303a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800303e:	f109 0908 	add.w	r9, r9, #8
 8003042:	f57f af5a 	bpl.w	8002efa <D64_GENERIC+0x8a>
 8003046:	ba40      	rev16	r0, r0
 8003048:	ba49      	rev16	r1, r1
 800304a:	e756      	b.n	8002efa <D64_GENERIC+0x8a>
 800304c:	61d3      	str	r3, [r2, #28]
 800304e:	9b03      	ldr	r3, [sp, #12]
 8003050:	9901      	ldr	r1, [sp, #4]
 8003052:	6113      	str	r3, [r2, #16]
 8003054:	9b04      	ldr	r3, [sp, #16]
 8003056:	6091      	str	r1, [r2, #8]
 8003058:	6153      	str	r3, [r2, #20]
 800305a:	9900      	ldr	r1, [sp, #0]
 800305c:	9b07      	ldr	r3, [sp, #28]
 800305e:	60d1      	str	r1, [r2, #12]
 8003060:	2000      	movs	r0, #0
 8003062:	6193      	str	r3, [r2, #24]
 8003064:	b009      	add	sp, #36	; 0x24
 8003066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800306a:	bf00      	nop
 800306c:	001c0015 	.word	0x001c0015
 8003070:	000f000a 	.word	0x000f000a
 8003074:	00060003 	.word	0x00060003
 8003078:	0024002a 	.word	0x0024002a
 800307c:	002e0030 	.word	0x002e0030
 8003080:	00030006 	.word	0x00030006
 8003084:	000a000f 	.word	0x000a000f
 8003088:	0015001c 	.word	0x0015001c
 800308c:	2000000c 	.word	0x2000000c

08003090 <D80_GENERIC>:
 8003090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003094:	b08b      	sub	sp, #44	; 0x2c
 8003096:	6914      	ldr	r4, [r2, #16]
 8003098:	9404      	str	r4, [sp, #16]
 800309a:	6954      	ldr	r4, [r2, #20]
 800309c:	9405      	str	r4, [sp, #20]
 800309e:	6994      	ldr	r4, [r2, #24]
 80030a0:	9409      	str	r4, [sp, #36]	; 0x24
 80030a2:	6894      	ldr	r4, [r2, #8]
 80030a4:	9402      	str	r4, [sp, #8]
 80030a6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80030a8:	68d4      	ldr	r4, [r2, #12]
 80030aa:	9401      	str	r4, [sp, #4]
 80030ac:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80030ae:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 80030b2:	9406      	str	r4, [sp, #24]
 80030b4:	9107      	str	r1, [sp, #28]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 810f 	beq.w	80032da <D80_GENERIC+0x24a>
 80030bc:	6a13      	ldr	r3, [r2, #32]
 80030be:	9308      	str	r3, [sp, #32]
 80030c0:	2300      	movs	r3, #0
 80030c2:	9200      	str	r2, [sp, #0]
 80030c4:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800332c <D80_GENERIC+0x29c>
 80030c8:	f8cd b00c 	str.w	fp, [sp, #12]
 80030cc:	461a      	mov	r2, r3
 80030ce:	e0ed      	b.n	80032ac <D80_GENERIC+0x21c>
 80030d0:	fa5f fc8c 	uxtb.w	ip, ip
 80030d4:	fa0f f48c 	sxth.w	r4, ip
 80030d8:	0066      	lsls	r6, r4, #1
 80030da:	eb06 0804 	add.w	r8, r6, r4
 80030de:	f1cc 0500 	rsb	r5, ip, #0
 80030e2:	eb00 0108 	add.w	r1, r0, r8
 80030e6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80030ea:	194b      	adds	r3, r1, r5
 80030ec:	5d49      	ldrb	r1, [r1, r5]
 80030ee:	f810 a008 	ldrb.w	sl, [r0, r8]
 80030f2:	f813 b004 	ldrb.w	fp, [r3, r4]
 80030f6:	f810 c00c 	ldrb.w	ip, [r0, ip]
 80030fa:	f890 8000 	ldrb.w	r8, [r0]
 80030fe:	eb03 0e04 	add.w	lr, r3, r4
 8003102:	eb0e 0705 	add.w	r7, lr, r5
 8003106:	0409      	lsls	r1, r1, #16
 8003108:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800310c:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8003110:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8003114:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8003118:	eb0a 0004 	add.w	r0, sl, r4
 800311c:	041b      	lsls	r3, r3, #16
 800311e:	f81a a004 	ldrb.w	sl, [sl, r4]
 8003122:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8003126:	5d44      	ldrb	r4, [r0, r5]
 8003128:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800312c:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8003130:	4428      	add	r0, r5
 8003132:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 8003136:	4441      	add	r1, r8
 8003138:	4430      	add	r0, r6
 800313a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800313e:	441f      	add	r7, r3
 8003140:	b2cd      	uxtb	r5, r1
 8003142:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003146:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800314a:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800314e:	9b03      	ldr	r3, [sp, #12]
 8003150:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8003154:	0e09      	lsrs	r1, r1, #24
 8003156:	4433      	add	r3, r6
 8003158:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800315c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8003160:	b2fd      	uxtb	r5, r7
 8003162:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 8003166:	469b      	mov	fp, r3
 8003168:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800316c:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8003170:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 8003174:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8003178:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800317c:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8003180:	0e3b      	lsrs	r3, r7, #24
 8003182:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8003186:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800318a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800318e:	fa5f fe84 	uxtb.w	lr, r4
 8003192:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8003196:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800319a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800319e:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80031a2:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 80031a6:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80031aa:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 80031ae:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80031b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80031b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80031ba:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80031be:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80031c2:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80031c6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80031ca:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80031ce:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 80031d2:	f3c4 0109 	ubfx	r1, r4, #0, #10
 80031d6:	0aa3      	lsrs	r3, r4, #10
 80031d8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80031dc:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80031e0:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80031e4:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 80031e8:	9303      	str	r3, [sp, #12]
 80031ea:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 80031ee:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 80031f2:	4b42      	ldr	r3, [pc, #264]	; (80032fc <D80_GENERIC+0x26c>)
 80031f4:	9901      	ldr	r1, [sp, #4]
 80031f6:	fb2b 1303 	smlad	r3, fp, r3, r1
 80031fa:	4941      	ldr	r1, [pc, #260]	; (8003300 <D80_GENERIC+0x270>)
 80031fc:	fb28 3301 	smlad	r3, r8, r1, r3
 8003200:	4940      	ldr	r1, [pc, #256]	; (8003304 <D80_GENERIC+0x274>)
 8003202:	fb2c 3301 	smlad	r3, ip, r1, r3
 8003206:	4940      	ldr	r1, [pc, #256]	; (8003308 <D80_GENERIC+0x278>)
 8003208:	fb27 3301 	smlad	r3, r7, r1, r3
 800320c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003210:	fb2e 3301 	smlad	r3, lr, r1, r3
 8003214:	493d      	ldr	r1, [pc, #244]	; (800330c <D80_GENERIC+0x27c>)
 8003216:	9c02      	ldr	r4, [sp, #8]
 8003218:	fb2b 4401 	smlad	r4, fp, r1, r4
 800321c:	493c      	ldr	r1, [pc, #240]	; (8003310 <D80_GENERIC+0x280>)
 800321e:	fb28 4401 	smlad	r4, r8, r1, r4
 8003222:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8003226:	fb2c 4101 	smlad	r1, ip, r1, r4
 800322a:	4c3a      	ldr	r4, [pc, #232]	; (8003314 <D80_GENERIC+0x284>)
 800322c:	fb27 1104 	smlad	r1, r7, r4, r1
 8003230:	4c39      	ldr	r4, [pc, #228]	; (8003318 <D80_GENERIC+0x288>)
 8003232:	fb2e 1104 	smlad	r1, lr, r4, r1
 8003236:	9101      	str	r1, [sp, #4]
 8003238:	2101      	movs	r1, #1
 800323a:	fb2b fb01 	smuad	fp, fp, r1
 800323e:	4937      	ldr	r1, [pc, #220]	; (800331c <D80_GENERIC+0x28c>)
 8003240:	fb28 b801 	smlad	r8, r8, r1, fp
 8003244:	4d36      	ldr	r5, [pc, #216]	; (8003320 <D80_GENERIC+0x290>)
 8003246:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800324a:	4d36      	ldr	r5, [pc, #216]	; (8003324 <D80_GENERIC+0x294>)
 800324c:	fb27 c705 	smlad	r7, r7, r5, ip
 8003250:	4d35      	ldr	r5, [pc, #212]	; (8003328 <D80_GENERIC+0x298>)
 8003252:	fb2e 7105 	smlad	r1, lr, r5, r7
 8003256:	9102      	str	r1, [sp, #8]
 8003258:	9908      	ldr	r1, [sp, #32]
 800325a:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800325e:	b181      	cbz	r1, 8003282 <D80_GENERIC+0x1f2>
 8003260:	9c04      	ldr	r4, [sp, #16]
 8003262:	9d05      	ldr	r5, [sp, #20]
 8003264:	9305      	str	r3, [sp, #20]
 8003266:	441c      	add	r4, r3
 8003268:	1b64      	subs	r4, r4, r5
 800326a:	17e7      	asrs	r7, r4, #31
 800326c:	fba4 4501 	umull	r4, r5, r4, r1
 8003270:	fb01 5507 	mla	r5, r1, r7, r5
 8003274:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8003278:	f145 0500 	adc.w	r5, r5, #0
 800327c:	0069      	lsls	r1, r5, #1
 800327e:	9104      	str	r1, [sp, #16]
 8003280:	460b      	mov	r3, r1
 8003282:	9e00      	ldr	r6, [sp, #0]
 8003284:	9f06      	ldr	r7, [sp, #24]
 8003286:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 8003288:	025b      	lsls	r3, r3, #9
 800328a:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800328e:	2500      	movs	r5, #0
 8003290:	fb02 f101 	mul.w	r1, r2, r1
 8003294:	fbc7 4503 	smlal	r4, r5, r7, r3
 8003298:	9c07      	ldr	r4, [sp, #28]
 800329a:	10ab      	asrs	r3, r5, #2
 800329c:	f303 030f 	ssat	r3, #16, r3
 80032a0:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 80032a4:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80032a6:	3201      	adds	r2, #1
 80032a8:	4293      	cmp	r3, r2
 80032aa:	dd13      	ble.n	80032d4 <D80_GENERIC+0x244>
 80032ac:	9b00      	ldr	r3, [sp, #0]
 80032ae:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 80032b2:	f1bc 0f01 	cmp.w	ip, #1
 80032b6:	f47f af0b 	bne.w	80030d0 <D80_GENERIC+0x40>
 80032ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032bc:	6884      	ldr	r4, [r0, #8]
 80032be:	069b      	lsls	r3, r3, #26
 80032c0:	e890 0082 	ldmia.w	r0, {r1, r7}
 80032c4:	f100 000a 	add.w	r0, r0, #10
 80032c8:	f57f af3a 	bpl.w	8003140 <D80_GENERIC+0xb0>
 80032cc:	ba49      	rev16	r1, r1
 80032ce:	ba7f      	rev16	r7, r7
 80032d0:	ba64      	rev16	r4, r4
 80032d2:	e735      	b.n	8003140 <D80_GENERIC+0xb0>
 80032d4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80032d8:	4632      	mov	r2, r6
 80032da:	9b02      	ldr	r3, [sp, #8]
 80032dc:	6093      	str	r3, [r2, #8]
 80032de:	9b01      	ldr	r3, [sp, #4]
 80032e0:	60d3      	str	r3, [r2, #12]
 80032e2:	9b04      	ldr	r3, [sp, #16]
 80032e4:	6113      	str	r3, [r2, #16]
 80032e6:	9b05      	ldr	r3, [sp, #20]
 80032e8:	6153      	str	r3, [r2, #20]
 80032ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ec:	f8c2 b01c 	str.w	fp, [r2, #28]
 80032f0:	2000      	movs	r0, #0
 80032f2:	6193      	str	r3, [r2, #24]
 80032f4:	b00b      	add	sp, #44	; 0x2c
 80032f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fa:	bf00      	nop
 80032fc:	002d0024 	.word	0x002d0024
 8003300:	001c0015 	.word	0x001c0015
 8003304:	000f000a 	.word	0x000f000a
 8003308:	00060003 	.word	0x00060003
 800330c:	0037003f 	.word	0x0037003f
 8003310:	00450049 	.word	0x00450049
 8003314:	00490045 	.word	0x00490045
 8003318:	003f0037 	.word	0x003f0037
 800331c:	00030006 	.word	0x00030006
 8003320:	000a000f 	.word	0x000a000f
 8003324:	0015001c 	.word	0x0015001c
 8003328:	0024002d 	.word	0x0024002d
 800332c:	2000000c 	.word	0x2000000c

08003330 <D128_GENERIC>:
 8003330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003334:	b093      	sub	sp, #76	; 0x4c
 8003336:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8003338:	9005      	str	r0, [sp, #20]
 800333a:	4610      	mov	r0, r2
 800333c:	9201      	str	r2, [sp, #4]
 800333e:	6912      	ldr	r2, [r2, #16]
 8003340:	920c      	str	r2, [sp, #48]	; 0x30
 8003342:	4602      	mov	r2, r0
 8003344:	6940      	ldr	r0, [r0, #20]
 8003346:	900d      	str	r0, [sp, #52]	; 0x34
 8003348:	4610      	mov	r0, r2
 800334a:	4614      	mov	r4, r2
 800334c:	6992      	ldr	r2, [r2, #24]
 800334e:	9211      	str	r2, [sp, #68]	; 0x44
 8003350:	69c2      	ldr	r2, [r0, #28]
 8003352:	9202      	str	r2, [sp, #8]
 8003354:	68e2      	ldr	r2, [r4, #12]
 8003356:	6880      	ldr	r0, [r0, #8]
 8003358:	9203      	str	r2, [sp, #12]
 800335a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800335c:	9004      	str	r0, [sp, #16]
 800335e:	920e      	str	r2, [sp, #56]	; 0x38
 8003360:	910f      	str	r1, [sp, #60]	; 0x3c
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 819b 	beq.w	800369e <D128_GENERIC+0x36e>
 8003368:	6a23      	ldr	r3, [r4, #32]
 800336a:	9310      	str	r3, [sp, #64]	; 0x40
 800336c:	2300      	movs	r3, #0
 800336e:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 8003718 <D128_GENERIC+0x3e8>
 8003372:	9306      	str	r3, [sp, #24]
 8003374:	e17a      	b.n	800366c <D128_GENERIC+0x33c>
 8003376:	b2d2      	uxtb	r2, r2
 8003378:	9d05      	ldr	r5, [sp, #20]
 800337a:	b214      	sxth	r4, r2
 800337c:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8003380:	4250      	negs	r0, r2
 8003382:	eb05 010a 	add.w	r1, r5, sl
 8003386:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800338a:	eb01 0800 	add.w	r8, r1, r0
 800338e:	eb0b 0c04 	add.w	ip, fp, r4
 8003392:	eb08 070c 	add.w	r7, r8, ip
 8003396:	183b      	adds	r3, r7, r0
 8003398:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800339c:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 80033a0:	eb0e 0604 	add.w	r6, lr, r4
 80033a4:	9307      	str	r3, [sp, #28]
 80033a6:	1833      	adds	r3, r6, r0
 80033a8:	9305      	str	r3, [sp, #20]
 80033aa:	462b      	mov	r3, r5
 80033ac:	f815 a00a 	ldrb.w	sl, [r5, sl]
 80033b0:	f8cd a020 	str.w	sl, [sp, #32]
 80033b4:	f818 a00c 	ldrb.w	sl, [r8, ip]
 80033b8:	f813 c002 	ldrb.w	ip, [r3, r2]
 80033bc:	f81e 8004 	ldrb.w	r8, [lr, r4]
 80033c0:	5c3a      	ldrb	r2, [r7, r0]
 80033c2:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 80033c6:	781f      	ldrb	r7, [r3, #0]
 80033c8:	9b07      	ldr	r3, [sp, #28]
 80033ca:	9d05      	ldr	r5, [sp, #20]
 80033cc:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 80033d0:	5c09      	ldrb	r1, [r1, r0]
 80033d2:	9709      	str	r7, [sp, #36]	; 0x24
 80033d4:	9307      	str	r3, [sp, #28]
 80033d6:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 80033da:	5c33      	ldrb	r3, [r6, r0]
 80033dc:	0412      	lsls	r2, r2, #16
 80033de:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 80033e2:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 80033e6:	9d08      	ldr	r5, [sp, #32]
 80033e8:	eb06 0a04 	add.w	sl, r6, r4
 80033ec:	0409      	lsls	r1, r1, #16
 80033ee:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 80033f2:	f81a 5000 	ldrb.w	r5, [sl, r0]
 80033f6:	5d36      	ldrb	r6, [r6, r4]
 80033f8:	9c05      	ldr	r4, [sp, #20]
 80033fa:	042d      	lsls	r5, r5, #16
 80033fc:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8003400:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 8003404:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8003408:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800340c:	eb0a 0c00 	add.w	ip, sl, r0
 8003410:	041b      	lsls	r3, r3, #16
 8003412:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8003416:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800341a:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800341e:	9d07      	ldr	r5, [sp, #28]
 8003420:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8003424:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 8003428:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800342a:	4458      	add	r0, fp
 800342c:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8003430:	9005      	str	r0, [sp, #20]
 8003432:	4439      	add	r1, r7
 8003434:	442a      	add	r2, r5
 8003436:	44b2      	add	sl, r6
 8003438:	1918      	adds	r0, r3, r4
 800343a:	b2cb      	uxtb	r3, r1
 800343c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8003440:	9e02      	ldr	r6, [sp, #8]
 8003442:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8003446:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800344a:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800344e:	441e      	add	r6, r3
 8003450:	0e09      	lsrs	r1, r1, #24
 8003452:	4633      	mov	r3, r6
 8003454:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8003458:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800345c:	b2d4      	uxtb	r4, r2
 800345e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8003462:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003466:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800346a:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800346e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8003472:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8003476:	0e12      	lsrs	r2, r2, #24
 8003478:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800347c:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8003480:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8003484:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8003488:	9702      	str	r7, [sp, #8]
 800348a:	b2c2      	uxtb	r2, r0
 800348c:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8003490:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8003494:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8003498:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800349c:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80034a0:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80034a4:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80034a8:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80034ac:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80034b0:	0e00      	lsrs	r0, r0, #24
 80034b2:	fa5f f68a 	uxtb.w	r6, sl
 80034b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ba:	9309      	str	r3, [sp, #36]	; 0x24
 80034bc:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80034c0:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80034c4:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80034c8:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80034cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80034d0:	950a      	str	r5, [sp, #40]	; 0x28
 80034d2:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80034d6:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80034da:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80034de:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80034e2:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 80034e6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80034ea:	920b      	str	r2, [sp, #44]	; 0x2c
 80034ec:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80034f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034f2:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80034f6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80034fa:	9307      	str	r3, [sp, #28]
 80034fc:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8003500:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8003504:	9b02      	ldr	r3, [sp, #8]
 8003506:	f8cd c008 	str.w	ip, [sp, #8]
 800350a:	4694      	mov	ip, r2
 800350c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800350e:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8003512:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8003516:	9a02      	ldr	r2, [sp, #8]
 8003518:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800351c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8003520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8003524:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003526:	f8cd a020 	str.w	sl, [sp, #32]
 800352a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800352e:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8003532:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003536:	9b07      	ldr	r3, [sp, #28]
 8003538:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800353c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8003540:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 8003544:	9a08      	ldr	r2, [sp, #32]
 8003546:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800354a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800354e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8003552:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003556:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800355a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800355e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003562:	0a96      	lsrs	r6, r2, #10
 8003564:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003568:	9602      	str	r6, [sp, #8]
 800356a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800356e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8003572:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8003576:	4e53      	ldr	r6, [pc, #332]	; (80036c4 <D128_GENERIC+0x394>)
 8003578:	9f03      	ldr	r7, [sp, #12]
 800357a:	fb2c 7606 	smlad	r6, ip, r6, r7
 800357e:	4f52      	ldr	r7, [pc, #328]	; (80036c8 <D128_GENERIC+0x398>)
 8003580:	fb2a 6607 	smlad	r6, sl, r7, r6
 8003584:	4f51      	ldr	r7, [pc, #324]	; (80036cc <D128_GENERIC+0x39c>)
 8003586:	fb21 6607 	smlad	r6, r1, r7, r6
 800358a:	4f51      	ldr	r7, [pc, #324]	; (80036d0 <D128_GENERIC+0x3a0>)
 800358c:	fb24 6607 	smlad	r6, r4, r7, r6
 8003590:	4f50      	ldr	r7, [pc, #320]	; (80036d4 <D128_GENERIC+0x3a4>)
 8003592:	fb28 6607 	smlad	r6, r8, r7, r6
 8003596:	4f50      	ldr	r7, [pc, #320]	; (80036d8 <D128_GENERIC+0x3a8>)
 8003598:	fb20 6607 	smlad	r6, r0, r7, r6
 800359c:	4f4f      	ldr	r7, [pc, #316]	; (80036dc <D128_GENERIC+0x3ac>)
 800359e:	fb23 6607 	smlad	r6, r3, r7, r6
 80035a2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80035a6:	fb25 6607 	smlad	r6, r5, r7, r6
 80035aa:	4f4d      	ldr	r7, [pc, #308]	; (80036e0 <D128_GENERIC+0x3b0>)
 80035ac:	9a04      	ldr	r2, [sp, #16]
 80035ae:	fb2c 2e07 	smlad	lr, ip, r7, r2
 80035b2:	4a4c      	ldr	r2, [pc, #304]	; (80036e4 <D128_GENERIC+0x3b4>)
 80035b4:	fb2a ee02 	smlad	lr, sl, r2, lr
 80035b8:	4f4b      	ldr	r7, [pc, #300]	; (80036e8 <D128_GENERIC+0x3b8>)
 80035ba:	fb21 ee07 	smlad	lr, r1, r7, lr
 80035be:	4f4b      	ldr	r7, [pc, #300]	; (80036ec <D128_GENERIC+0x3bc>)
 80035c0:	fb24 ee07 	smlad	lr, r4, r7, lr
 80035c4:	4f4a      	ldr	r7, [pc, #296]	; (80036f0 <D128_GENERIC+0x3c0>)
 80035c6:	fb28 ee07 	smlad	lr, r8, r7, lr
 80035ca:	4f4a      	ldr	r7, [pc, #296]	; (80036f4 <D128_GENERIC+0x3c4>)
 80035cc:	fb20 ee07 	smlad	lr, r0, r7, lr
 80035d0:	4f49      	ldr	r7, [pc, #292]	; (80036f8 <D128_GENERIC+0x3c8>)
 80035d2:	fb23 e707 	smlad	r7, r3, r7, lr
 80035d6:	f8df e144 	ldr.w	lr, [pc, #324]	; 800371c <D128_GENERIC+0x3ec>
 80035da:	fb25 720e 	smlad	r2, r5, lr, r7
 80035de:	f04f 0b01 	mov.w	fp, #1
 80035e2:	9203      	str	r2, [sp, #12]
 80035e4:	fb2c fb0b 	smuad	fp, ip, fp
 80035e8:	4f44      	ldr	r7, [pc, #272]	; (80036fc <D128_GENERIC+0x3cc>)
 80035ea:	fb2a ba07 	smlad	sl, sl, r7, fp
 80035ee:	4f44      	ldr	r7, [pc, #272]	; (8003700 <D128_GENERIC+0x3d0>)
 80035f0:	fb21 aa07 	smlad	sl, r1, r7, sl
 80035f4:	4f43      	ldr	r7, [pc, #268]	; (8003704 <D128_GENERIC+0x3d4>)
 80035f6:	fb24 aa07 	smlad	sl, r4, r7, sl
 80035fa:	4f43      	ldr	r7, [pc, #268]	; (8003708 <D128_GENERIC+0x3d8>)
 80035fc:	fb28 a707 	smlad	r7, r8, r7, sl
 8003600:	4a42      	ldr	r2, [pc, #264]	; (800370c <D128_GENERIC+0x3dc>)
 8003602:	fb20 7702 	smlad	r7, r0, r2, r7
 8003606:	4a42      	ldr	r2, [pc, #264]	; (8003710 <D128_GENERIC+0x3e0>)
 8003608:	fb23 7702 	smlad	r7, r3, r2, r7
 800360c:	4b41      	ldr	r3, [pc, #260]	; (8003714 <D128_GENERIC+0x3e4>)
 800360e:	fb25 7303 	smlad	r3, r5, r3, r7
 8003612:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003614:	9304      	str	r3, [sp, #16]
 8003616:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800361a:	b185      	cbz	r5, 800363e <D128_GENERIC+0x30e>
 800361c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800361e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003620:	960d      	str	r6, [sp, #52]	; 0x34
 8003622:	4432      	add	r2, r6
 8003624:	1a52      	subs	r2, r2, r1
 8003626:	17d1      	asrs	r1, r2, #31
 8003628:	fba2 2305 	umull	r2, r3, r2, r5
 800362c:	fb05 3301 	mla	r3, r5, r1, r3
 8003630:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8003634:	f143 0300 	adc.w	r3, r3, #0
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	930c      	str	r3, [sp, #48]	; 0x30
 800363c:	461e      	mov	r6, r3
 800363e:	9801      	ldr	r0, [sp, #4]
 8003640:	9c06      	ldr	r4, [sp, #24]
 8003642:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8003644:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8003646:	01f6      	lsls	r6, r6, #7
 8003648:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800364c:	2300      	movs	r3, #0
 800364e:	fbc5 2306 	smlal	r2, r3, r5, r6
 8003652:	fb04 f101 	mul.w	r1, r4, r1
 8003656:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003658:	109b      	asrs	r3, r3, #2
 800365a:	f303 030f 	ssat	r3, #16, r3
 800365e:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8003662:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8003664:	1c62      	adds	r2, r4, #1
 8003666:	4293      	cmp	r3, r2
 8003668:	9206      	str	r2, [sp, #24]
 800366a:	dd18      	ble.n	800369e <D128_GENERIC+0x36e>
 800366c:	9b01      	ldr	r3, [sp, #4]
 800366e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8003670:	2a01      	cmp	r2, #1
 8003672:	f47f ae80 	bne.w	8003376 <D128_GENERIC+0x46>
 8003676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003678:	9d05      	ldr	r5, [sp, #20]
 800367a:	069b      	lsls	r3, r3, #26
 800367c:	6829      	ldr	r1, [r5, #0]
 800367e:	686a      	ldr	r2, [r5, #4]
 8003680:	68a8      	ldr	r0, [r5, #8]
 8003682:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8003686:	f105 0410 	add.w	r4, r5, #16
 800368a:	d506      	bpl.n	800369a <D128_GENERIC+0x36a>
 800368c:	ba49      	rev16	r1, r1
 800368e:	ba52      	rev16	r2, r2
 8003690:	ba40      	rev16	r0, r0
 8003692:	fa9a fa9a 	rev16.w	sl, sl
 8003696:	9405      	str	r4, [sp, #20]
 8003698:	e6cf      	b.n	800343a <D128_GENERIC+0x10a>
 800369a:	9405      	str	r4, [sp, #20]
 800369c:	e6cd      	b.n	800343a <D128_GENERIC+0x10a>
 800369e:	9a01      	ldr	r2, [sp, #4]
 80036a0:	9904      	ldr	r1, [sp, #16]
 80036a2:	6091      	str	r1, [r2, #8]
 80036a4:	9903      	ldr	r1, [sp, #12]
 80036a6:	60d1      	str	r1, [r2, #12]
 80036a8:	9b02      	ldr	r3, [sp, #8]
 80036aa:	61d3      	str	r3, [r2, #28]
 80036ac:	4611      	mov	r1, r2
 80036ae:	4613      	mov	r3, r2
 80036b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036b2:	610a      	str	r2, [r1, #16]
 80036b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80036b6:	6159      	str	r1, [r3, #20]
 80036b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80036ba:	6199      	str	r1, [r3, #24]
 80036bc:	2000      	movs	r0, #0
 80036be:	b013      	add	sp, #76	; 0x4c
 80036c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c4:	00780069 	.word	0x00780069
 80036c8:	005b004e 	.word	0x005b004e
 80036cc:	00420037 	.word	0x00420037
 80036d0:	002d0024 	.word	0x002d0024
 80036d4:	001c0015 	.word	0x001c0015
 80036d8:	000f000a 	.word	0x000f000a
 80036dc:	00060003 	.word	0x00060003
 80036e0:	00880096 	.word	0x00880096
 80036e4:	00a200ac 	.word	0x00a200ac
 80036e8:	00b400ba 	.word	0x00b400ba
 80036ec:	00be00c0 	.word	0x00be00c0
 80036f0:	00c000be 	.word	0x00c000be
 80036f4:	00ba00b4 	.word	0x00ba00b4
 80036f8:	00ac00a2 	.word	0x00ac00a2
 80036fc:	00030006 	.word	0x00030006
 8003700:	000a000f 	.word	0x000a000f
 8003704:	0015001c 	.word	0x0015001c
 8003708:	0024002d 	.word	0x0024002d
 800370c:	00370042 	.word	0x00370042
 8003710:	004e005b 	.word	0x004e005b
 8003714:	00690078 	.word	0x00690078
 8003718:	2000000c 	.word	0x2000000c
 800371c:	00960088 	.word	0x00960088

08003720 <D16_1CH_HTONS_VOL_HP>:
 8003720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003724:	4691      	mov	r9, r2
 8003726:	b083      	sub	sp, #12
 8003728:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800372a:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800372e:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	4680      	mov	r8, r0
 8003736:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800373a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800373e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003742:	f8d9 5008 	ldr.w	r5, [r9, #8]
 8003746:	9401      	str	r4, [sp, #4]
 8003748:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800374c:	f8d9 e020 	ldr.w	lr, [r9, #32]
 8003750:	2a00      	cmp	r2, #0
 8003752:	d04e      	beq.n	80037f2 <D16_1CH_HTONS_VOL_HP+0xd2>
 8003754:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 8003800 <D16_1CH_HTONS_VOL_HP+0xe0>
 8003758:	1e8c      	subs	r4, r1, #2
 800375a:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800375e:	f858 2b02 	ldr.w	r2, [r8], #2
 8003762:	ba52      	rev16	r2, r2
 8003764:	b2d6      	uxtb	r6, r2
 8003766:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800376a:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800376e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8003772:	4413      	add	r3, r2
 8003774:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 8003778:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800377c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003780:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8003784:	0a93      	lsrs	r3, r2, #10
 8003786:	4a1c      	ldr	r2, [pc, #112]	; (80037f8 <D16_1CH_HTONS_VOL_HP+0xd8>)
 8003788:	fb21 5202 	smlad	r2, r1, r2, r5
 800378c:	4d1b      	ldr	r5, [pc, #108]	; (80037fc <D16_1CH_HTONS_VOL_HP+0xdc>)
 800378e:	fb21 f505 	smuad	r5, r1, r5
 8003792:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 8003796:	4410      	add	r0, r2
 8003798:	1bc0      	subs	r0, r0, r7
 800379a:	17c7      	asrs	r7, r0, #31
 800379c:	fba0 010e 	umull	r0, r1, r0, lr
 80037a0:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80037a4:	fb0e 1107 	mla	r1, lr, r7, r1
 80037a8:	f141 0100 	adc.w	r1, r1, #0
 80037ac:	0448      	lsls	r0, r1, #17
 80037ae:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80037b2:	2700      	movs	r7, #0
 80037b4:	fbc0 670a 	smlal	r6, r7, r0, sl
 80037b8:	45d8      	cmp	r8, fp
 80037ba:	ea4f 0041 	mov.w	r0, r1, lsl #1
 80037be:	ea4f 01a7 	mov.w	r1, r7, asr #2
 80037c2:	4617      	mov	r7, r2
 80037c4:	f301 010f 	ssat	r1, #16, r1
 80037c8:	f824 1f02 	strh.w	r1, [r4, #2]!
 80037cc:	d1c7      	bne.n	800375e <D16_1CH_HTONS_VOL_HP+0x3e>
 80037ce:	9901      	ldr	r1, [sp, #4]
 80037d0:	f8c9 301c 	str.w	r3, [r9, #28]
 80037d4:	9b00      	ldr	r3, [sp, #0]
 80037d6:	f8c9 0010 	str.w	r0, [r9, #16]
 80037da:	2000      	movs	r0, #0
 80037dc:	f8c9 5008 	str.w	r5, [r9, #8]
 80037e0:	f8c9 100c 	str.w	r1, [r9, #12]
 80037e4:	f8c9 2014 	str.w	r2, [r9, #20]
 80037e8:	f8c9 3018 	str.w	r3, [r9, #24]
 80037ec:	b003      	add	sp, #12
 80037ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037f2:	463a      	mov	r2, r7
 80037f4:	4621      	mov	r1, r4
 80037f6:	e7eb      	b.n	80037d0 <D16_1CH_HTONS_VOL_HP+0xb0>
 80037f8:	00030001 	.word	0x00030001
 80037fc:	00010003 	.word	0x00010003
 8003800:	2000000c 	.word	0x2000000c

08003804 <D24_1CH_HTONS_VOL_HP>:
 8003804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003808:	b089      	sub	sp, #36	; 0x24
 800380a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800380c:	6996      	ldr	r6, [r2, #24]
 800380e:	9304      	str	r3, [sp, #16]
 8003810:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8003812:	9207      	str	r2, [sp, #28]
 8003814:	6915      	ldr	r5, [r2, #16]
 8003816:	6954      	ldr	r4, [r2, #20]
 8003818:	9606      	str	r6, [sp, #24]
 800381a:	6893      	ldr	r3, [r2, #8]
 800381c:	69d6      	ldr	r6, [r2, #28]
 800381e:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8003822:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8003826:	9a04      	ldr	r2, [sp, #16]
 8003828:	9705      	str	r7, [sp, #20]
 800382a:	2a00      	cmp	r2, #0
 800382c:	d07e      	beq.n	800392c <D24_1CH_HTONS_VOL_HP+0x128>
 800382e:	f1a1 0b02 	sub.w	fp, r1, #2
 8003832:	2700      	movs	r7, #0
 8003834:	46a8      	mov	r8, r5
 8003836:	f8cd b004 	str.w	fp, [sp, #4]
 800383a:	4655      	mov	r5, sl
 800383c:	46e3      	mov	fp, ip
 800383e:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8003938 <D24_1CH_HTONS_VOL_HP+0x134>
 8003842:	46ba      	mov	sl, r7
 8003844:	469c      	mov	ip, r3
 8003846:	e055      	b.n	80038f4 <D24_1CH_HTONS_VOL_HP+0xf0>
 8003848:	7802      	ldrb	r2, [r0, #0]
 800384a:	78c3      	ldrb	r3, [r0, #3]
 800384c:	7841      	ldrb	r1, [r0, #1]
 800384e:	0212      	lsls	r2, r2, #8
 8003850:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8003854:	440b      	add	r3, r1
 8003856:	3002      	adds	r0, #2
 8003858:	b2d9      	uxtb	r1, r3
 800385a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800385e:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8003862:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8003866:	0c1b      	lsrs	r3, r3, #16
 8003868:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800386c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8003870:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 8003874:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8003878:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800387c:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8003880:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8003884:	4a2a      	ldr	r2, [pc, #168]	; (8003930 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8003886:	fb23 b102 	smlad	r1, r3, r2, fp
 800388a:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <D24_1CH_HTONS_VOL_HP+0x130>)
 800388c:	fb23 cb02 	smlad	fp, r3, r2, ip
 8003890:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 8003894:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8003898:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800389c:	2201      	movs	r2, #1
 800389e:	fb23 f702 	smuad	r7, r3, r2
 80038a2:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 80038a6:	eb01 0208 	add.w	r2, r1, r8
 80038aa:	1b12      	subs	r2, r2, r4
 80038ac:	17d4      	asrs	r4, r2, #31
 80038ae:	fba2 2305 	umull	r2, r3, r2, r5
 80038b2:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80038b6:	fb05 3304 	mla	r3, r5, r4, r3
 80038ba:	f143 0300 	adc.w	r3, r3, #0
 80038be:	9c05      	ldr	r4, [sp, #20]
 80038c0:	03da      	lsls	r2, r3, #15
 80038c2:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80038c6:	f04f 0900 	mov.w	r9, #0
 80038ca:	fbc4 8902 	smlal	r8, r9, r4, r2
 80038ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80038d2:	9a01      	ldr	r2, [sp, #4]
 80038d4:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80038d8:	9b03      	ldr	r3, [sp, #12]
 80038da:	109b      	asrs	r3, r3, #2
 80038dc:	f303 030f 	ssat	r3, #16, r3
 80038e0:	f822 3f02 	strh.w	r3, [r2, #2]!
 80038e4:	9b04      	ldr	r3, [sp, #16]
 80038e6:	9201      	str	r2, [sp, #4]
 80038e8:	f10a 0a01 	add.w	sl, sl, #1
 80038ec:	459a      	cmp	sl, r3
 80038ee:	44bc      	add	ip, r7
 80038f0:	460c      	mov	r4, r1
 80038f2:	d00b      	beq.n	800390c <D24_1CH_HTONS_VOL_HP+0x108>
 80038f4:	f01a 0f01 	tst.w	sl, #1
 80038f8:	d0a6      	beq.n	8003848 <D24_1CH_HTONS_VOL_HP+0x44>
 80038fa:	78c2      	ldrb	r2, [r0, #3]
 80038fc:	7883      	ldrb	r3, [r0, #2]
 80038fe:	f810 1b04 	ldrb.w	r1, [r0], #4
 8003902:	0212      	lsls	r2, r2, #8
 8003904:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8003908:	440b      	add	r3, r1
 800390a:	e7a5      	b.n	8003858 <D24_1CH_HTONS_VOL_HP+0x54>
 800390c:	4663      	mov	r3, ip
 800390e:	4645      	mov	r5, r8
 8003910:	46dc      	mov	ip, fp
 8003912:	9807      	ldr	r0, [sp, #28]
 8003914:	6141      	str	r1, [r0, #20]
 8003916:	9906      	ldr	r1, [sp, #24]
 8003918:	6083      	str	r3, [r0, #8]
 800391a:	f8c0 c00c 	str.w	ip, [r0, #12]
 800391e:	61c6      	str	r6, [r0, #28]
 8003920:	6105      	str	r5, [r0, #16]
 8003922:	6181      	str	r1, [r0, #24]
 8003924:	2000      	movs	r0, #0
 8003926:	b009      	add	sp, #36	; 0x24
 8003928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392c:	4621      	mov	r1, r4
 800392e:	e7f0      	b.n	8003912 <D24_1CH_HTONS_VOL_HP+0x10e>
 8003930:	00030001 	.word	0x00030001
 8003934:	00060007 	.word	0x00060007
 8003938:	2000000c 	.word	0x2000000c

0800393c <D32_1CH_HTONS_VOL_HP>:
 800393c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003940:	4692      	mov	sl, r2
 8003942:	b087      	sub	sp, #28
 8003944:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8003946:	f8da 3018 	ldr.w	r3, [sl, #24]
 800394a:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800394e:	9304      	str	r3, [sp, #16]
 8003950:	f8da 4010 	ldr.w	r4, [sl, #16]
 8003954:	f8da 8014 	ldr.w	r8, [sl, #20]
 8003958:	f8da 601c 	ldr.w	r6, [sl, #28]
 800395c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003960:	f8da e00c 	ldr.w	lr, [sl, #12]
 8003964:	9501      	str	r5, [sp, #4]
 8003966:	f8da c020 	ldr.w	ip, [sl, #32]
 800396a:	2a00      	cmp	r2, #0
 800396c:	d07b      	beq.n	8003a66 <D32_1CH_HTONS_VOL_HP+0x12a>
 800396e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003972:	4f3e      	ldr	r7, [pc, #248]	; (8003a6c <D32_1CH_HTONS_VOL_HP+0x130>)
 8003974:	f8cd c00c 	str.w	ip, [sp, #12]
 8003978:	9202      	str	r2, [sp, #8]
 800397a:	460d      	mov	r5, r1
 800397c:	46a1      	mov	r9, r4
 800397e:	4684      	mov	ip, r0
 8003980:	f8cd a014 	str.w	sl, [sp, #20]
 8003984:	f85c 1b04 	ldr.w	r1, [ip], #4
 8003988:	ba49      	rev16	r1, r1
 800398a:	b2c8      	uxtb	r0, r1
 800398c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8003990:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8003994:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8003998:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800399c:	0e09      	lsrs	r1, r1, #24
 800399e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80039a2:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 80039a6:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80039aa:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 80039ae:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 80039b2:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 80039b6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80039ba:	f3c6 0109 	ubfx	r1, r6, #0, #10
 80039be:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80039c2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80039c6:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80039ca:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 80039ce:	4a28      	ldr	r2, [pc, #160]	; (8003a70 <D32_1CH_HTONS_VOL_HP+0x134>)
 80039d0:	fb20 e202 	smlad	r2, r0, r2, lr
 80039d4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80039d8:	fb2a 2101 	smlad	r1, sl, r1, r2
 80039dc:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <D32_1CH_HTONS_VOL_HP+0x138>)
 80039de:	fb20 3302 	smlad	r3, r0, r2, r3
 80039e2:	4a25      	ldr	r2, [pc, #148]	; (8003a78 <D32_1CH_HTONS_VOL_HP+0x13c>)
 80039e4:	fb2a 3e02 	smlad	lr, sl, r2, r3
 80039e8:	2301      	movs	r3, #1
 80039ea:	fb20 f003 	smuad	r0, r0, r3
 80039ee:	4b23      	ldr	r3, [pc, #140]	; (8003a7c <D32_1CH_HTONS_VOL_HP+0x140>)
 80039f0:	fb2a 0303 	smlad	r3, sl, r3, r0
 80039f4:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 80039f8:	9c03      	ldr	r4, [sp, #12]
 80039fa:	eb02 0009 	add.w	r0, r2, r9
 80039fe:	eba0 0008 	sub.w	r0, r0, r8
 8003a02:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8003a06:	fba0 0104 	umull	r0, r1, r0, r4
 8003a0a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003a0e:	fb04 110b 	mla	r1, r4, fp, r1
 8003a12:	f141 0100 	adc.w	r1, r1, #0
 8003a16:	9c01      	ldr	r4, [sp, #4]
 8003a18:	0388      	lsls	r0, r1, #14
 8003a1a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003a1e:	f04f 0900 	mov.w	r9, #0
 8003a22:	fbc0 8904 	smlal	r8, r9, r0, r4
 8003a26:	ea4f 00a9 	mov.w	r0, r9, asr #2
 8003a2a:	ea4f 0941 	mov.w	r9, r1, lsl #1
 8003a2e:	f300 000f 	ssat	r0, #16, r0
 8003a32:	9902      	ldr	r1, [sp, #8]
 8003a34:	f825 0b02 	strh.w	r0, [r5], #2
 8003a38:	428d      	cmp	r5, r1
 8003a3a:	4690      	mov	r8, r2
 8003a3c:	d1a2      	bne.n	8003984 <D32_1CH_HTONS_VOL_HP+0x48>
 8003a3e:	f8dd a014 	ldr.w	sl, [sp, #20]
 8003a42:	464c      	mov	r4, r9
 8003a44:	f8ca 3008 	str.w	r3, [sl, #8]
 8003a48:	9b04      	ldr	r3, [sp, #16]
 8003a4a:	f8ca e00c 	str.w	lr, [sl, #12]
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f8ca 601c 	str.w	r6, [sl, #28]
 8003a54:	f8ca 4010 	str.w	r4, [sl, #16]
 8003a58:	f8ca 2014 	str.w	r2, [sl, #20]
 8003a5c:	f8ca 3018 	str.w	r3, [sl, #24]
 8003a60:	b007      	add	sp, #28
 8003a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a66:	4642      	mov	r2, r8
 8003a68:	e7ec      	b.n	8003a44 <D32_1CH_HTONS_VOL_HP+0x108>
 8003a6a:	bf00      	nop
 8003a6c:	2000000c 	.word	0x2000000c
 8003a70:	00060003 	.word	0x00060003
 8003a74:	000a000c 	.word	0x000a000c
 8003a78:	000c000a 	.word	0x000c000a
 8003a7c:	00030006 	.word	0x00030006

08003a80 <D48_1CH_HTONS_VOL_HP>:
 8003a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a84:	4613      	mov	r3, r2
 8003a86:	461c      	mov	r4, r3
 8003a88:	b087      	sub	sp, #28
 8003a8a:	4625      	mov	r5, r4
 8003a8c:	4626      	mov	r6, r4
 8003a8e:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 8003a90:	9205      	str	r2, [sp, #20]
 8003a92:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8003a94:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8003a98:	9501      	str	r5, [sp, #4]
 8003a9a:	4680      	mov	r8, r0
 8003a9c:	6a35      	ldr	r5, [r6, #32]
 8003a9e:	6918      	ldr	r0, [r3, #16]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	9304      	str	r3, [sp, #16]
 8003aa4:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8003aa8:	68a3      	ldr	r3, [r4, #8]
 8003aaa:	9502      	str	r5, [sp, #8]
 8003aac:	68e4      	ldr	r4, [r4, #12]
 8003aae:	2a00      	cmp	r2, #0
 8003ab0:	f000 808c 	beq.w	8003bcc <D48_1CH_HTONS_VOL_HP+0x14c>
 8003ab4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003ab8:	4d45      	ldr	r5, [pc, #276]	; (8003bd0 <D48_1CH_HTONS_VOL_HP+0x150>)
 8003aba:	9203      	str	r2, [sp, #12]
 8003abc:	468c      	mov	ip, r1
 8003abe:	e898 0044 	ldmia.w	r8, {r2, r6}
 8003ac2:	f108 0806 	add.w	r8, r8, #6
 8003ac6:	ba52      	rev16	r2, r2
 8003ac8:	ba76      	rev16	r6, r6
 8003aca:	b2d7      	uxtb	r7, r2
 8003acc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8003ad0:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 8003ad4:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 8003ad8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8003adc:	0e12      	lsrs	r2, r2, #24
 8003ade:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 8003ae2:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 8003ae6:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8003aea:	fa5f fb86 	uxtb.w	fp, r6
 8003aee:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8003af2:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 8003af6:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 8003afa:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 8003afe:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8003b02:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8003b06:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8003b0a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8003b0e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8003b12:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003b16:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8003b1a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8003b1e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003b22:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003b26:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8003b2a:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8003b2e:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8003b32:	4a28      	ldr	r2, [pc, #160]	; (8003bd4 <D48_1CH_HTONS_VOL_HP+0x154>)
 8003b34:	fb2a 4202 	smlad	r2, sl, r2, r4
 8003b38:	4927      	ldr	r1, [pc, #156]	; (8003bd8 <D48_1CH_HTONS_VOL_HP+0x158>)
 8003b3a:	fb27 2201 	smlad	r2, r7, r1, r2
 8003b3e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8003b42:	fb26 2201 	smlad	r2, r6, r1, r2
 8003b46:	4925      	ldr	r1, [pc, #148]	; (8003bdc <D48_1CH_HTONS_VOL_HP+0x15c>)
 8003b48:	fb2a 3401 	smlad	r4, sl, r1, r3
 8003b4c:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8003b50:	fb27 4403 	smlad	r4, r7, r3, r4
 8003b54:	4b22      	ldr	r3, [pc, #136]	; (8003be0 <D48_1CH_HTONS_VOL_HP+0x160>)
 8003b56:	fb26 4403 	smlad	r4, r6, r3, r4
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fb2a fa01 	smuad	sl, sl, r1
 8003b60:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <D48_1CH_HTONS_VOL_HP+0x164>)
 8003b62:	fb27 a703 	smlad	r7, r7, r3, sl
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <D48_1CH_HTONS_VOL_HP+0x168>)
 8003b68:	fb26 7303 	smlad	r3, r6, r3, r7
 8003b6c:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8003b70:	9e02      	ldr	r6, [sp, #8]
 8003b72:	9f01      	ldr	r7, [sp, #4]
 8003b74:	4410      	add	r0, r2
 8003b76:	eba0 0009 	sub.w	r0, r0, r9
 8003b7a:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8003b7e:	fba0 0106 	umull	r0, r1, r0, r6
 8003b82:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003b86:	fb06 110a 	mla	r1, r6, sl, r1
 8003b8a:	f141 0100 	adc.w	r1, r1, #0
 8003b8e:	0308      	lsls	r0, r1, #12
 8003b90:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8003b94:	f04f 0a00 	mov.w	sl, #0
 8003b98:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8003b9c:	4657      	mov	r7, sl
 8003b9e:	10b8      	asrs	r0, r7, #2
 8003ba0:	f300 000f 	ssat	r0, #16, r0
 8003ba4:	f82c 0b02 	strh.w	r0, [ip], #2
 8003ba8:	0048      	lsls	r0, r1, #1
 8003baa:	9903      	ldr	r1, [sp, #12]
 8003bac:	458c      	cmp	ip, r1
 8003bae:	4691      	mov	r9, r2
 8003bb0:	d185      	bne.n	8003abe <D48_1CH_HTONS_VOL_HP+0x3e>
 8003bb2:	9d05      	ldr	r5, [sp, #20]
 8003bb4:	616a      	str	r2, [r5, #20]
 8003bb6:	9a04      	ldr	r2, [sp, #16]
 8003bb8:	6128      	str	r0, [r5, #16]
 8003bba:	2000      	movs	r0, #0
 8003bbc:	60ab      	str	r3, [r5, #8]
 8003bbe:	60ec      	str	r4, [r5, #12]
 8003bc0:	f8c5 e01c 	str.w	lr, [r5, #28]
 8003bc4:	61aa      	str	r2, [r5, #24]
 8003bc6:	b007      	add	sp, #28
 8003bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bcc:	464a      	mov	r2, r9
 8003bce:	e7f0      	b.n	8003bb2 <D48_1CH_HTONS_VOL_HP+0x132>
 8003bd0:	2000000c 	.word	0x2000000c
 8003bd4:	000f000a 	.word	0x000f000a
 8003bd8:	00060003 	.word	0x00060003
 8003bdc:	00150019 	.word	0x00150019
 8003be0:	00190015 	.word	0x00190015
 8003be4:	00030006 	.word	0x00030006
 8003be8:	000a000f 	.word	0x000a000f

08003bec <D64_1CH_HTONS_VOL_HP>:
 8003bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bf0:	b089      	sub	sp, #36	; 0x24
 8003bf2:	4614      	mov	r4, r2
 8003bf4:	9207      	str	r2, [sp, #28]
 8003bf6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8003bf8:	f8d2 c010 	ldr.w	ip, [r2, #16]
 8003bfc:	f8d2 8014 	ldr.w	r8, [r2, #20]
 8003c00:	6992      	ldr	r2, [r2, #24]
 8003c02:	9206      	str	r2, [sp, #24]
 8003c04:	68e2      	ldr	r2, [r4, #12]
 8003c06:	9201      	str	r2, [sp, #4]
 8003c08:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003c0a:	9203      	str	r2, [sp, #12]
 8003c0c:	6a22      	ldr	r2, [r4, #32]
 8003c0e:	69e5      	ldr	r5, [r4, #28]
 8003c10:	68a6      	ldr	r6, [r4, #8]
 8003c12:	9204      	str	r2, [sp, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80b0 	beq.w	8003d7a <D64_1CH_HTONS_VOL_HP+0x18e>
 8003c1a:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003c1e:	4f58      	ldr	r7, [pc, #352]	; (8003d80 <D64_1CH_HTONS_VOL_HP+0x194>)
 8003c20:	9305      	str	r3, [sp, #20]
 8003c22:	9102      	str	r1, [sp, #8]
 8003c24:	f850 2b08 	ldr.w	r2, [r0], #8
 8003c28:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003c2c:	ba52      	rev16	r2, r2
 8003c2e:	fa93 f993 	rev16.w	r9, r3
 8003c32:	b2d4      	uxtb	r4, r2
 8003c34:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8003c38:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 8003c3c:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8003c40:	9901      	ldr	r1, [sp, #4]
 8003c42:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8003c46:	0e12      	lsrs	r2, r2, #24
 8003c48:	44ab      	add	fp, r5
 8003c4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003c4e:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 8003c52:	fa5f f289 	uxtb.w	r2, r9
 8003c56:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8003c5a:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8003c5e:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 8003c62:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8003c66:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8003c6a:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8003c6e:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 8003c72:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8003c76:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8003c7a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8003c7e:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 8003c82:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8003c86:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8003c8a:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8003c8e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003c92:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8003c96:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8003c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003c9e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003ca2:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8003ca6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003caa:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8003cae:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003cb2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8003cb6:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8003cba:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003cbe:	ea4f 2599 	mov.w	r5, r9, lsr #10
 8003cc2:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <D64_1CH_HTONS_VOL_HP+0x198>)
 8003cc4:	fb2b 1303 	smlad	r3, fp, r3, r1
 8003cc8:	492f      	ldr	r1, [pc, #188]	; (8003d88 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8003cca:	fb24 3301 	smlad	r3, r4, r1, r3
 8003cce:	492f      	ldr	r1, [pc, #188]	; (8003d8c <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8003cd0:	fb22 3301 	smlad	r3, r2, r1, r3
 8003cd4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8003cd8:	fb2e 390a 	smlad	r9, lr, sl, r3
 8003cdc:	4b2c      	ldr	r3, [pc, #176]	; (8003d90 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8003cde:	fb2b 6603 	smlad	r6, fp, r3, r6
 8003ce2:	fb2e 6613 	smladx	r6, lr, r3, r6
 8003ce6:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8003ce8:	fb24 6603 	smlad	r6, r4, r3, r6
 8003cec:	fb22 6313 	smladx	r3, r2, r3, r6
 8003cf0:	f04f 0a01 	mov.w	sl, #1
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	fb2b fb0a 	smuad	fp, fp, sl
 8003cfa:	4b27      	ldr	r3, [pc, #156]	; (8003d98 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8003cfc:	fb24 ba03 	smlad	sl, r4, r3, fp
 8003d00:	4b26      	ldr	r3, [pc, #152]	; (8003d9c <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8003d02:	fb22 a203 	smlad	r2, r2, r3, sl
 8003d06:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8003d08:	fb2e 2603 	smlad	r6, lr, r3, r2
 8003d0c:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 8003d10:	eb0a 020c 	add.w	r2, sl, ip
 8003d14:	9c04      	ldr	r4, [sp, #16]
 8003d16:	9903      	ldr	r1, [sp, #12]
 8003d18:	eba2 0208 	sub.w	r2, r2, r8
 8003d1c:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8003d20:	fba2 2304 	umull	r2, r3, r2, r4
 8003d24:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8003d28:	fb04 3309 	mla	r3, r4, r9, r3
 8003d2c:	f143 0300 	adc.w	r3, r3, #0
 8003d30:	02da      	lsls	r2, r3, #11
 8003d32:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003d36:	f04f 0900 	mov.w	r9, #0
 8003d3a:	fbc1 8902 	smlal	r8, r9, r1, r2
 8003d3e:	9902      	ldr	r1, [sp, #8]
 8003d40:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8003d44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003d48:	f302 020f 	ssat	r2, #16, r2
 8003d4c:	9b05      	ldr	r3, [sp, #20]
 8003d4e:	f821 2b02 	strh.w	r2, [r1], #2
 8003d52:	4299      	cmp	r1, r3
 8003d54:	9102      	str	r1, [sp, #8]
 8003d56:	46d0      	mov	r8, sl
 8003d58:	f47f af64 	bne.w	8003c24 <D64_1CH_HTONS_VOL_HP+0x38>
 8003d5c:	9a07      	ldr	r2, [sp, #28]
 8003d5e:	9901      	ldr	r1, [sp, #4]
 8003d60:	60d1      	str	r1, [r2, #12]
 8003d62:	9906      	ldr	r1, [sp, #24]
 8003d64:	6096      	str	r6, [r2, #8]
 8003d66:	2000      	movs	r0, #0
 8003d68:	61d5      	str	r5, [r2, #28]
 8003d6a:	f8c2 c010 	str.w	ip, [r2, #16]
 8003d6e:	f8c2 a014 	str.w	sl, [r2, #20]
 8003d72:	6191      	str	r1, [r2, #24]
 8003d74:	b009      	add	sp, #36	; 0x24
 8003d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d7a:	46c2      	mov	sl, r8
 8003d7c:	4622      	mov	r2, r4
 8003d7e:	e7ee      	b.n	8003d5e <D64_1CH_HTONS_VOL_HP+0x172>
 8003d80:	2000000c 	.word	0x2000000c
 8003d84:	001c0015 	.word	0x001c0015
 8003d88:	000f000a 	.word	0x000f000a
 8003d8c:	00060003 	.word	0x00060003
 8003d90:	0024002a 	.word	0x0024002a
 8003d94:	002e0030 	.word	0x002e0030
 8003d98:	00030006 	.word	0x00030006
 8003d9c:	000a000f 	.word	0x000a000f
 8003da0:	0015001c 	.word	0x0015001c

08003da4 <D80_1CH_HTONS_VOL_HP>:
 8003da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da8:	4613      	mov	r3, r2
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	4686      	mov	lr, r0
 8003dae:	6918      	ldr	r0, [r3, #16]
 8003db0:	9000      	str	r0, [sp, #0]
 8003db2:	4618      	mov	r0, r3
 8003db4:	461c      	mov	r4, r3
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	9302      	str	r3, [sp, #8]
 8003dba:	6983      	ldr	r3, [r0, #24]
 8003dbc:	9306      	str	r3, [sp, #24]
 8003dbe:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8003dc2:	69c3      	ldr	r3, [r0, #28]
 8003dc4:	68c0      	ldr	r0, [r0, #12]
 8003dc6:	9207      	str	r2, [sp, #28]
 8003dc8:	9001      	str	r0, [sp, #4]
 8003dca:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8003dcc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003dce:	9003      	str	r0, [sp, #12]
 8003dd0:	6a20      	ldr	r0, [r4, #32]
 8003dd2:	9004      	str	r0, [sp, #16]
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	f000 80d2 	beq.w	8003f7e <D80_1CH_HTONS_VOL_HP+0x1da>
 8003dda:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8003dde:	4869      	ldr	r0, [pc, #420]	; (8003f84 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8003de0:	9205      	str	r2, [sp, #20]
 8003de2:	461c      	mov	r4, r3
 8003de4:	f8de 5000 	ldr.w	r5, [lr]
 8003de8:	f8de 2004 	ldr.w	r2, [lr, #4]
 8003dec:	f8de 3008 	ldr.w	r3, [lr, #8]
 8003df0:	f10e 0e0a 	add.w	lr, lr, #10
 8003df4:	ba6d      	rev16	r5, r5
 8003df6:	ba52      	rev16	r2, r2
 8003df8:	fa93 fb93 	rev16.w	fp, r3
 8003dfc:	b2ee      	uxtb	r6, r5
 8003dfe:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8003e02:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8003e06:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003e0a:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8003e0e:	eb04 0a07 	add.w	sl, r4, r7
 8003e12:	0e2d      	lsrs	r5, r5, #24
 8003e14:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8003e18:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8003e1c:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 8003e20:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 8003e24:	b2d5      	uxtb	r5, r2
 8003e26:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8003e2a:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8003e2e:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8003e32:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8003e36:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8003e3a:	0e12      	lsrs	r2, r2, #24
 8003e3c:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8003e40:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 8003e44:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8003e48:	fa5f f48b 	uxtb.w	r4, fp
 8003e4c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8003e50:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8003e54:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8003e58:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8003e5c:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8003e60:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8003e64:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8003e68:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 8003e6c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003e70:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8003e74:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8003e78:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003e7c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003e80:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003e84:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8003e88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e8c:	f3cb 0609 	ubfx	r6, fp, #0, #10
 8003e90:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003e94:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003e98:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8003e9c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8003ea0:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8003ea4:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8003ea8:	ea4f 249b 	mov.w	r4, fp, lsr #10
 8003eac:	4d36      	ldr	r5, [pc, #216]	; (8003f88 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8003eae:	9f01      	ldr	r7, [sp, #4]
 8003eb0:	fb23 7505 	smlad	r5, r3, r5, r7
 8003eb4:	4f35      	ldr	r7, [pc, #212]	; (8003f8c <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8003eb6:	fb29 5507 	smlad	r5, r9, r7, r5
 8003eba:	4f35      	ldr	r7, [pc, #212]	; (8003f90 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8003ebc:	fb28 5507 	smlad	r5, r8, r7, r5
 8003ec0:	4f34      	ldr	r7, [pc, #208]	; (8003f94 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8003ec2:	fb22 5507 	smlad	r5, r2, r7, r5
 8003ec6:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 8003eca:	fb26 5b0a 	smlad	fp, r6, sl, r5
 8003ece:	4d32      	ldr	r5, [pc, #200]	; (8003f98 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8003ed0:	fb23 cc05 	smlad	ip, r3, r5, ip
 8003ed4:	4d31      	ldr	r5, [pc, #196]	; (8003f9c <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8003ed6:	fb29 cc05 	smlad	ip, r9, r5, ip
 8003eda:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8003ede:	fb28 c505 	smlad	r5, r8, r5, ip
 8003ee2:	4f2f      	ldr	r7, [pc, #188]	; (8003fa0 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8003ee4:	fb22 5507 	smlad	r5, r2, r7, r5
 8003ee8:	4f2e      	ldr	r7, [pc, #184]	; (8003fa4 <D80_1CH_HTONS_VOL_HP+0x200>)
 8003eea:	fb26 5507 	smlad	r5, r6, r7, r5
 8003eee:	f04f 0a01 	mov.w	sl, #1
 8003ef2:	9501      	str	r5, [sp, #4]
 8003ef4:	fb23 fa0a 	smuad	sl, r3, sl
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <D80_1CH_HTONS_VOL_HP+0x204>)
 8003efa:	fb29 a903 	smlad	r9, r9, r3, sl
 8003efe:	4d2b      	ldr	r5, [pc, #172]	; (8003fac <D80_1CH_HTONS_VOL_HP+0x208>)
 8003f00:	fb28 9805 	smlad	r8, r8, r5, r9
 8003f04:	4d2a      	ldr	r5, [pc, #168]	; (8003fb0 <D80_1CH_HTONS_VOL_HP+0x20c>)
 8003f06:	fb22 8205 	smlad	r2, r2, r5, r8
 8003f0a:	4b2a      	ldr	r3, [pc, #168]	; (8003fb4 <D80_1CH_HTONS_VOL_HP+0x210>)
 8003f0c:	fb26 2c03 	smlad	ip, r6, r3, r2
 8003f10:	9b00      	ldr	r3, [sp, #0]
 8003f12:	9d04      	ldr	r5, [sp, #16]
 8003f14:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 8003f18:	4453      	add	r3, sl
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	9b02      	ldr	r3, [sp, #8]
 8003f1e:	f8cd a008 	str.w	sl, [sp, #8]
 8003f22:	1ad2      	subs	r2, r2, r3
 8003f24:	17d7      	asrs	r7, r2, #31
 8003f26:	fba2 2305 	umull	r2, r3, r2, r5
 8003f2a:	fb05 3307 	mla	r3, r5, r7, r3
 8003f2e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8003f32:	f143 0300 	adc.w	r3, r3, #0
 8003f36:	9d03      	ldr	r5, [sp, #12]
 8003f38:	029a      	lsls	r2, r3, #10
 8003f3a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8003f3e:	2700      	movs	r7, #0
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	fbc5 6702 	smlal	r6, r7, r5, r2
 8003f46:	10ba      	asrs	r2, r7, #2
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	f302 020f 	ssat	r2, #16, r2
 8003f4e:	9b05      	ldr	r3, [sp, #20]
 8003f50:	f821 2b02 	strh.w	r2, [r1], #2
 8003f54:	4299      	cmp	r1, r3
 8003f56:	f47f af45 	bne.w	8003de4 <D80_1CH_HTONS_VOL_HP+0x40>
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	9907      	ldr	r1, [sp, #28]
 8003f5e:	9801      	ldr	r0, [sp, #4]
 8003f60:	60c8      	str	r0, [r1, #12]
 8003f62:	9a00      	ldr	r2, [sp, #0]
 8003f64:	f8c1 c008 	str.w	ip, [r1, #8]
 8003f68:	4608      	mov	r0, r1
 8003f6a:	61cb      	str	r3, [r1, #28]
 8003f6c:	610a      	str	r2, [r1, #16]
 8003f6e:	f8c1 a014 	str.w	sl, [r1, #20]
 8003f72:	9906      	ldr	r1, [sp, #24]
 8003f74:	6181      	str	r1, [r0, #24]
 8003f76:	2000      	movs	r0, #0
 8003f78:	b009      	add	sp, #36	; 0x24
 8003f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f7e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8003f82:	e7eb      	b.n	8003f5c <D80_1CH_HTONS_VOL_HP+0x1b8>
 8003f84:	2000000c 	.word	0x2000000c
 8003f88:	002d0024 	.word	0x002d0024
 8003f8c:	001c0015 	.word	0x001c0015
 8003f90:	000f000a 	.word	0x000f000a
 8003f94:	00060003 	.word	0x00060003
 8003f98:	0037003f 	.word	0x0037003f
 8003f9c:	00450049 	.word	0x00450049
 8003fa0:	00490045 	.word	0x00490045
 8003fa4:	003f0037 	.word	0x003f0037
 8003fa8:	00030006 	.word	0x00030006
 8003fac:	000a000f 	.word	0x000a000f
 8003fb0:	0015001c 	.word	0x0015001c
 8003fb4:	0024002d 	.word	0x0024002d

08003fb8 <D128_1CH_HTONS_VOL_HP>:
 8003fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fbc:	b093      	sub	sp, #76	; 0x4c
 8003fbe:	4614      	mov	r4, r2
 8003fc0:	9211      	str	r2, [sp, #68]	; 0x44
 8003fc2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8003fc4:	6912      	ldr	r2, [r2, #16]
 8003fc6:	9203      	str	r2, [sp, #12]
 8003fc8:	4622      	mov	r2, r4
 8003fca:	4615      	mov	r5, r2
 8003fcc:	6964      	ldr	r4, [r4, #20]
 8003fce:	9406      	str	r4, [sp, #24]
 8003fd0:	4614      	mov	r4, r2
 8003fd2:	6992      	ldr	r2, [r2, #24]
 8003fd4:	9210      	str	r2, [sp, #64]	; 0x40
 8003fd6:	68ea      	ldr	r2, [r5, #12]
 8003fd8:	9204      	str	r2, [sp, #16]
 8003fda:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8003fdc:	69e6      	ldr	r6, [r4, #28]
 8003fde:	920d      	str	r2, [sp, #52]	; 0x34
 8003fe0:	68a4      	ldr	r4, [r4, #8]
 8003fe2:	6a2a      	ldr	r2, [r5, #32]
 8003fe4:	9405      	str	r4, [sp, #20]
 8003fe6:	920e      	str	r2, [sp, #56]	; 0x38
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 8145 	beq.w	8004278 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8003fee:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8003ff2:	930f      	str	r3, [sp, #60]	; 0x3c
 8003ff4:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 80042d4 <D128_1CH_HTONS_VOL_HP+0x31c>
 8003ff8:	9107      	str	r1, [sp, #28]
 8003ffa:	f100 0310 	add.w	r3, r0, #16
 8003ffe:	4699      	mov	r9, r3
 8004000:	f1a9 0110 	sub.w	r1, r9, #16
 8004004:	c90e      	ldmia	r1, {r1, r2, r3}
 8004006:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800400a:	ba49      	rev16	r1, r1
 800400c:	ba52      	rev16	r2, r2
 800400e:	ba5b      	rev16	r3, r3
 8004010:	fa90 fa90 	rev16.w	sl, r0
 8004014:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8004018:	b2cc      	uxtb	r4, r1
 800401a:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800401e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8004022:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8004026:	0e09      	lsrs	r1, r1, #24
 8004028:	4426      	add	r6, r4
 800402a:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800402e:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8004032:	b2d0      	uxtb	r0, r2
 8004034:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8004038:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800403c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004040:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8004044:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8004048:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800404c:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8004050:	0e12      	lsrs	r2, r2, #24
 8004052:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8004056:	9701      	str	r7, [sp, #4]
 8004058:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800405c:	4627      	mov	r7, r4
 800405e:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8004062:	9702      	str	r7, [sp, #8]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800406a:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800406e:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8004072:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004076:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800407a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800407e:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004082:	0e1b      	lsrs	r3, r3, #24
 8004084:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8004088:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800408c:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8004090:	fa5f f38a 	uxtb.w	r3, sl
 8004094:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004098:	960a      	str	r6, [sp, #40]	; 0x28
 800409a:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800409e:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80040a2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80040a6:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80040aa:	950b      	str	r5, [sp, #44]	; 0x2c
 80040ac:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80040b0:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80040b4:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80040b8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80040bc:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80040c0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80040c4:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80040c8:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80040cc:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80040d0:	9308      	str	r3, [sp, #32]
 80040d2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80040d6:	9b01      	ldr	r3, [sp, #4]
 80040d8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80040dc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80040e0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80040e4:	9b02      	ldr	r3, [sp, #8]
 80040e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ea:	9302      	str	r3, [sp, #8]
 80040ec:	9b08      	ldr	r3, [sp, #32]
 80040ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040f2:	9308      	str	r3, [sp, #32]
 80040f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80040f6:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80040fa:	950c      	str	r5, [sp, #48]	; 0x30
 80040fc:	461d      	mov	r5, r3
 80040fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004100:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004104:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004108:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800410c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	9b02      	ldr	r3, [sp, #8]
 8004114:	9202      	str	r2, [sp, #8]
 8004116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004118:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800411a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800411e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004122:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8004126:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800412a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800412e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8004132:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8004136:	9b08      	ldr	r3, [sp, #32]
 8004138:	9f01      	ldr	r7, [sp, #4]
 800413a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800413e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8004142:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004146:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800414a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800414e:	46be      	mov	lr, r7
 8004150:	0a96      	lsrs	r6, r2, #10
 8004152:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8004156:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800415a:	4f49      	ldr	r7, [pc, #292]	; (8004280 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800415c:	9a04      	ldr	r2, [sp, #16]
 800415e:	fb2e 2e07 	smlad	lr, lr, r7, r2
 8004162:	4a48      	ldr	r2, [pc, #288]	; (8004284 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8004164:	fb2a ee02 	smlad	lr, sl, r2, lr
 8004168:	4a47      	ldr	r2, [pc, #284]	; (8004288 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800416a:	fb21 ee02 	smlad	lr, r1, r2, lr
 800416e:	4a47      	ldr	r2, [pc, #284]	; (800428c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8004170:	fb24 ee02 	smlad	lr, r4, r2, lr
 8004174:	4a46      	ldr	r2, [pc, #280]	; (8004290 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8004176:	9f02      	ldr	r7, [sp, #8]
 8004178:	fb27 ee02 	smlad	lr, r7, r2, lr
 800417c:	4a45      	ldr	r2, [pc, #276]	; (8004294 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800417e:	fb20 ee02 	smlad	lr, r0, r2, lr
 8004182:	4a45      	ldr	r2, [pc, #276]	; (8004298 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8004184:	fb23 e702 	smlad	r7, r3, r2, lr
 8004188:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800418c:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8004190:	9f01      	ldr	r7, [sp, #4]
 8004192:	4a42      	ldr	r2, [pc, #264]	; (800429c <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8004194:	46bc      	mov	ip, r7
 8004196:	9f05      	ldr	r7, [sp, #20]
 8004198:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800419c:	4a40      	ldr	r2, [pc, #256]	; (80042a0 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800419e:	fb2a cc02 	smlad	ip, sl, r2, ip
 80041a2:	4f40      	ldr	r7, [pc, #256]	; (80042a4 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80041a4:	fb21 cc07 	smlad	ip, r1, r7, ip
 80041a8:	4f3f      	ldr	r7, [pc, #252]	; (80042a8 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80041aa:	fb24 cc07 	smlad	ip, r4, r7, ip
 80041ae:	4f3f      	ldr	r7, [pc, #252]	; (80042ac <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80041b0:	9a02      	ldr	r2, [sp, #8]
 80041b2:	fb22 cc07 	smlad	ip, r2, r7, ip
 80041b6:	4f3e      	ldr	r7, [pc, #248]	; (80042b0 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80041b8:	fb20 cc07 	smlad	ip, r0, r7, ip
 80041bc:	4f3d      	ldr	r7, [pc, #244]	; (80042b4 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 80041be:	fb23 c707 	smlad	r7, r3, r7, ip
 80041c2:	f8df c114 	ldr.w	ip, [pc, #276]	; 80042d8 <D128_1CH_HTONS_VOL_HP+0x320>
 80041c6:	fb25 720c 	smlad	r2, r5, ip, r7
 80041ca:	f04f 0b01 	mov.w	fp, #1
 80041ce:	9204      	str	r2, [sp, #16]
 80041d0:	9f01      	ldr	r7, [sp, #4]
 80041d2:	fb27 fb0b 	smuad	fp, r7, fp
 80041d6:	4f38      	ldr	r7, [pc, #224]	; (80042b8 <D128_1CH_HTONS_VOL_HP+0x300>)
 80041d8:	fb2a ba07 	smlad	sl, sl, r7, fp
 80041dc:	4f37      	ldr	r7, [pc, #220]	; (80042bc <D128_1CH_HTONS_VOL_HP+0x304>)
 80041de:	fb21 aa07 	smlad	sl, r1, r7, sl
 80041e2:	4f37      	ldr	r7, [pc, #220]	; (80042c0 <D128_1CH_HTONS_VOL_HP+0x308>)
 80041e4:	fb24 aa07 	smlad	sl, r4, r7, sl
 80041e8:	4f36      	ldr	r7, [pc, #216]	; (80042c4 <D128_1CH_HTONS_VOL_HP+0x30c>)
 80041ea:	9a02      	ldr	r2, [sp, #8]
 80041ec:	fb22 a707 	smlad	r7, r2, r7, sl
 80041f0:	4a35      	ldr	r2, [pc, #212]	; (80042c8 <D128_1CH_HTONS_VOL_HP+0x310>)
 80041f2:	fb20 7702 	smlad	r7, r0, r2, r7
 80041f6:	4a35      	ldr	r2, [pc, #212]	; (80042cc <D128_1CH_HTONS_VOL_HP+0x314>)
 80041f8:	fb23 7702 	smlad	r7, r3, r2, r7
 80041fc:	4b34      	ldr	r3, [pc, #208]	; (80042d0 <D128_1CH_HTONS_VOL_HP+0x318>)
 80041fe:	fb25 7303 	smlad	r3, r5, r3, r7
 8004202:	9305      	str	r3, [sp, #20]
 8004204:	9b03      	ldr	r3, [sp, #12]
 8004206:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004208:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800420c:	4473      	add	r3, lr
 800420e:	461a      	mov	r2, r3
 8004210:	9b06      	ldr	r3, [sp, #24]
 8004212:	f8cd e018 	str.w	lr, [sp, #24]
 8004216:	1ad2      	subs	r2, r2, r3
 8004218:	17d1      	asrs	r1, r2, #31
 800421a:	fba2 2304 	umull	r2, r3, r2, r4
 800421e:	fb04 3301 	mla	r3, r4, r1, r3
 8004222:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004226:	f143 0300 	adc.w	r3, r3, #0
 800422a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800422c:	021a      	lsls	r2, r3, #8
 800422e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8004232:	2100      	movs	r1, #0
 8004234:	fbc4 0102 	smlal	r0, r1, r4, r2
 8004238:	108a      	asrs	r2, r1, #2
 800423a:	9907      	ldr	r1, [sp, #28]
 800423c:	f302 020f 	ssat	r2, #16, r2
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	f821 2b02 	strh.w	r2, [r1], #2
 8004246:	9303      	str	r3, [sp, #12]
 8004248:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800424a:	9107      	str	r1, [sp, #28]
 800424c:	4299      	cmp	r1, r3
 800424e:	f109 0910 	add.w	r9, r9, #16
 8004252:	f47f aed5 	bne.w	8004000 <D128_1CH_HTONS_VOL_HP+0x48>
 8004256:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004258:	9905      	ldr	r1, [sp, #20]
 800425a:	6091      	str	r1, [r2, #8]
 800425c:	9904      	ldr	r1, [sp, #16]
 800425e:	60d1      	str	r1, [r2, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	61d6      	str	r6, [r2, #28]
 8004264:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004266:	9a03      	ldr	r2, [sp, #12]
 8004268:	611a      	str	r2, [r3, #16]
 800426a:	2000      	movs	r0, #0
 800426c:	f8c3 e014 	str.w	lr, [r3, #20]
 8004270:	6199      	str	r1, [r3, #24]
 8004272:	b013      	add	sp, #76	; 0x4c
 8004274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004278:	f8dd e018 	ldr.w	lr, [sp, #24]
 800427c:	e7eb      	b.n	8004256 <D128_1CH_HTONS_VOL_HP+0x29e>
 800427e:	bf00      	nop
 8004280:	00780069 	.word	0x00780069
 8004284:	005b004e 	.word	0x005b004e
 8004288:	00420037 	.word	0x00420037
 800428c:	002d0024 	.word	0x002d0024
 8004290:	001c0015 	.word	0x001c0015
 8004294:	000f000a 	.word	0x000f000a
 8004298:	00060003 	.word	0x00060003
 800429c:	00880096 	.word	0x00880096
 80042a0:	00a200ac 	.word	0x00a200ac
 80042a4:	00b400ba 	.word	0x00b400ba
 80042a8:	00be00c0 	.word	0x00be00c0
 80042ac:	00c000be 	.word	0x00c000be
 80042b0:	00ba00b4 	.word	0x00ba00b4
 80042b4:	00ac00a2 	.word	0x00ac00a2
 80042b8:	00030006 	.word	0x00030006
 80042bc:	000a000f 	.word	0x000a000f
 80042c0:	0015001c 	.word	0x0015001c
 80042c4:	0024002d 	.word	0x0024002d
 80042c8:	00370042 	.word	0x00370042
 80042cc:	004e005b 	.word	0x004e005b
 80042d0:	00690078 	.word	0x00690078
 80042d4:	2000000c 	.word	0x2000000c
 80042d8:	00960088 	.word	0x00960088

080042dc <PDM_Filter_Init>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	2240      	movs	r2, #64	; 0x40
 80042e0:	4604      	mov	r4, r0
 80042e2:	2100      	movs	r1, #0
 80042e4:	300c      	adds	r0, #12
 80042e6:	f000 f9f9 	bl	80046dc <memset>
 80042ea:	493b      	ldr	r1, [pc, #236]	; (80043d8 <PDM_Filter_Init+0xfc>)
 80042ec:	483b      	ldr	r0, [pc, #236]	; (80043dc <PDM_Filter_Init+0x100>)
 80042ee:	f000 f98d 	bl	800460c <CRC_Lock>
 80042f2:	8822      	ldrh	r2, [r4, #0]
 80042f4:	8963      	ldrh	r3, [r4, #10]
 80042f6:	4938      	ldr	r1, [pc, #224]	; (80043d8 <PDM_Filter_Init+0xfc>)
 80042f8:	8925      	ldrh	r5, [r4, #8]
 80042fa:	86a3      	strh	r3, [r4, #52]	; 0x34
 80042fc:	2801      	cmp	r0, #1
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	bf18      	it	ne
 8004304:	2100      	movne	r1, #0
 8004306:	2a01      	cmp	r2, #1
 8004308:	6461      	str	r1, [r4, #68]	; 0x44
 800430a:	86e5      	strh	r5, [r4, #54]	; 0x36
 800430c:	61a3      	str	r3, [r4, #24]
 800430e:	6123      	str	r3, [r4, #16]
 8004310:	6163      	str	r3, [r4, #20]
 8004312:	60e3      	str	r3, [r4, #12]
 8004314:	6263      	str	r3, [r4, #36]	; 0x24
 8004316:	61e3      	str	r3, [r4, #28]
 8004318:	6223      	str	r3, [r4, #32]
 800431a:	6423      	str	r3, [r4, #64]	; 0x40
 800431c:	d918      	bls.n	8004350 <PDM_Filter_Init+0x74>
 800431e:	2003      	movs	r0, #3
 8004320:	2302      	movs	r3, #2
 8004322:	8862      	ldrh	r2, [r4, #2]
 8004324:	2a01      	cmp	r2, #1
 8004326:	d91d      	bls.n	8004364 <PDM_Filter_Init+0x88>
 8004328:	2140      	movs	r1, #64	; 0x40
 800432a:	2300      	movs	r3, #0
 800432c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800432e:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 8004332:	6862      	ldr	r2, [r4, #4]
 8004334:	bf04      	itt	eq
 8004336:	6421      	streq	r1, [r4, #64]	; 0x40
 8004338:	460b      	moveq	r3, r1
 800433a:	b11a      	cbz	r2, 8004344 <PDM_Filter_Init+0x68>
 800433c:	f043 0310 	orr.w	r3, r3, #16
 8004340:	6423      	str	r3, [r4, #64]	; 0x40
 8004342:	62e2      	str	r2, [r4, #44]	; 0x2c
 8004344:	2200      	movs	r2, #0
 8004346:	8722      	strh	r2, [r4, #56]	; 0x38
 8004348:	b908      	cbnz	r0, 800434e <PDM_Filter_Init+0x72>
 800434a:	3380      	adds	r3, #128	; 0x80
 800434c:	6423      	str	r3, [r4, #64]	; 0x40
 800434e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004350:	4d23      	ldr	r5, [pc, #140]	; (80043e0 <PDM_Filter_Init+0x104>)
 8004352:	d010      	beq.n	8004376 <PDM_Filter_Init+0x9a>
 8004354:	782a      	ldrb	r2, [r5, #0]
 8004356:	2a01      	cmp	r2, #1
 8004358:	d027      	beq.n	80043aa <PDM_Filter_Init+0xce>
 800435a:	8862      	ldrh	r2, [r4, #2]
 800435c:	2a01      	cmp	r2, #1
 800435e:	f04f 0001 	mov.w	r0, #1
 8004362:	d8e1      	bhi.n	8004328 <PDM_Filter_Init+0x4c>
 8004364:	d001      	beq.n	800436a <PDM_Filter_Init+0x8e>
 8004366:	4618      	mov	r0, r3
 8004368:	e7de      	b.n	8004328 <PDM_Filter_Init+0x4c>
 800436a:	2220      	movs	r2, #32
 800436c:	4618      	mov	r0, r3
 800436e:	6422      	str	r2, [r4, #64]	; 0x40
 8004370:	4613      	mov	r3, r2
 8004372:	2160      	movs	r1, #96	; 0x60
 8004374:	e7da      	b.n	800432c <PDM_Filter_Init+0x50>
 8004376:	7829      	ldrb	r1, [r5, #0]
 8004378:	2900      	cmp	r1, #0
 800437a:	d1ee      	bne.n	800435a <PDM_Filter_Init+0x7e>
 800437c:	4919      	ldr	r1, [pc, #100]	; (80043e4 <PDM_Filter_Init+0x108>)
 800437e:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80043ec <PDM_Filter_Init+0x110>
 8004382:	4f19      	ldr	r7, [pc, #100]	; (80043e8 <PDM_Filter_Init+0x10c>)
 8004384:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 8004388:	684a      	ldr	r2, [r1, #4]
 800438a:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800438e:	ea02 0007 	and.w	r0, r2, r7
 8004392:	4303      	orrs	r3, r0
 8004394:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8004398:	4413      	add	r3, r2
 800439a:	f841 3f04 	str.w	r3, [r1, #4]!
 800439e:	428e      	cmp	r6, r1
 80043a0:	d1f2      	bne.n	8004388 <PDM_Filter_Init+0xac>
 80043a2:	2001      	movs	r0, #1
 80043a4:	7028      	strb	r0, [r5, #0]
 80043a6:	2300      	movs	r3, #0
 80043a8:	e7bb      	b.n	8004322 <PDM_Filter_Init+0x46>
 80043aa:	490e      	ldr	r1, [pc, #56]	; (80043e4 <PDM_Filter_Init+0x108>)
 80043ac:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80043ec <PDM_Filter_Init+0x110>
 80043b0:	4f0d      	ldr	r7, [pc, #52]	; (80043e8 <PDM_Filter_Init+0x10c>)
 80043b2:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 80043b6:	684a      	ldr	r2, [r1, #4]
 80043b8:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 80043bc:	ea02 0007 	and.w	r0, r2, r7
 80043c0:	4303      	orrs	r3, r0
 80043c2:	f3c2 5209 	ubfx	r2, r2, #20, #10
 80043c6:	4413      	add	r3, r2
 80043c8:	f841 3f04 	str.w	r3, [r1, #4]!
 80043cc:	428e      	cmp	r6, r1
 80043ce:	d1f2      	bne.n	80043b6 <PDM_Filter_Init+0xda>
 80043d0:	2300      	movs	r3, #0
 80043d2:	702b      	strb	r3, [r5, #0]
 80043d4:	e7c1      	b.n	800435a <PDM_Filter_Init+0x7e>
 80043d6:	bf00      	nop
 80043d8:	b5e8b5cd 	.word	0xb5e8b5cd
 80043dc:	f407a5c2 	.word	0xf407a5c2
 80043e0:	20000495 	.word	0x20000495
 80043e4:	20000008 	.word	0x20000008
 80043e8:	000ffc00 	.word	0x000ffc00
 80043ec:	3ff00000 	.word	0x3ff00000

080043f0 <PDM_Filter_setConfig>:
 80043f0:	4b66      	ldr	r3, [pc, #408]	; (800458c <PDM_Filter_setConfig+0x19c>)
 80043f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d001      	beq.n	80043fc <PDM_Filter_setConfig+0xc>
 80043f8:	2004      	movs	r0, #4
 80043fa:	4770      	bx	lr
 80043fc:	b530      	push	{r4, r5, lr}
 80043fe:	880a      	ldrh	r2, [r1, #0]
 8004400:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004402:	ed2d 8b04 	vpush	{d8-d9}
 8004406:	4604      	mov	r4, r0
 8004408:	460d      	mov	r5, r1
 800440a:	1e51      	subs	r1, r2, #1
 800440c:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8004410:	2906      	cmp	r1, #6
 8004412:	b083      	sub	sp, #12
 8004414:	6420      	str	r0, [r4, #64]	; 0x40
 8004416:	d91a      	bls.n	800444e <PDM_Filter_setConfig+0x5e>
 8004418:	2008      	movs	r0, #8
 800441a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800441e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8004422:	4299      	cmp	r1, r3
 8004424:	d07e      	beq.n	8004524 <PDM_Filter_setConfig+0x134>
 8004426:	f113 0f0c 	cmn.w	r3, #12
 800442a:	da2a      	bge.n	8004482 <PDM_Filter_setConfig+0x92>
 800442c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8004430:	3040      	adds	r0, #64	; 0x40
 8004432:	80ab      	strh	r3, [r5, #4]
 8004434:	8622      	strh	r2, [r4, #48]	; 0x30
 8004436:	886b      	ldrh	r3, [r5, #2]
 8004438:	8663      	strh	r3, [r4, #50]	; 0x32
 800443a:	b920      	cbnz	r0, 8004446 <PDM_Filter_setConfig+0x56>
 800443c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800443e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004442:	6423      	str	r3, [r4, #64]	; 0x40
 8004444:	2000      	movs	r0, #0
 8004446:	b003      	add	sp, #12
 8004448:	ecbd 8b04 	vpop	{d8-d9}
 800444c:	bd30      	pop	{r4, r5, pc}
 800444e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8004450:	4291      	cmp	r1, r2
 8004452:	d06c      	beq.n	800452e <PDM_Filter_setConfig+0x13e>
 8004454:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8004458:	f023 0301 	bic.w	r3, r3, #1
 800445c:	4313      	orrs	r3, r2
 800445e:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8004462:	6423      	str	r3, [r4, #64]	; 0x40
 8004464:	2970      	cmp	r1, #112	; 0x70
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	f103 33ff 	add.w	r3, r3, #4294967295
 800446e:	d066      	beq.n	800453e <PDM_Filter_setConfig+0x14e>
 8004470:	2b06      	cmp	r3, #6
 8004472:	f200 8089 	bhi.w	8004588 <PDM_Filter_setConfig+0x198>
 8004476:	e8df f003 	tbb	[pc, r3]
 800447a:	4f52      	.short	0x4f52
 800447c:	3d43494c 	.word	0x3d43494c
 8004480:	46          	.byte	0x46
 8004481:	00          	.byte	0x00
 8004482:	2b33      	cmp	r3, #51	; 0x33
 8004484:	dc32      	bgt.n	80044ec <PDM_Filter_setConfig+0xfc>
 8004486:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004488:	f002 020f 	and.w	r2, r2, #15
 800448c:	3a01      	subs	r2, #1
 800448e:	2a06      	cmp	r2, #6
 8004490:	d872      	bhi.n	8004578 <PDM_Filter_setConfig+0x188>
 8004492:	493f      	ldr	r1, [pc, #252]	; (8004590 <PDM_Filter_setConfig+0x1a0>)
 8004494:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8004498:	ed92 9a00 	vldr	s18, [r2]
 800449c:	ed92 8a07 	vldr	s16, [r2, #28]
 80044a0:	9001      	str	r0, [sp, #4]
 80044a2:	ee07 3a90 	vmov	s15, r3
 80044a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044aa:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80044ae:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 80044b2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80044b6:	f000 f93f 	bl	8004738 <powf>
 80044ba:	eddf 0a36 	vldr	s1, [pc, #216]	; 8004594 <PDM_Filter_setConfig+0x1a4>
 80044be:	eef0 8a40 	vmov.f32	s17, s0
 80044c2:	ee70 0ac9 	vsub.f32	s1, s1, s18
 80044c6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80044ca:	f000 f935 	bl	8004738 <powf>
 80044ce:	ee28 8a28 	vmul.f32	s16, s16, s17
 80044d2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80044d6:	f000 f909 	bl	80046ec <roundf>
 80044da:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80044de:	88ab      	ldrh	r3, [r5, #4]
 80044e0:	882a      	ldrh	r2, [r5, #0]
 80044e2:	9801      	ldr	r0, [sp, #4]
 80044e4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 80044e8:	8723      	strh	r3, [r4, #56]	; 0x38
 80044ea:	e7a3      	b.n	8004434 <PDM_Filter_setConfig+0x44>
 80044ec:	2333      	movs	r3, #51	; 0x33
 80044ee:	3040      	adds	r0, #64	; 0x40
 80044f0:	80ab      	strh	r3, [r5, #4]
 80044f2:	e79f      	b.n	8004434 <PDM_Filter_setConfig+0x44>
 80044f4:	4b28      	ldr	r3, [pc, #160]	; (8004598 <PDM_Filter_setConfig+0x1a8>)
 80044f6:	64a3      	str	r3, [r4, #72]	; 0x48
 80044f8:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80044fc:	2000      	movs	r0, #0
 80044fe:	e792      	b.n	8004426 <PDM_Filter_setConfig+0x36>
 8004500:	4b26      	ldr	r3, [pc, #152]	; (800459c <PDM_Filter_setConfig+0x1ac>)
 8004502:	64a3      	str	r3, [r4, #72]	; 0x48
 8004504:	e7f8      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 8004506:	4b26      	ldr	r3, [pc, #152]	; (80045a0 <PDM_Filter_setConfig+0x1b0>)
 8004508:	64a3      	str	r3, [r4, #72]	; 0x48
 800450a:	e7f5      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 800450c:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <PDM_Filter_setConfig+0x1b4>)
 800450e:	64a3      	str	r3, [r4, #72]	; 0x48
 8004510:	e7f2      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 8004512:	4b25      	ldr	r3, [pc, #148]	; (80045a8 <PDM_Filter_setConfig+0x1b8>)
 8004514:	64a3      	str	r3, [r4, #72]	; 0x48
 8004516:	e7ef      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 8004518:	4b24      	ldr	r3, [pc, #144]	; (80045ac <PDM_Filter_setConfig+0x1bc>)
 800451a:	64a3      	str	r3, [r4, #72]	; 0x48
 800451c:	e7ec      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 800451e:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <PDM_Filter_setConfig+0x1c0>)
 8004520:	64a3      	str	r3, [r4, #72]	; 0x48
 8004522:	e7e9      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 8004524:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 8004526:	4291      	cmp	r1, r2
 8004528:	f47f af7d 	bne.w	8004426 <PDM_Filter_setConfig+0x36>
 800452c:	e783      	b.n	8004436 <PDM_Filter_setConfig+0x46>
 800452e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8004532:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 8004536:	4299      	cmp	r1, r3
 8004538:	d023      	beq.n	8004582 <PDM_Filter_setConfig+0x192>
 800453a:	2000      	movs	r0, #0
 800453c:	e773      	b.n	8004426 <PDM_Filter_setConfig+0x36>
 800453e:	2b06      	cmp	r3, #6
 8004540:	d822      	bhi.n	8004588 <PDM_Filter_setConfig+0x198>
 8004542:	e8df f003 	tbb	[pc, r3]
 8004546:	1316      	.short	0x1316
 8004548:	070a0d10 	.word	0x070a0d10
 800454c:	04          	.byte	0x04
 800454d:	00          	.byte	0x00
 800454e:	4b19      	ldr	r3, [pc, #100]	; (80045b4 <PDM_Filter_setConfig+0x1c4>)
 8004550:	64a3      	str	r3, [r4, #72]	; 0x48
 8004552:	e7d1      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 8004554:	4b18      	ldr	r3, [pc, #96]	; (80045b8 <PDM_Filter_setConfig+0x1c8>)
 8004556:	64a3      	str	r3, [r4, #72]	; 0x48
 8004558:	e7ce      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <PDM_Filter_setConfig+0x1cc>)
 800455c:	64a3      	str	r3, [r4, #72]	; 0x48
 800455e:	e7cb      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 8004560:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <PDM_Filter_setConfig+0x1d0>)
 8004562:	64a3      	str	r3, [r4, #72]	; 0x48
 8004564:	e7c8      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 8004566:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <PDM_Filter_setConfig+0x1d4>)
 8004568:	64a3      	str	r3, [r4, #72]	; 0x48
 800456a:	e7c5      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 800456c:	4b16      	ldr	r3, [pc, #88]	; (80045c8 <PDM_Filter_setConfig+0x1d8>)
 800456e:	64a3      	str	r3, [r4, #72]	; 0x48
 8004570:	e7c2      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 8004572:	4b16      	ldr	r3, [pc, #88]	; (80045cc <PDM_Filter_setConfig+0x1dc>)
 8004574:	64a3      	str	r3, [r4, #72]	; 0x48
 8004576:	e7bf      	b.n	80044f8 <PDM_Filter_setConfig+0x108>
 8004578:	ed9f 8a15 	vldr	s16, [pc, #84]	; 80045d0 <PDM_Filter_setConfig+0x1e0>
 800457c:	eeb0 9a48 	vmov.f32	s18, s16
 8004580:	e78e      	b.n	80044a0 <PDM_Filter_setConfig+0xb0>
 8004582:	886b      	ldrh	r3, [r5, #2]
 8004584:	8663      	strh	r3, [r4, #50]	; 0x32
 8004586:	e759      	b.n	800443c <PDM_Filter_setConfig+0x4c>
 8004588:	2000      	movs	r0, #0
 800458a:	e746      	b.n	800441a <PDM_Filter_setConfig+0x2a>
 800458c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004590:	0800517c 	.word	0x0800517c
 8004594:	42000000 	.word	0x42000000
 8004598:	0800295d 	.word	0x0800295d
 800459c:	0800283d 	.word	0x0800283d
 80045a0:	08002aed 	.word	0x08002aed
 80045a4:	08003331 	.word	0x08003331
 80045a8:	08003091 	.word	0x08003091
 80045ac:	08002e71 	.word	0x08002e71
 80045b0:	08002c85 	.word	0x08002c85
 80045b4:	0800393d 	.word	0x0800393d
 80045b8:	08003805 	.word	0x08003805
 80045bc:	08003721 	.word	0x08003721
 80045c0:	08003fb9 	.word	0x08003fb9
 80045c4:	08003da5 	.word	0x08003da5
 80045c8:	08003bed 	.word	0x08003bed
 80045cc:	08003a81 	.word	0x08003a81
 80045d0:	00000000 	.word	0x00000000

080045d4 <PDM_Filter>:
 80045d4:	b410      	push	{r4}
 80045d6:	4b0c      	ldr	r3, [pc, #48]	; (8004608 <PDM_Filter+0x34>)
 80045d8:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80045da:	429c      	cmp	r4, r3
 80045dc:	d003      	beq.n	80045e6 <PDM_Filter+0x12>
 80045de:	2004      	movs	r0, #4
 80045e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80045e8:	05dc      	lsls	r4, r3, #23
 80045ea:	d407      	bmi.n	80045fc <PDM_Filter+0x28>
 80045ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80045f0:	bf14      	ite	ne
 80045f2:	2020      	movne	r0, #32
 80045f4:	2030      	moveq	r0, #48	; 0x30
 80045f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045fa:	4770      	bx	lr
 80045fc:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80045fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004602:	320c      	adds	r2, #12
 8004604:	4718      	bx	r3
 8004606:	bf00      	nop
 8004608:	b5e8b5cd 	.word	0xb5e8b5cd

0800460c <CRC_Lock>:
 800460c:	4a17      	ldr	r2, [pc, #92]	; (800466c <CRC_Lock+0x60>)
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	b410      	push	{r4}
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	4c16      	ldr	r4, [pc, #88]	; (8004670 <CRC_Lock+0x64>)
 8004618:	6013      	str	r3, [r2, #0]
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	b933      	cbnz	r3, 800462c <CRC_Lock+0x20>
 800461e:	4b15      	ldr	r3, [pc, #84]	; (8004674 <CRC_Lock+0x68>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004626:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800462a:	d00f      	beq.n	800464c <CRC_Lock+0x40>
 800462c:	4a12      	ldr	r2, [pc, #72]	; (8004678 <CRC_Lock+0x6c>)
 800462e:	2301      	movs	r3, #1
 8004630:	6013      	str	r3, [r2, #0]
 8004632:	6813      	ldr	r3, [r2, #0]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1fc      	bne.n	8004632 <CRC_Lock+0x26>
 8004638:	4b10      	ldr	r3, [pc, #64]	; (800467c <CRC_Lock+0x70>)
 800463a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800463e:	6018      	str	r0, [r3, #0]
 8004640:	6818      	ldr	r0, [r3, #0]
 8004642:	1a08      	subs	r0, r1, r0
 8004644:	fab0 f080 	clz	r0, r0
 8004648:	0940      	lsrs	r0, r0, #5
 800464a:	4770      	bx	lr
 800464c:	4a0c      	ldr	r2, [pc, #48]	; (8004680 <CRC_Lock+0x74>)
 800464e:	2301      	movs	r3, #1
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	6813      	ldr	r3, [r2, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1fc      	bne.n	8004652 <CRC_Lock+0x46>
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <CRC_Lock+0x78>)
 800465a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800465e:	6018      	str	r0, [r3, #0]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	1a40      	subs	r0, r0, r1
 8004664:	fab0 f080 	clz	r0, r0
 8004668:	0940      	lsrs	r0, r0, #5
 800466a:	4770      	bx	lr
 800466c:	e0002000 	.word	0xe0002000
 8004670:	e0042000 	.word	0xe0042000
 8004674:	5c001000 	.word	0x5c001000
 8004678:	40023008 	.word	0x40023008
 800467c:	40023000 	.word	0x40023000
 8004680:	58024c08 	.word	0x58024c08
 8004684:	58024c00 	.word	0x58024c00

08004688 <__errno>:
 8004688:	4b01      	ldr	r3, [pc, #4]	; (8004690 <__errno+0x8>)
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	2000040c 	.word	0x2000040c

08004694 <__libc_init_array>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	4e0d      	ldr	r6, [pc, #52]	; (80046cc <__libc_init_array+0x38>)
 8004698:	4c0d      	ldr	r4, [pc, #52]	; (80046d0 <__libc_init_array+0x3c>)
 800469a:	1ba4      	subs	r4, r4, r6
 800469c:	10a4      	asrs	r4, r4, #2
 800469e:	2500      	movs	r5, #0
 80046a0:	42a5      	cmp	r5, r4
 80046a2:	d109      	bne.n	80046b8 <__libc_init_array+0x24>
 80046a4:	4e0b      	ldr	r6, [pc, #44]	; (80046d4 <__libc_init_array+0x40>)
 80046a6:	4c0c      	ldr	r4, [pc, #48]	; (80046d8 <__libc_init_array+0x44>)
 80046a8:	f000 fd4c 	bl	8005144 <_init>
 80046ac:	1ba4      	subs	r4, r4, r6
 80046ae:	10a4      	asrs	r4, r4, #2
 80046b0:	2500      	movs	r5, #0
 80046b2:	42a5      	cmp	r5, r4
 80046b4:	d105      	bne.n	80046c2 <__libc_init_array+0x2e>
 80046b6:	bd70      	pop	{r4, r5, r6, pc}
 80046b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046bc:	4798      	blx	r3
 80046be:	3501      	adds	r5, #1
 80046c0:	e7ee      	b.n	80046a0 <__libc_init_array+0xc>
 80046c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046c6:	4798      	blx	r3
 80046c8:	3501      	adds	r5, #1
 80046ca:	e7f2      	b.n	80046b2 <__libc_init_array+0x1e>
 80046cc:	080051e4 	.word	0x080051e4
 80046d0:	080051e4 	.word	0x080051e4
 80046d4:	080051e4 	.word	0x080051e4
 80046d8:	080051e8 	.word	0x080051e8

080046dc <memset>:
 80046dc:	4402      	add	r2, r0
 80046de:	4603      	mov	r3, r0
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d100      	bne.n	80046e6 <memset+0xa>
 80046e4:	4770      	bx	lr
 80046e6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ea:	e7f9      	b.n	80046e0 <memset+0x4>

080046ec <roundf>:
 80046ec:	ee10 0a10 	vmov	r0, s0
 80046f0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80046f4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80046f8:	2a16      	cmp	r2, #22
 80046fa:	dc15      	bgt.n	8004728 <roundf+0x3c>
 80046fc:	2a00      	cmp	r2, #0
 80046fe:	da08      	bge.n	8004712 <roundf+0x26>
 8004700:	3201      	adds	r2, #1
 8004702:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8004706:	d101      	bne.n	800470c <roundf+0x20>
 8004708:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800470c:	ee00 3a10 	vmov	s0, r3
 8004710:	4770      	bx	lr
 8004712:	4908      	ldr	r1, [pc, #32]	; (8004734 <roundf+0x48>)
 8004714:	4111      	asrs	r1, r2
 8004716:	4208      	tst	r0, r1
 8004718:	d0fa      	beq.n	8004710 <roundf+0x24>
 800471a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800471e:	4113      	asrs	r3, r2
 8004720:	4403      	add	r3, r0
 8004722:	ea23 0301 	bic.w	r3, r3, r1
 8004726:	e7f1      	b.n	800470c <roundf+0x20>
 8004728:	2a80      	cmp	r2, #128	; 0x80
 800472a:	d1f1      	bne.n	8004710 <roundf+0x24>
 800472c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	007fffff 	.word	0x007fffff

08004738 <powf>:
 8004738:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800473c:	ed2d 8b04 	vpush	{d8-d9}
 8004740:	4ca7      	ldr	r4, [pc, #668]	; (80049e0 <powf+0x2a8>)
 8004742:	b08a      	sub	sp, #40	; 0x28
 8004744:	eef0 8a40 	vmov.f32	s17, s0
 8004748:	eeb0 8a60 	vmov.f32	s16, s1
 800474c:	f000 f958 	bl	8004a00 <__ieee754_powf>
 8004750:	f994 5000 	ldrsb.w	r5, [r4]
 8004754:	1c6b      	adds	r3, r5, #1
 8004756:	eeb0 9a40 	vmov.f32	s18, s0
 800475a:	4626      	mov	r6, r4
 800475c:	d05f      	beq.n	800481e <powf+0xe6>
 800475e:	eeb4 8a48 	vcmp.f32	s16, s16
 8004762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004766:	d65a      	bvs.n	800481e <powf+0xe6>
 8004768:	eef4 8a68 	vcmp.f32	s17, s17
 800476c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004770:	d721      	bvc.n	80047b6 <powf+0x7e>
 8004772:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	d150      	bne.n	800481e <powf+0xe6>
 800477c:	2301      	movs	r3, #1
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	4b98      	ldr	r3, [pc, #608]	; (80049e4 <powf+0x2ac>)
 8004782:	9301      	str	r3, [sp, #4]
 8004784:	ee18 0a90 	vmov	r0, s17
 8004788:	2300      	movs	r3, #0
 800478a:	9308      	str	r3, [sp, #32]
 800478c:	f7fb fe80 	bl	8000490 <__aeabi_f2d>
 8004790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004794:	ee18 0a10 	vmov	r0, s16
 8004798:	f7fb fe7a 	bl	8000490 <__aeabi_f2d>
 800479c:	4b92      	ldr	r3, [pc, #584]	; (80049e8 <powf+0x2b0>)
 800479e:	2200      	movs	r2, #0
 80047a0:	2d02      	cmp	r5, #2
 80047a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80047aa:	d032      	beq.n	8004812 <powf+0xda>
 80047ac:	4668      	mov	r0, sp
 80047ae:	f000 fbea 	bl	8004f86 <matherr>
 80047b2:	bb40      	cbnz	r0, 8004806 <powf+0xce>
 80047b4:	e065      	b.n	8004882 <powf+0x14a>
 80047b6:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80049ec <powf+0x2b4>
 80047ba:	eef4 8a69 	vcmp.f32	s17, s19
 80047be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c2:	d163      	bne.n	800488c <powf+0x154>
 80047c4:	eeb4 8a69 	vcmp.f32	s16, s19
 80047c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047cc:	d12e      	bne.n	800482c <powf+0xf4>
 80047ce:	2301      	movs	r3, #1
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	4b84      	ldr	r3, [pc, #528]	; (80049e4 <powf+0x2ac>)
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	ee18 0a90 	vmov	r0, s17
 80047da:	2300      	movs	r3, #0
 80047dc:	9308      	str	r3, [sp, #32]
 80047de:	f7fb fe57 	bl	8000490 <__aeabi_f2d>
 80047e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047e6:	ee18 0a10 	vmov	r0, s16
 80047ea:	f7fb fe51 	bl	8000490 <__aeabi_f2d>
 80047ee:	2200      	movs	r2, #0
 80047f0:	2300      	movs	r3, #0
 80047f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80047f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80047fa:	2d00      	cmp	r5, #0
 80047fc:	d0d6      	beq.n	80047ac <powf+0x74>
 80047fe:	4b7a      	ldr	r3, [pc, #488]	; (80049e8 <powf+0x2b0>)
 8004800:	2200      	movs	r2, #0
 8004802:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004806:	9b08      	ldr	r3, [sp, #32]
 8004808:	b11b      	cbz	r3, 8004812 <powf+0xda>
 800480a:	f7ff ff3d 	bl	8004688 <__errno>
 800480e:	9b08      	ldr	r3, [sp, #32]
 8004810:	6003      	str	r3, [r0, #0]
 8004812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004816:	f7fb fe93 	bl	8000540 <__aeabi_d2f>
 800481a:	ee09 0a10 	vmov	s18, r0
 800481e:	eeb0 0a49 	vmov.f32	s0, s18
 8004822:	b00a      	add	sp, #40	; 0x28
 8004824:	ecbd 8b04 	vpop	{d8-d9}
 8004828:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800482c:	eeb0 0a48 	vmov.f32	s0, s16
 8004830:	f000 fbb2 	bl	8004f98 <finitef>
 8004834:	2800      	cmp	r0, #0
 8004836:	d0f2      	beq.n	800481e <powf+0xe6>
 8004838:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800483c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004840:	d5ed      	bpl.n	800481e <powf+0xe6>
 8004842:	2301      	movs	r3, #1
 8004844:	9300      	str	r3, [sp, #0]
 8004846:	4b67      	ldr	r3, [pc, #412]	; (80049e4 <powf+0x2ac>)
 8004848:	9301      	str	r3, [sp, #4]
 800484a:	ee18 0a90 	vmov	r0, s17
 800484e:	2300      	movs	r3, #0
 8004850:	9308      	str	r3, [sp, #32]
 8004852:	f7fb fe1d 	bl	8000490 <__aeabi_f2d>
 8004856:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800485a:	ee18 0a10 	vmov	r0, s16
 800485e:	f7fb fe17 	bl	8000490 <__aeabi_f2d>
 8004862:	f994 3000 	ldrsb.w	r3, [r4]
 8004866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800486a:	b923      	cbnz	r3, 8004876 <powf+0x13e>
 800486c:	2200      	movs	r2, #0
 800486e:	2300      	movs	r3, #0
 8004870:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004874:	e79a      	b.n	80047ac <powf+0x74>
 8004876:	495e      	ldr	r1, [pc, #376]	; (80049f0 <powf+0x2b8>)
 8004878:	2000      	movs	r0, #0
 800487a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d194      	bne.n	80047ac <powf+0x74>
 8004882:	f7ff ff01 	bl	8004688 <__errno>
 8004886:	2321      	movs	r3, #33	; 0x21
 8004888:	6003      	str	r3, [r0, #0]
 800488a:	e7bc      	b.n	8004806 <powf+0xce>
 800488c:	f000 fb84 	bl	8004f98 <finitef>
 8004890:	4605      	mov	r5, r0
 8004892:	2800      	cmp	r0, #0
 8004894:	d173      	bne.n	800497e <powf+0x246>
 8004896:	eeb0 0a68 	vmov.f32	s0, s17
 800489a:	f000 fb7d 	bl	8004f98 <finitef>
 800489e:	2800      	cmp	r0, #0
 80048a0:	d06d      	beq.n	800497e <powf+0x246>
 80048a2:	eeb0 0a48 	vmov.f32	s0, s16
 80048a6:	f000 fb77 	bl	8004f98 <finitef>
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d067      	beq.n	800497e <powf+0x246>
 80048ae:	ee18 0a90 	vmov	r0, s17
 80048b2:	f7fb fded 	bl	8000490 <__aeabi_f2d>
 80048b6:	4680      	mov	r8, r0
 80048b8:	ee18 0a10 	vmov	r0, s16
 80048bc:	4689      	mov	r9, r1
 80048be:	f7fb fde7 	bl	8000490 <__aeabi_f2d>
 80048c2:	eeb4 9a49 	vcmp.f32	s18, s18
 80048c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ca:	f994 4000 	ldrsb.w	r4, [r4]
 80048ce:	4b45      	ldr	r3, [pc, #276]	; (80049e4 <powf+0x2ac>)
 80048d0:	d713      	bvc.n	80048fa <powf+0x1c2>
 80048d2:	2201      	movs	r2, #1
 80048d4:	e9cd 2300 	strd	r2, r3, [sp]
 80048d8:	9508      	str	r5, [sp, #32]
 80048da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80048de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048e2:	2c00      	cmp	r4, #0
 80048e4:	d0c2      	beq.n	800486c <powf+0x134>
 80048e6:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80048ea:	ee17 0a90 	vmov	r0, s15
 80048ee:	f7fb fdcf 	bl	8000490 <__aeabi_f2d>
 80048f2:	2c02      	cmp	r4, #2
 80048f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80048f8:	e7c2      	b.n	8004880 <powf+0x148>
 80048fa:	2203      	movs	r2, #3
 80048fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004900:	e9cd 2300 	strd	r2, r3, [sp]
 8004904:	9508      	str	r5, [sp, #32]
 8004906:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800490a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800490e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004912:	b9fc      	cbnz	r4, 8004954 <powf+0x21c>
 8004914:	4b37      	ldr	r3, [pc, #220]	; (80049f4 <powf+0x2bc>)
 8004916:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800491a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800491e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004922:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004926:	d553      	bpl.n	80049d0 <powf+0x298>
 8004928:	eeb0 0a48 	vmov.f32	s0, s16
 800492c:	f000 fb44 	bl	8004fb8 <rintf>
 8004930:	eeb4 0a48 	vcmp.f32	s0, s16
 8004934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004938:	d004      	beq.n	8004944 <powf+0x20c>
 800493a:	4b2f      	ldr	r3, [pc, #188]	; (80049f8 <powf+0x2c0>)
 800493c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004940:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004944:	f996 3000 	ldrsb.w	r3, [r6]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d141      	bne.n	80049d0 <powf+0x298>
 800494c:	f7ff fe9c 	bl	8004688 <__errno>
 8004950:	2322      	movs	r3, #34	; 0x22
 8004952:	e799      	b.n	8004888 <powf+0x150>
 8004954:	4b29      	ldr	r3, [pc, #164]	; (80049fc <powf+0x2c4>)
 8004956:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800495a:	2200      	movs	r2, #0
 800495c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004960:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004964:	d5ee      	bpl.n	8004944 <powf+0x20c>
 8004966:	eeb0 0a48 	vmov.f32	s0, s16
 800496a:	f000 fb25 	bl	8004fb8 <rintf>
 800496e:	eeb4 0a48 	vcmp.f32	s0, s16
 8004972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004976:	d0e5      	beq.n	8004944 <powf+0x20c>
 8004978:	2200      	movs	r2, #0
 800497a:	4b1d      	ldr	r3, [pc, #116]	; (80049f0 <powf+0x2b8>)
 800497c:	e7e0      	b.n	8004940 <powf+0x208>
 800497e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004986:	f47f af4a 	bne.w	800481e <powf+0xe6>
 800498a:	eeb0 0a68 	vmov.f32	s0, s17
 800498e:	f000 fb03 	bl	8004f98 <finitef>
 8004992:	2800      	cmp	r0, #0
 8004994:	f43f af43 	beq.w	800481e <powf+0xe6>
 8004998:	eeb0 0a48 	vmov.f32	s0, s16
 800499c:	f000 fafc 	bl	8004f98 <finitef>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	f43f af3c 	beq.w	800481e <powf+0xe6>
 80049a6:	2304      	movs	r3, #4
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	4b0e      	ldr	r3, [pc, #56]	; (80049e4 <powf+0x2ac>)
 80049ac:	9301      	str	r3, [sp, #4]
 80049ae:	ee18 0a90 	vmov	r0, s17
 80049b2:	2300      	movs	r3, #0
 80049b4:	9308      	str	r3, [sp, #32]
 80049b6:	f7fb fd6b 	bl	8000490 <__aeabi_f2d>
 80049ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80049be:	ee18 0a10 	vmov	r0, s16
 80049c2:	f7fb fd65 	bl	8000490 <__aeabi_f2d>
 80049c6:	2200      	movs	r2, #0
 80049c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049cc:	2300      	movs	r3, #0
 80049ce:	e7b7      	b.n	8004940 <powf+0x208>
 80049d0:	4668      	mov	r0, sp
 80049d2:	f000 fad8 	bl	8004f86 <matherr>
 80049d6:	2800      	cmp	r0, #0
 80049d8:	f47f af15 	bne.w	8004806 <powf+0xce>
 80049dc:	e7b6      	b.n	800494c <powf+0x214>
 80049de:	bf00      	nop
 80049e0:	20000470 	.word	0x20000470
 80049e4:	080051b4 	.word	0x080051b4
 80049e8:	3ff00000 	.word	0x3ff00000
 80049ec:	00000000 	.word	0x00000000
 80049f0:	fff00000 	.word	0xfff00000
 80049f4:	47efffff 	.word	0x47efffff
 80049f8:	c7efffff 	.word	0xc7efffff
 80049fc:	7ff00000 	.word	0x7ff00000

08004a00 <__ieee754_powf>:
 8004a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a04:	ee10 5a90 	vmov	r5, s1
 8004a08:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8004a0c:	ed2d 8b02 	vpush	{d8}
 8004a10:	eeb0 8a40 	vmov.f32	s16, s0
 8004a14:	eef0 8a60 	vmov.f32	s17, s1
 8004a18:	f000 8293 	beq.w	8004f42 <__ieee754_powf+0x542>
 8004a1c:	ee10 8a10 	vmov	r8, s0
 8004a20:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8004a24:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8004a28:	dc06      	bgt.n	8004a38 <__ieee754_powf+0x38>
 8004a2a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8004a2e:	dd0a      	ble.n	8004a46 <__ieee754_powf+0x46>
 8004a30:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004a34:	f000 8285 	beq.w	8004f42 <__ieee754_powf+0x542>
 8004a38:	ecbd 8b02 	vpop	{d8}
 8004a3c:	48d9      	ldr	r0, [pc, #868]	; (8004da4 <__ieee754_powf+0x3a4>)
 8004a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a42:	f000 bab3 	b.w	8004fac <nanf>
 8004a46:	f1b8 0f00 	cmp.w	r8, #0
 8004a4a:	da1d      	bge.n	8004a88 <__ieee754_powf+0x88>
 8004a4c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8004a50:	da2c      	bge.n	8004aac <__ieee754_powf+0xac>
 8004a52:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8004a56:	db30      	blt.n	8004aba <__ieee754_powf+0xba>
 8004a58:	15fb      	asrs	r3, r7, #23
 8004a5a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8004a5e:	fa47 f603 	asr.w	r6, r7, r3
 8004a62:	fa06 f303 	lsl.w	r3, r6, r3
 8004a66:	42bb      	cmp	r3, r7
 8004a68:	d127      	bne.n	8004aba <__ieee754_powf+0xba>
 8004a6a:	f006 0601 	and.w	r6, r6, #1
 8004a6e:	f1c6 0602 	rsb	r6, r6, #2
 8004a72:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8004a76:	d122      	bne.n	8004abe <__ieee754_powf+0xbe>
 8004a78:	2d00      	cmp	r5, #0
 8004a7a:	f280 8268 	bge.w	8004f4e <__ieee754_powf+0x54e>
 8004a7e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004a82:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8004a86:	e00d      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004a88:	2600      	movs	r6, #0
 8004a8a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8004a8e:	d1f0      	bne.n	8004a72 <__ieee754_powf+0x72>
 8004a90:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8004a94:	f000 8255 	beq.w	8004f42 <__ieee754_powf+0x542>
 8004a98:	dd0a      	ble.n	8004ab0 <__ieee754_powf+0xb0>
 8004a9a:	2d00      	cmp	r5, #0
 8004a9c:	f280 8254 	bge.w	8004f48 <__ieee754_powf+0x548>
 8004aa0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8004da8 <__ieee754_powf+0x3a8>
 8004aa4:	ecbd 8b02 	vpop	{d8}
 8004aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004aac:	2602      	movs	r6, #2
 8004aae:	e7ec      	b.n	8004a8a <__ieee754_powf+0x8a>
 8004ab0:	2d00      	cmp	r5, #0
 8004ab2:	daf5      	bge.n	8004aa0 <__ieee754_powf+0xa0>
 8004ab4:	eeb1 0a68 	vneg.f32	s0, s17
 8004ab8:	e7f4      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004aba:	2600      	movs	r6, #0
 8004abc:	e7d9      	b.n	8004a72 <__ieee754_powf+0x72>
 8004abe:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8004ac2:	d102      	bne.n	8004aca <__ieee754_powf+0xca>
 8004ac4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8004ac8:	e7ec      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004aca:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8004ace:	eeb0 0a48 	vmov.f32	s0, s16
 8004ad2:	d108      	bne.n	8004ae6 <__ieee754_powf+0xe6>
 8004ad4:	f1b8 0f00 	cmp.w	r8, #0
 8004ad8:	db05      	blt.n	8004ae6 <__ieee754_powf+0xe6>
 8004ada:	ecbd 8b02 	vpop	{d8}
 8004ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ae2:	f000 ba4d 	b.w	8004f80 <__ieee754_sqrtf>
 8004ae6:	f000 fa50 	bl	8004f8a <fabsf>
 8004aea:	b124      	cbz	r4, 8004af6 <__ieee754_powf+0xf6>
 8004aec:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8004af0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8004af4:	d117      	bne.n	8004b26 <__ieee754_powf+0x126>
 8004af6:	2d00      	cmp	r5, #0
 8004af8:	bfbc      	itt	lt
 8004afa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8004afe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8004b02:	f1b8 0f00 	cmp.w	r8, #0
 8004b06:	dacd      	bge.n	8004aa4 <__ieee754_powf+0xa4>
 8004b08:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8004b0c:	ea54 0306 	orrs.w	r3, r4, r6
 8004b10:	d104      	bne.n	8004b1c <__ieee754_powf+0x11c>
 8004b12:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004b16:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004b1a:	e7c3      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004b1c:	2e01      	cmp	r6, #1
 8004b1e:	d1c1      	bne.n	8004aa4 <__ieee754_powf+0xa4>
 8004b20:	eeb1 0a40 	vneg.f32	s0, s0
 8004b24:	e7be      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004b26:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8004b2a:	3801      	subs	r0, #1
 8004b2c:	ea56 0300 	orrs.w	r3, r6, r0
 8004b30:	d104      	bne.n	8004b3c <__ieee754_powf+0x13c>
 8004b32:	ee38 8a48 	vsub.f32	s16, s16, s16
 8004b36:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8004b3a:	e7b3      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004b3c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8004b40:	dd6d      	ble.n	8004c1e <__ieee754_powf+0x21e>
 8004b42:	4b9a      	ldr	r3, [pc, #616]	; (8004dac <__ieee754_powf+0x3ac>)
 8004b44:	429c      	cmp	r4, r3
 8004b46:	dc06      	bgt.n	8004b56 <__ieee754_powf+0x156>
 8004b48:	2d00      	cmp	r5, #0
 8004b4a:	daa9      	bge.n	8004aa0 <__ieee754_powf+0xa0>
 8004b4c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8004db0 <__ieee754_powf+0x3b0>
 8004b50:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004b54:	e7a6      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004b56:	4b97      	ldr	r3, [pc, #604]	; (8004db4 <__ieee754_powf+0x3b4>)
 8004b58:	429c      	cmp	r4, r3
 8004b5a:	dd02      	ble.n	8004b62 <__ieee754_powf+0x162>
 8004b5c:	2d00      	cmp	r5, #0
 8004b5e:	dcf5      	bgt.n	8004b4c <__ieee754_powf+0x14c>
 8004b60:	e79e      	b.n	8004aa0 <__ieee754_powf+0xa0>
 8004b62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004b66:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004b6a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8004db8 <__ieee754_powf+0x3b8>
 8004b6e:	eef1 6a40 	vneg.f32	s13, s0
 8004b72:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8004b76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8004b7a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004b7e:	eee7 7a40 	vfms.f32	s15, s14, s0
 8004b82:	ee60 0a00 	vmul.f32	s1, s0, s0
 8004b86:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8004dbc <__ieee754_powf+0x3bc>
 8004b8a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8004b8e:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8004dc0 <__ieee754_powf+0x3c0>
 8004b92:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8004b96:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004b9a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8004dc4 <__ieee754_powf+0x3c4>
 8004b9e:	eeb0 6a67 	vmov.f32	s12, s15
 8004ba2:	eea0 6a07 	vfma.f32	s12, s0, s14
 8004ba6:	ee16 3a10 	vmov	r3, s12
 8004baa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004bae:	f023 030f 	bic.w	r3, r3, #15
 8004bb2:	ee00 3a90 	vmov	s1, r3
 8004bb6:	eee6 0a87 	vfma.f32	s1, s13, s14
 8004bba:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004bbe:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8004bc2:	f025 050f 	bic.w	r5, r5, #15
 8004bc6:	ee07 5a10 	vmov	s14, r5
 8004bca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8004bce:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8004bd2:	ee07 3a90 	vmov	s15, r3
 8004bd6:	eee7 0a27 	vfma.f32	s1, s14, s15
 8004bda:	3e01      	subs	r6, #1
 8004bdc:	ea56 0200 	orrs.w	r2, r6, r0
 8004be0:	ee07 5a10 	vmov	s14, r5
 8004be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004be8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004bec:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8004bf0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004bf4:	ee17 4a10 	vmov	r4, s14
 8004bf8:	bf08      	it	eq
 8004bfa:	eeb0 8a40 	vmoveq.f32	s16, s0
 8004bfe:	2c00      	cmp	r4, #0
 8004c00:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004c04:	f340 8184 	ble.w	8004f10 <__ieee754_powf+0x510>
 8004c08:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8004c0c:	f340 80fc 	ble.w	8004e08 <__ieee754_powf+0x408>
 8004c10:	eddf 7a67 	vldr	s15, [pc, #412]	; 8004db0 <__ieee754_powf+0x3b0>
 8004c14:	ee28 0a27 	vmul.f32	s0, s16, s15
 8004c18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004c1c:	e742      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004c1e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8004c22:	bfbf      	itttt	lt
 8004c24:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8004dc8 <__ieee754_powf+0x3c8>
 8004c28:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8004c2c:	f06f 0217 	mvnlt.w	r2, #23
 8004c30:	ee17 4a90 	vmovlt	r4, s15
 8004c34:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8004c38:	bfa8      	it	ge
 8004c3a:	2200      	movge	r2, #0
 8004c3c:	3b7f      	subs	r3, #127	; 0x7f
 8004c3e:	4413      	add	r3, r2
 8004c40:	4a62      	ldr	r2, [pc, #392]	; (8004dcc <__ieee754_powf+0x3cc>)
 8004c42:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8004c46:	4294      	cmp	r4, r2
 8004c48:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8004c4c:	dd06      	ble.n	8004c5c <__ieee754_powf+0x25c>
 8004c4e:	4a60      	ldr	r2, [pc, #384]	; (8004dd0 <__ieee754_powf+0x3d0>)
 8004c50:	4294      	cmp	r4, r2
 8004c52:	f340 80a5 	ble.w	8004da0 <__ieee754_powf+0x3a0>
 8004c56:	3301      	adds	r3, #1
 8004c58:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8004c5c:	2400      	movs	r4, #0
 8004c5e:	4a5d      	ldr	r2, [pc, #372]	; (8004dd4 <__ieee754_powf+0x3d4>)
 8004c60:	00a7      	lsls	r7, r4, #2
 8004c62:	443a      	add	r2, r7
 8004c64:	ee07 1a90 	vmov	s15, r1
 8004c68:	ed92 7a00 	vldr	s14, [r2]
 8004c6c:	4a5a      	ldr	r2, [pc, #360]	; (8004dd8 <__ieee754_powf+0x3d8>)
 8004c6e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004c72:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8004c76:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8004c7a:	1049      	asrs	r1, r1, #1
 8004c7c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8004c80:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8004c84:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8004c88:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8004c8c:	ee06 1a10 	vmov	s12, r1
 8004c90:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8004c94:	ee14 ca90 	vmov	ip, s9
 8004c98:	ea02 0c0c 	and.w	ip, r2, ip
 8004c9c:	ee05 ca10 	vmov	s10, ip
 8004ca0:	eeb1 4a45 	vneg.f32	s8, s10
 8004ca4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8004ca8:	ee36 6a47 	vsub.f32	s12, s12, s14
 8004cac:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8004ddc <__ieee754_powf+0x3dc>
 8004cb0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8004cb4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8004cb8:	eee4 5a06 	vfma.f32	s11, s8, s12
 8004cbc:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8004cc0:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8004cc4:	eddf 5a46 	vldr	s11, [pc, #280]	; 8004de0 <__ieee754_powf+0x3e0>
 8004cc8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004ccc:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004de4 <__ieee754_powf+0x3e4>
 8004cd0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004cd4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004db8 <__ieee754_powf+0x3b8>
 8004cd8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004cdc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8004de8 <__ieee754_powf+0x3e8>
 8004ce0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8004ce4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8004dec <__ieee754_powf+0x3ec>
 8004ce8:	ee75 6a24 	vadd.f32	s13, s10, s9
 8004cec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004cf0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004cf4:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8004cf8:	eef0 7a65 	vmov.f32	s15, s11
 8004cfc:	eee3 6a87 	vfma.f32	s13, s7, s14
 8004d00:	eee5 7a05 	vfma.f32	s15, s10, s10
 8004d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d08:	ee17 1a90 	vmov	r1, s15
 8004d0c:	4011      	ands	r1, r2
 8004d0e:	ee07 1a90 	vmov	s15, r1
 8004d12:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8004d16:	eddf 5a36 	vldr	s11, [pc, #216]	; 8004df0 <__ieee754_powf+0x3f0>
 8004d1a:	eea4 7a05 	vfma.f32	s14, s8, s10
 8004d1e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004d22:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004d26:	eea7 7a86 	vfma.f32	s14, s15, s12
 8004d2a:	eeb0 6a47 	vmov.f32	s12, s14
 8004d2e:	eea5 6a27 	vfma.f32	s12, s10, s15
 8004d32:	ee16 1a10 	vmov	r1, s12
 8004d36:	4011      	ands	r1, r2
 8004d38:	ee06 1a90 	vmov	s13, r1
 8004d3c:	eee4 6a27 	vfma.f32	s13, s8, s15
 8004d40:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8004df4 <__ieee754_powf+0x3f4>
 8004d44:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004d48:	ee06 1a10 	vmov	s12, r1
 8004d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004d50:	eddf 7a29 	vldr	s15, [pc, #164]	; 8004df8 <__ieee754_powf+0x3f8>
 8004d54:	4929      	ldr	r1, [pc, #164]	; (8004dfc <__ieee754_powf+0x3fc>)
 8004d56:	eea6 7a27 	vfma.f32	s14, s12, s15
 8004d5a:	4439      	add	r1, r7
 8004d5c:	edd1 7a00 	vldr	s15, [r1]
 8004d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004d64:	ee07 3a90 	vmov	s15, r3
 8004d68:	eef0 0a47 	vmov.f32	s1, s14
 8004d6c:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <__ieee754_powf+0x400>)
 8004d6e:	eee6 0a25 	vfma.f32	s1, s12, s11
 8004d72:	443b      	add	r3, r7
 8004d74:	ed93 5a00 	vldr	s10, [r3]
 8004d78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004d7c:	ee70 0a85 	vadd.f32	s1, s1, s10
 8004d80:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8004d84:	ee17 3a90 	vmov	r3, s15
 8004d88:	4013      	ands	r3, r2
 8004d8a:	ee07 3a90 	vmov	s15, r3
 8004d8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004d92:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004d96:	eee6 7a65 	vfms.f32	s15, s12, s11
 8004d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d9e:	e70e      	b.n	8004bbe <__ieee754_powf+0x1be>
 8004da0:	2401      	movs	r4, #1
 8004da2:	e75c      	b.n	8004c5e <__ieee754_powf+0x25e>
 8004da4:	080051b8 	.word	0x080051b8
 8004da8:	00000000 	.word	0x00000000
 8004dac:	3f7ffff7 	.word	0x3f7ffff7
 8004db0:	7149f2ca 	.word	0x7149f2ca
 8004db4:	3f800007 	.word	0x3f800007
 8004db8:	3eaaaaab 	.word	0x3eaaaaab
 8004dbc:	36eca570 	.word	0x36eca570
 8004dc0:	3fb8aa3b 	.word	0x3fb8aa3b
 8004dc4:	3fb8aa00 	.word	0x3fb8aa00
 8004dc8:	4b800000 	.word	0x4b800000
 8004dcc:	001cc471 	.word	0x001cc471
 8004dd0:	005db3d6 	.word	0x005db3d6
 8004dd4:	080051bc 	.word	0x080051bc
 8004dd8:	fffff000 	.word	0xfffff000
 8004ddc:	3e6c3255 	.word	0x3e6c3255
 8004de0:	3e53f142 	.word	0x3e53f142
 8004de4:	3e8ba305 	.word	0x3e8ba305
 8004de8:	3edb6db7 	.word	0x3edb6db7
 8004dec:	3f19999a 	.word	0x3f19999a
 8004df0:	3f763800 	.word	0x3f763800
 8004df4:	3f76384f 	.word	0x3f76384f
 8004df8:	369dc3a0 	.word	0x369dc3a0
 8004dfc:	080051cc 	.word	0x080051cc
 8004e00:	080051c4 	.word	0x080051c4
 8004e04:	3338aa3c 	.word	0x3338aa3c
 8004e08:	f040 8092 	bne.w	8004f30 <__ieee754_powf+0x530>
 8004e0c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8004e04 <__ieee754_powf+0x404>
 8004e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004e14:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8004e18:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e20:	f73f aef6 	bgt.w	8004c10 <__ieee754_powf+0x210>
 8004e24:	15db      	asrs	r3, r3, #23
 8004e26:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8004e2a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004e2e:	4103      	asrs	r3, r0
 8004e30:	4423      	add	r3, r4
 8004e32:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004e36:	4947      	ldr	r1, [pc, #284]	; (8004f54 <__ieee754_powf+0x554>)
 8004e38:	3a7f      	subs	r2, #127	; 0x7f
 8004e3a:	4111      	asrs	r1, r2
 8004e3c:	ea23 0101 	bic.w	r1, r3, r1
 8004e40:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8004e44:	ee07 1a10 	vmov	s14, r1
 8004e48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004e4c:	f1c2 0217 	rsb	r2, r2, #23
 8004e50:	4110      	asrs	r0, r2
 8004e52:	2c00      	cmp	r4, #0
 8004e54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e58:	bfb8      	it	lt
 8004e5a:	4240      	neglt	r0, r0
 8004e5c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8004e60:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004f58 <__ieee754_powf+0x558>
 8004e64:	ee17 3a10 	vmov	r3, s14
 8004e68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e6c:	f023 030f 	bic.w	r3, r3, #15
 8004e70:	ee07 3a10 	vmov	s14, r3
 8004e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e78:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8004e7c:	eddf 7a37 	vldr	s15, [pc, #220]	; 8004f5c <__ieee754_powf+0x55c>
 8004e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e84:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8004e88:	eddf 6a35 	vldr	s13, [pc, #212]	; 8004f60 <__ieee754_powf+0x560>
 8004e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e90:	eea7 0a26 	vfma.f32	s0, s14, s13
 8004e94:	eeb0 6a40 	vmov.f32	s12, s0
 8004e98:	eea7 6a66 	vfms.f32	s12, s14, s13
 8004e9c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004ea0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8004ea4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8004f64 <__ieee754_powf+0x564>
 8004ea8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8004f68 <__ieee754_powf+0x568>
 8004eac:	eea7 6a26 	vfma.f32	s12, s14, s13
 8004eb0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8004f6c <__ieee754_powf+0x56c>
 8004eb4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004eb8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8004f70 <__ieee754_powf+0x570>
 8004ebc:	eea6 6a87 	vfma.f32	s12, s13, s14
 8004ec0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8004f74 <__ieee754_powf+0x574>
 8004ec4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8004ec8:	eeb0 6a40 	vmov.f32	s12, s0
 8004ecc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8004ed0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004ed4:	eeb0 7a46 	vmov.f32	s14, s12
 8004ed8:	ee77 6a66 	vsub.f32	s13, s14, s13
 8004edc:	ee20 6a06 	vmul.f32	s12, s0, s12
 8004ee0:	eee0 7a27 	vfma.f32	s15, s0, s15
 8004ee4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8004ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004ef0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004ef4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8004ef8:	ee10 3a10 	vmov	r3, s0
 8004efc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8004f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f04:	da1a      	bge.n	8004f3c <__ieee754_powf+0x53c>
 8004f06:	f000 f8b1 	bl	800506c <scalbnf>
 8004f0a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004f0e:	e5c9      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004f10:	4a19      	ldr	r2, [pc, #100]	; (8004f78 <__ieee754_powf+0x578>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	dd02      	ble.n	8004f1c <__ieee754_powf+0x51c>
 8004f16:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004f7c <__ieee754_powf+0x57c>
 8004f1a:	e67b      	b.n	8004c14 <__ieee754_powf+0x214>
 8004f1c:	d108      	bne.n	8004f30 <__ieee754_powf+0x530>
 8004f1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004f22:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8004f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2a:	f6ff af7b 	blt.w	8004e24 <__ieee754_powf+0x424>
 8004f2e:	e7f2      	b.n	8004f16 <__ieee754_powf+0x516>
 8004f30:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8004f34:	f73f af76 	bgt.w	8004e24 <__ieee754_powf+0x424>
 8004f38:	2000      	movs	r0, #0
 8004f3a:	e78f      	b.n	8004e5c <__ieee754_powf+0x45c>
 8004f3c:	ee00 3a10 	vmov	s0, r3
 8004f40:	e7e3      	b.n	8004f0a <__ieee754_powf+0x50a>
 8004f42:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004f46:	e5ad      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004f48:	eeb0 0a68 	vmov.f32	s0, s17
 8004f4c:	e5aa      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004f4e:	eeb0 0a48 	vmov.f32	s0, s16
 8004f52:	e5a7      	b.n	8004aa4 <__ieee754_powf+0xa4>
 8004f54:	007fffff 	.word	0x007fffff
 8004f58:	3f317218 	.word	0x3f317218
 8004f5c:	35bfbe8c 	.word	0x35bfbe8c
 8004f60:	3f317200 	.word	0x3f317200
 8004f64:	3331bb4c 	.word	0x3331bb4c
 8004f68:	b5ddea0e 	.word	0xb5ddea0e
 8004f6c:	388ab355 	.word	0x388ab355
 8004f70:	bb360b61 	.word	0xbb360b61
 8004f74:	3e2aaaab 	.word	0x3e2aaaab
 8004f78:	43160000 	.word	0x43160000
 8004f7c:	0da24260 	.word	0x0da24260

08004f80 <__ieee754_sqrtf>:
 8004f80:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004f84:	4770      	bx	lr

08004f86 <matherr>:
 8004f86:	2000      	movs	r0, #0
 8004f88:	4770      	bx	lr

08004f8a <fabsf>:
 8004f8a:	ee10 3a10 	vmov	r3, s0
 8004f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f92:	ee00 3a10 	vmov	s0, r3
 8004f96:	4770      	bx	lr

08004f98 <finitef>:
 8004f98:	ee10 3a10 	vmov	r3, s0
 8004f9c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8004fa0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004fa4:	bfac      	ite	ge
 8004fa6:	2000      	movge	r0, #0
 8004fa8:	2001      	movlt	r0, #1
 8004faa:	4770      	bx	lr

08004fac <nanf>:
 8004fac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004fb4 <nanf+0x8>
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	7fc00000 	.word	0x7fc00000

08004fb8 <rintf>:
 8004fb8:	b513      	push	{r0, r1, r4, lr}
 8004fba:	ee10 1a10 	vmov	r1, s0
 8004fbe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004fc2:	0ddc      	lsrs	r4, r3, #23
 8004fc4:	3c7f      	subs	r4, #127	; 0x7f
 8004fc6:	2c16      	cmp	r4, #22
 8004fc8:	dc46      	bgt.n	8005058 <rintf+0xa0>
 8004fca:	b32b      	cbz	r3, 8005018 <rintf+0x60>
 8004fcc:	2c00      	cmp	r4, #0
 8004fce:	ee10 2a10 	vmov	r2, s0
 8004fd2:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8004fd6:	da21      	bge.n	800501c <rintf+0x64>
 8004fd8:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8004fdc:	425b      	negs	r3, r3
 8004fde:	4a21      	ldr	r2, [pc, #132]	; (8005064 <rintf+0xac>)
 8004fe0:	0a5b      	lsrs	r3, r3, #9
 8004fe2:	0d09      	lsrs	r1, r1, #20
 8004fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fe8:	0509      	lsls	r1, r1, #20
 8004fea:	430b      	orrs	r3, r1
 8004fec:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004ff0:	ee07 3a90 	vmov	s15, r3
 8004ff4:	edd2 6a00 	vldr	s13, [r2]
 8004ff8:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8004ffc:	ed8d 7a01 	vstr	s14, [sp, #4]
 8005000:	eddd 7a01 	vldr	s15, [sp, #4]
 8005004:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005008:	ee17 3a90 	vmov	r3, s15
 800500c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005010:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8005014:	ee00 3a10 	vmov	s0, r3
 8005018:	b002      	add	sp, #8
 800501a:	bd10      	pop	{r4, pc}
 800501c:	4b12      	ldr	r3, [pc, #72]	; (8005068 <rintf+0xb0>)
 800501e:	4123      	asrs	r3, r4
 8005020:	4219      	tst	r1, r3
 8005022:	d0f9      	beq.n	8005018 <rintf+0x60>
 8005024:	085b      	lsrs	r3, r3, #1
 8005026:	4219      	tst	r1, r3
 8005028:	d006      	beq.n	8005038 <rintf+0x80>
 800502a:	ea21 0203 	bic.w	r2, r1, r3
 800502e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005032:	fa43 f404 	asr.w	r4, r3, r4
 8005036:	4322      	orrs	r2, r4
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <rintf+0xac>)
 800503a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800503e:	ed90 7a00 	vldr	s14, [r0]
 8005042:	ee07 2a90 	vmov	s15, r2
 8005046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800504a:	edcd 7a01 	vstr	s15, [sp, #4]
 800504e:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005052:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005056:	e7df      	b.n	8005018 <rintf+0x60>
 8005058:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800505c:	d3dc      	bcc.n	8005018 <rintf+0x60>
 800505e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005062:	e7d9      	b.n	8005018 <rintf+0x60>
 8005064:	080051d4 	.word	0x080051d4
 8005068:	007fffff 	.word	0x007fffff

0800506c <scalbnf>:
 800506c:	b508      	push	{r3, lr}
 800506e:	ee10 2a10 	vmov	r2, s0
 8005072:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8005076:	ed2d 8b02 	vpush	{d8}
 800507a:	eef0 0a40 	vmov.f32	s1, s0
 800507e:	d004      	beq.n	800508a <scalbnf+0x1e>
 8005080:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005084:	d306      	bcc.n	8005094 <scalbnf+0x28>
 8005086:	ee70 0a00 	vadd.f32	s1, s0, s0
 800508a:	ecbd 8b02 	vpop	{d8}
 800508e:	eeb0 0a60 	vmov.f32	s0, s1
 8005092:	bd08      	pop	{r3, pc}
 8005094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005098:	d21c      	bcs.n	80050d4 <scalbnf+0x68>
 800509a:	4b1f      	ldr	r3, [pc, #124]	; (8005118 <scalbnf+0xac>)
 800509c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800511c <scalbnf+0xb0>
 80050a0:	4298      	cmp	r0, r3
 80050a2:	ee60 0a27 	vmul.f32	s1, s0, s15
 80050a6:	db10      	blt.n	80050ca <scalbnf+0x5e>
 80050a8:	ee10 2a90 	vmov	r2, s1
 80050ac:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80050b0:	3b19      	subs	r3, #25
 80050b2:	4403      	add	r3, r0
 80050b4:	2bfe      	cmp	r3, #254	; 0xfe
 80050b6:	dd0f      	ble.n	80050d8 <scalbnf+0x6c>
 80050b8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8005120 <scalbnf+0xb4>
 80050bc:	eeb0 0a48 	vmov.f32	s0, s16
 80050c0:	f000 f834 	bl	800512c <copysignf>
 80050c4:	ee60 0a08 	vmul.f32	s1, s0, s16
 80050c8:	e7df      	b.n	800508a <scalbnf+0x1e>
 80050ca:	eddf 7a16 	vldr	s15, [pc, #88]	; 8005124 <scalbnf+0xb8>
 80050ce:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80050d2:	e7da      	b.n	800508a <scalbnf+0x1e>
 80050d4:	0ddb      	lsrs	r3, r3, #23
 80050d6:	e7ec      	b.n	80050b2 <scalbnf+0x46>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	dd06      	ble.n	80050ea <scalbnf+0x7e>
 80050dc:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80050e0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80050e4:	ee00 3a90 	vmov	s1, r3
 80050e8:	e7cf      	b.n	800508a <scalbnf+0x1e>
 80050ea:	f113 0f16 	cmn.w	r3, #22
 80050ee:	da06      	bge.n	80050fe <scalbnf+0x92>
 80050f0:	f24c 3350 	movw	r3, #50000	; 0xc350
 80050f4:	4298      	cmp	r0, r3
 80050f6:	dcdf      	bgt.n	80050b8 <scalbnf+0x4c>
 80050f8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8005124 <scalbnf+0xb8>
 80050fc:	e7de      	b.n	80050bc <scalbnf+0x50>
 80050fe:	3319      	adds	r3, #25
 8005100:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8005104:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8005108:	eddf 7a07 	vldr	s15, [pc, #28]	; 8005128 <scalbnf+0xbc>
 800510c:	ee07 3a10 	vmov	s14, r3
 8005110:	ee67 0a27 	vmul.f32	s1, s14, s15
 8005114:	e7b9      	b.n	800508a <scalbnf+0x1e>
 8005116:	bf00      	nop
 8005118:	ffff3cb0 	.word	0xffff3cb0
 800511c:	4c000000 	.word	0x4c000000
 8005120:	7149f2ca 	.word	0x7149f2ca
 8005124:	0da24260 	.word	0x0da24260
 8005128:	33000000 	.word	0x33000000

0800512c <copysignf>:
 800512c:	ee10 3a10 	vmov	r3, s0
 8005130:	ee10 2a90 	vmov	r2, s1
 8005134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005138:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800513c:	4313      	orrs	r3, r2
 800513e:	ee00 3a10 	vmov	s0, r3
 8005142:	4770      	bx	lr

08005144 <_init>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	bf00      	nop
 8005148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514a:	bc08      	pop	{r3}
 800514c:	469e      	mov	lr, r3
 800514e:	4770      	bx	lr

08005150 <_fini>:
 8005150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005152:	bf00      	nop
 8005154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005156:	bc08      	pop	{r3}
 8005158:	469e      	mov	lr, r3
 800515a:	4770      	bx	lr
